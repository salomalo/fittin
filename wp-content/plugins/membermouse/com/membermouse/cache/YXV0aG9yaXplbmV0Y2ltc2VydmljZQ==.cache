/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_AuthorizeNetCIMService is an implementation of the MM_PaymentService interface using Authorize.net CIM
 */

class MM_AuthorizeNetCIMService extends MM_ScheduledPaymentService
{
	public static $VALIDATION_MODE_LIVE = "liveMode";
	public static $VALIDATION_MODE_TEST = "testMode";
	public static $VALIDATION_MODE_NONE = "none";
	
	protected $token = "AUTHORIZENETCIM";
	
	protected $testAPILogin = "";
	protected $testTransactionKey = "";
	
	protected $liveAPILogin = "";
	protected $liveTransactionKey = "";
	protected $liveValidationMode = false;
	
	protected $testMode = false;
	
	protected $acceptJSEnabled = false;
	protected $testPublicClientKey = "";
	protected $livePublicClientKey = "";
	
	protected $supportedCurrencies = array("USD","CAD","GBP","EUR","AUD","NZD");
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/authorizenet/AuthorizeNet.php");
	}
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_AUTHNET_CIM_CUSTOMER_LINKS." (\n".
				"authnet_customer_id bigint(20) NOT NULL,\n".
				"authnet_payment_id bigint(20) NOT NULL,\n".
				"membermouse_customer_id bigint(20) NOT NULL,\n".
				"UNIQUE KEY authnet_payment_id (authnet_payment_id),\n".
				"UNIQUE KEY membermouse_customer_id (membermouse_customer_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		$sql.= "CREATE TABLE ".MM_TABLE_AUTHNET_CIM_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(40),\n".
				"authorization_code varchar(20),\n".
				"last_four varchar(4) NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_authnet_charge_charge_id_idx (charge_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Authorize.net CIM service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TOKEN_EXCHANGE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Authorize.net CIM
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/authorizenetcim_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);

		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['authorizenetcim'])?$post['payment_service']['authorizenetcim']:array();
			$empty_errors = "";
			$config['test_mode'] = isset($config['test_mode'])?(bool)$config['test_mode']:false;
			$config['live_validation_mode'] = isset($config['live_validation_mode'])?(bool)$config['live_validation_mode']:false;
			$config['accept_js_enabled'] = isset($config['accept_js_enabled'])?(bool)$config['accept_js_enabled']:false;
			
			if ($config['test_mode'])
			{	
				if(empty($config['test_api_login']))
				{
					$empty_errors .= "Authorize.net CIM: Please enter a value for the Test API Login\n";
				}
				
				if(empty($config['test_transaction_key']))
				{
					$empty_errors .= "Authorize.net CIM: Please enter a value for the Test Transaction Key";
				}
				
				if (($config['accept_js_enabled']) && empty($config['test_public_client_key']))
				{
					$emptyErrors .= "Authorize.net CIM: Please enter a value for the Test Public Client Key";
				}
			}
			else
			{
				if(empty($config['live_api_login']))
				{
					$empty_errors .= "Authorize.net CIM: Please enter a value for the Live API Login\n";
				}
				
				if(empty($config['live_transaction_key']))
				{
					$empty_errors .= "Authorize.net CIM: Please enter a value for the Live Transaction Key";
				}
				
				if (($config['accept_js_enabled']) && empty($config['live_public_client_key']))
				{
					$emptyErrors .= "Authorize.net CIM: Please enter a value for the Public Client Key";
				}
			}
			
			if ($empty_errors != "")
			{
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means they are all values are set
			$this->setTestMode($config['test_mode']);
			$this->setAcceptJSEnabled($config['accept_js_enabled']);
			
			if ($this->testMode)
			{
				$this->setTestAPILogin($config['test_api_login']);
				$this->setTestTransactionKey($config['test_transaction_key']);
				if ($this->acceptJSEnabled)
				{
					$config['test_public_client_key'] = trim($config['test_public_client_key']); //remove whitespace
					$this->setTestPublicClientKey($config['test_public_client_key']);
				}
			}
			else
			{
				$this->setLiveAPILogin($config['live_api_login']);
				$this->setLiveTransactionKey($config['live_transaction_key']);
				$this->setLiveValidationMode($config['live_validation_mode']);
				if ($this->acceptJSEnabled)
				{
					$config['live_public_client_key'] = trim($config['live_public_client_key']); //remove whitespace
					$this->setLivePublicClientKey($config['live_public_client_key']);
				}
			}
		}
		return new MM_Response();
	}
	
	/**
	 * Returns an Authorize.net CIM request object
	 * 
	 * @return AuthorizeNetCIM
	 */
	private function getAuthorizeNetCIM()
	{
		$authNetCim = null;
		
		if ($this->testMode && !empty($this->testAPILogin) && !empty($this->testTransactionKey))
		{
			$authNetCim = new AuthorizeNetCIM($this->testAPILogin, $this->testTransactionKey);
			$authNetCim->setSandbox(true);
		}
		else if (!empty($this->liveAPILogin) && !empty($this->liveTransactionKey))
		{
			$authNetCim = new AuthorizeNetCIM($this->liveAPILogin, $this->liveTransactionKey);
			$authNetCim->setSandbox(false);
		}
		
		return $authNetCim;
	}

	
	/**
	 * Creates a customer in the Authorize.net CIM System
	 * 
	 * @param MM_User $user The MemberMouse user
	 * @param MM_CustomerAddress $billingAddress The billing address of the customer credit card
	 * @param MM_CardInfo $cardInfo The customer's credit card information
	 * @param $originalOrderId (optional) The order id to link the local card on file information to
	 * 
	 * @return MM_Response indicating whether the customer was created in the Authorize.net CIM system successfully
	 */
	public function createCustomer(MM_User $user, MM_CustomerAddress $billingAddress, MM_CardInfo $cardInfo, $originalOrderId=null)
	{
		global $wpdb;
		
		$customerProfileId = null;
		$paymentProfileId = null;
		
		$authNetCIM = $this->getAuthorizeNetCIM();
		
		// create customer profile
		$customerProfile = new AuthorizeNetCustomer();
		$customerProfile->merchantCustomerId = $user->getId();
		$customerProfile->description = get_bloginfo()." Customer ID# {$user->getId()} ({$user->getEmail()})";
		$customerProfile->email = $user->getEmail();
		
		$response = $authNetCIM->createCustomerProfile($customerProfile);
		
		if($response->isOk())
		{
			$customerProfileId = $response->getCustomerProfileId();
		}
		else 
		{
			return new MM_Response("Error creating customer profile: {$response->getMessageText()}", MM_Response::$ERROR);
		}
		
		// add payment profile to customer
		$paymentProfile = new AuthorizeNetPaymentProfile();
		$paymentProfile->customerType = "individual";
		
		$paymentProfile->billTo->firstName = $user->getFirstName();
		$paymentProfile->billTo->lastName = $user->getLastName();
		$paymentProfile->billTo->address = $billingAddress->getAddressLine1();
		$paymentProfile->billTo->city = $billingAddress->getCity();
		$paymentProfile->billTo->state = $billingAddress->getState();
		$paymentProfile->billTo->zip = $billingAddress->getPostalCode();
		$paymentProfile->billTo->country = $billingAddress->getCountry();
		$paymentProfile->billTo->phoneNumber = $user->getPhone();
		
		if ($cardInfo instanceof MM_PaymentToken)
		{
			//make sure there is no funny business going on with the payment token received from the front end
			$paymentToken = htmlentities($cardInfo->getToken(), ENT_QUOTES, "UTF-8");
			$tokenComponents = explode("|",$paymentToken);
			if (count($tokenComponents) == 2)
			{
				$paymentProfile->payment->opaqueData = new stdClass();
				$paymentProfile->payment->opaqueData->dataDescriptor = $tokenComponents[0];
				$paymentProfile->payment->opaqueData->dataValue = $tokenComponents[1];
			}
		}
		else 
		{
			$paymentProfile->payment->creditCard->cardNumber = $cardInfo->getCardNumber();
			$paymentProfile->payment->creditCard->expirationDate = $cardInfo->getExpirationYear()."-".$cardInfo->getExpirationMonth();
			$paymentProfile->payment->creditCard->cardCode = $cardInfo->getCVV();
		}
		
		$response = $authNetCIM->createCustomerPaymentProfile($customerProfileId, $paymentProfile, $this->getActiveValidationMode());
		
		if($response->isOk())
		{
			$paymentProfileId = $response->getPaymentProfileId();
		}
		else 
		{
			$authNetCIM->deleteCustomerProfile($customerProfileId);
			
			switch($response->getMessageCode())
			{
				// Error Code returned by Authnet CIM when CC authorization is turned on and Billing Address or 
				// Billing Zip (or both) is missing. Since we know what causes this error, this will provide a 
				// more descript error message to the user to inform them more concisely as to what the issue is
				case "E00027":
					$missingFields = array();
					$message = "The following fields are required: ";
						
					if(!isset($paymentProfile->billTo->address) || !$paymentProfile->billTo->address)
					{
						$missingFields[] = "Billing Address";
					}
					
					if(!isset($paymentProfile->billTo->zip) || !$paymentProfile->billTo->zip)
					{
						$missingFields[] = "Billing Zip Code";
					}
					
					$message .= implode(", ", $missingFields);
						
					break;
					
				default:
					$message = $response->getMessageText();
					break;
			}
			
			return new MM_Response("Error adding payment profile to customer: {$message}", MM_Response::$ERROR);
		}
		
		if(is_null($customerProfileId) || is_null($paymentProfileId))
		{
			return new MM_Response("Unable to create customer", MM_Response::$ERROR);
		}
		
		//create link to authorize.net CIM customer
		$result = $wpdb->insert(MM_TABLE_AUTHNET_CIM_CUSTOMER_LINKS, array("authnet_customer_id"=>$customerProfileId, "authnet_payment_id"=>$paymentProfileId, "membermouse_customer_id"=>$user->getId()));
		if(!$result)
		{
			//TODO: do something if this fails in the future, ie log. Not a critical enough error to stop the process, but we would be interested to know it happened
		}
		
		//create entry in card on file table
		$cofData = array("user_id"=>$user->getId(), "payment_service_id"=>$this->getId(), "payment_service_identifier"=>$paymentProfileId);
		if (!is_null($originalOrderId))
		{
			$cofData['original_order_id'] = $originalOrderId;
		}
		$result = $wpdb->insert(MM_TABLE_CARD_ON_FILE, $cofData);
		if(!$result)
		{
			//TODO: same deal as above: do something if this fails in the future, ie log. Not critical enough error to stop 
		}
		
		$customerInfo = array();
		$customerInfo["customer_id"] = $customerProfileId;
		$customerInfo["payment_id"] = $paymentProfileId;
		
		return new MM_Response($customerInfo);
	}
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		parent::chargeOrder($order,$cardInfo,$validate);
		
		$tryCardOnFile = is_null($cardInfo);
		
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
		}			
					
		$authNetCIMCustomerInfo = $this->lookupCustomer($order->getCustomer()->getId());
		
		$productItems = $order->getProducts();
		if ($authNetCIMCustomerInfo === false)
		{
			if ($tryCardOnFile)
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Invalid credit card information",MM_PaymentServiceResponse::$ERROR); 
			}
			$ccResponse = $this->createCustomer($order->getCustomer(), $order->getBillingAddress(), $cardInfo, $order->id);
			if (MM_Response::isError($ccResponse))
			{
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return new MM_PaymentServiceResponse("Error: {$ccResponse->message}",MM_PaymentServiceResponse::$ERROR);   
			}
			$authNetCIMCustomerInfo = $ccResponse->message;
		}
		else 
		{
			if (!$tryCardOnFile)
			{
				//there is a card on file, but credit card info was sent as well. Update the card on file to be the card that was sent
				$aProductItem = reset($productItems);
				$updateResponse = $this->updateSubscriptionInfo($aProductItem,$cardInfo,$order->getBillingAddress());
				if (MM_PaymentServiceResponse::isError($updateResponse))
				{ 
					$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
					return $updateResponse;
				}
			}
		}

		//now setup schedules for the recurring products
		$createScheduledResult = $this->createSchedulesFromProducts($productItems);
		
		if(MM_PaymentServiceResponse::isError($createScheduledResult))
		{ 
			$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
			return $createScheduledResult; 
		}
		
		if ($order->getTotal() > 0.00)
		{
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem = reset($productItems);
				$orderItemId = $orderItem->getId();
			}
			
			$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
			$invoiceNumber = $order->getOrderNumber()."-".$orderItem->getItemId();
			$chargeResponse = $this->sendAuthNetCIMCharge($authNetCIMCustomerInfo, $order->getTotal(), $invoiceNumber, $description);
			
			if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
			{ 
				$createdSubscriptions = $createScheduledResult->message;
				if (is_array($createdSubscriptions) && (count($createdSubscriptions) > 0))
				{
					$this->cancelScheduledSubscriptions($createdSubscriptions);
				}
				$order->saveOrderStatus(MM_Order::$ERROR_FAILED);
				return $chargeResponse;  
			}
			
			//log to transactions tables
			$chargeObject = $chargeResponse->getMessage();
			
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$lastFour = (isset($chargeObject->card_type)) ? str_replace("X", "", $chargeObject->card_type) : "";
			$lastFour = substr($lastFour, 0, 4);
			
			$insertData = array( "order_id"          	=> $order->getId(),
								 "order_item_id"     	=> $orderItemId,
								 "charge_id"     	 	=> $chargeObject->transaction_id,
								 "authorization_code"	=> (isset($chargeObject->authorization_code)) ? $chargeObject->authorization_code : "",
								 "last_four"			=> $lastFour,
								 "amount"            	=> $order->getTotal(),
								 "transaction_date"  	=> $transactionDate
			);
			$wpdb->insert(MM_TABLE_AUTHNET_CIM_CHARGES,$insertData);
			$authNetChargeId = $wpdb->insert_id;
			
			//now log the payment in the transactions table
			if ($this->testMode)
			{
				$res = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$authNetChargeId,$transactionDate);
			}
			else 
			{
				$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $order->getTotal(), $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$authNetChargeId,$transactionDate);
			}
		}
		
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		$order->saveOrderStatus(MM_Order::$PAID_COMPLETE);
		return new MM_PaymentServiceResponse();
	}	
	
	
	/**
	 * Send a charge to Authorize.net CIM, and returns an object containing the unfiltered result.
	 * 
	 * @param array $authNetCIMCustomerInfo An array of Authorize.net CIM customer info to charge. 
	 * @param integer $amount The amount to charge in cents. If a amount is given that is a float, it is assumed to be dollars and multiplied by 100 to get the integer value
	 * @param string $invoiceNumber The invoice number to attach to the charge
	 * @param string $description The description to attach to the charge
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the braintree charge object returned by the gateway, on failure contains an error message
	 */
	protected function sendAuthNetCIMCharge($authNetCIMCustomerInfo, $amount, $invoiceNumber, $description="")
	{
		if (is_null($authNetCIMCustomerInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$transaction = new AuthorizeNetTransaction();
		$transaction->amount = $amount;
		$transaction->order->invoiceNumber = $invoiceNumber;
		$transaction->order->description = $description;
		$transaction->customerProfileId = $authNetCIMCustomerInfo["customer_id"];
		$transaction->customerPaymentProfileId = $authNetCIMCustomerInfo["payment_id"];
		
		$authNetCIM = $this->getAuthorizeNetCIM();
		$response = $authNetCIM->createCustomerProfileTransaction("AuthCapture", $transaction);
		
		if($response->isOk()) 
		{
			$transactionResponse = $response->getTransactionResponse();
			return new MM_PaymentServiceResponse($transactionResponse);
		}
		else 
		{
			return new MM_PaymentServiceResponse("Unable to create charge: {$response->getMessageText()}", MM_PaymentServiceResponse::$ERROR);
		}
	}
	
	
	protected function executeSubscriptionPayment(MM_OrderItem $orderItem, $currentRebillNumber)
	{
		global $wpdb;
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because the item is cancelled");
		}
		
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_COMPLETE)
		{
			return new MM_PaymentServiceResponse("Subscription for order item id ".$orderItem->getId()." was not charged because billing is complete for this item");
		}
		
		$order = new MM_Order($orderItem->getOrderId());
		
		$authNetCIMCustomerInfo = $this->lookupCustomer(MM_Order::getUserIdByOrderId($order->id));
		if ($authNetCIMCustomerInfo === false)
		{
			return new MM_PaymentServiceResponse("Invalid card on file for user id {$paymentEvent->getUserId()}",MM_Response::$ERROR);
		}

		$description = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
		$invoiceNumber = $order->getOrderNumber()."-".$orderItem->getItemId();
		$chargeResponse = $this->sendAuthNetCIMCharge($authNetCIMCustomerInfo, $orderItem->getRecurringAmount(), $invoiceNumber, $description);
		
		if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
			$orderItem->commitData();
			parent::handleOverdueSubscriptionItem($orderItem);
			return $chargeResponse;
		}
		
		//log successful transaction
		$chargeObject = $chargeResponse->getMessage();
		$transactionDate = MM_Utils::getCurrentTime();
		$lastFour = (isset($chargeObject->card_type)) ? str_replace("X", "", $chargeObject->card_type) : "";
		$lastFour = substr($lastFour, 0, 4);
		
		$insertData = array( "order_id" => $order->getId(),
				"order_item_id"     	=> $orderItem->getId(),
				"charge_id"     		=> $chargeObject->transaction_id,
				"authorization_code"	=> (isset($chargeObject->authorization_code)) ? $chargeObject->authorization_code : "",
				"last_four"				=> $lastFour,
				"amount"           	 	=> $orderItem->getRecurringAmount(),
				"transaction_date"  	=> $transactionDate);
		
		$wpdb->insert(MM_TABLE_AUTHNET_CIM_CHARGES,$insertData);
		$authNetCIMTableChargeId = $wpdb->insert_id;
	
		if ($this->testMode)
		{
			MM_TransactionLog::createTestTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$authNetCIMTableChargeId);	
		}
		else 
		{
			MM_TransactionLog::createTransactionEntry($orderItem->getOrderId(), $orderItem->getId(), $orderItem->getRecurringAmount(), $order->getCurrency(), $description, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$authNetCIMTableChargeId);
		}
			
		// schedule another payment if necessary
		return $this->scheduleNextPaymentForExistingSubscription($orderItem, $order->getCustomer(), $currentRebillNumber);
	}
	
	
	/**
	 * Looks up the Authorize.net CIM customer id linked to a MemberMouse user
	 * 
	 * @param int $userId The MemberMouse user id
	 * @return The (array) Authorize.net CIM customer id and payment id if found, boolean false if not found or errored
	 */
	protected function lookupCustomer($userId)
	{
		global $wpdb;
		
		$lookupSQL = "SELECT authnet_customer_id, authnet_payment_id from ".MM_TABLE_AUTHNET_CIM_CUSTOMER_LINKS." WHERE membermouse_customer_id='{$userId}'";
		$row = $wpdb->get_row($lookupSQL);
		if (is_null($row))
		{
			return false;
		}
		
		$customerInfo = array();
		$customerInfo["customer_id"] = $row->authnet_customer_id;
		$customerInfo["payment_id"] = $row->authnet_payment_id;
		
		return $customerInfo;
	}
	
	
	/**
	 * Updates the payment gateway with new information, and update the MemberMouse order with the new billing address
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * 
	 * @param MM_OrderItem $orderItem The order item representing the subscription being updated
	 * @param MM_CardInfo $cardInfo (optional) The new card to store on file
	 * @param MM_CustomerAddress $billingAddress The new billing address to store. Should be the address associated with the customer's card on file
	 * 
	 * @return MM_PaymentServiceResponse representing success or error. Contains a descriptive error message on error
	 * 
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null) 
	{
		global $wpdb;
		
		if (is_null($cardInfo) || is_null($billingAddress))
		{
			return new MM_PaymentServiceResponse("Error: Both a credit card and a billing address must be supplied to update a subscription",MM_PaymentServiceResponse::$ERROR);
		}
		
		$cardValid = $cardInfo->validate();
		if ($cardValid !== true)
		{
			return new MM_PaymentServiceResponse("Error: {$cardValid}",MM_PaymentServiceResponse::$ERROR);
		}
		
		$customerId = MM_Order::getUserIdByOrderId($orderItem->getOrderId());
		if ($customerId == -1)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$authNetCIMCustomerInfo = $this->lookupCustomer($customerId);
		if ($authNetCIMCustomerInfo === false)
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: customer was not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$user = new MM_User($customerId);
		if (!$user->isValid())
		{
			return new MM_PaymentServiceResponse("Unable to update subscription: invalid customer provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		// update payment profile to customer
		$paymentProfile = new AuthorizeNetPaymentProfile();
		$paymentProfile->customerType = "individual";
		
		$paymentProfile->billTo->firstName = $user->getFirstName();
		$paymentProfile->billTo->lastName = $user->getLastName();
		$paymentProfile->billTo->address = $billingAddress->getAddressLine1();
		$paymentProfile->billTo->city = $billingAddress->getCity();
		$paymentProfile->billTo->state = $billingAddress->getState();
		$paymentProfile->billTo->zip = $billingAddress->getPostalCode();
		$paymentProfile->billTo->country = $billingAddress->getCountry();
		$paymentProfile->billTo->phoneNumber = $user->getPhone();
		
		if ($cardInfo instanceof MM_PaymentToken)
		{
			//make sure there is no funny business going on with the payment token received from the front end
			$paymentToken = htmlentities($cardInfo->getToken(), ENT_QUOTES, "UTF-8");
			$tokenComponents = explode("|",$paymentToken);
			if (count($tokenComponents) == 2)
			{
				$paymentProfile->payment->opaqueData = new stdClass();
				$paymentProfile->payment->opaqueData->dataDescriptor = $tokenComponents[0];
				$paymentProfile->payment->opaqueData->dataValue = $tokenComponents[1];
			}
		}
		else
		{
			$paymentProfile->payment->creditCard->cardNumber = $cardInfo->getCardNumber();
			$paymentProfile->payment->creditCard->expirationDate = $cardInfo->getExpirationYear()."-".$cardInfo->getExpirationMonth();
			$paymentProfile->payment->creditCard->cardCode = $cardInfo->getCVV();
		}
		
		$authNetCIM = $this->getAuthorizeNetCIM();
		$response = $authNetCIM->updateCustomerPaymentProfile($authNetCIMCustomerInfo["customer_id"], $authNetCIMCustomerInfo["payment_id"], $paymentProfile);
		
		if($response->isOk())
		{
			parent::updateSubscriptionInfo($orderItem,$cardInfo,$billingAddress);
			if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
			{
				return $this->resumeSubscription($orderItem);
			}
			return new MM_PaymentServiceResponse();
		}
		else
		{	
			return new MM_PaymentServiceResponse("Unable to update credit card on subscription:\n{$response->getMessageText()}", MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId,true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Authorize.net CIM and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Authorize.net CIM api. If Authorize.net CIM notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId,$shouldAttemptGatewayRefund=true) 
	{
		global $wpdb;
		
		//make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from ".MM_TABLE_TRANSACTION_LOG." where id = %s",$transactionId));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist",MM_PaymentServiceResponse::$ERROR);
		}
		
		//make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine where the transaction information is stored based on the type
		$transactionAmount = abs($transactionRow->amount);
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$authNetCIMChargeQuery = "SELECT * from ".MM_TABLE_AUTHNET_CIM_CHARGES." WHERE id = %s";
				$authNetCIMChargeInfo = $wpdb->get_row($wpdb->prepare($authNetCIMChargeQuery,$transactionRow->payment_service_detail_id));
				$authNetChargeId = $authNetCIMChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($authNetChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			$authNetCIMCustomerInfo = $this->lookupCustomer(MM_Order::getUserIdByOrderId($authNetCIMChargeInfo->order_id));
			return $this->refundAuthNetCIMChargeId($authNetCIMCustomerInfo, $authNetChargeId, $authNetCIMChargeInfo->amount, $transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success
	}	 
	 
	
	/**
	 * Refunds a Authorize.net CIM charge, and logs the refund in the transaction table
	 * 
	 * @param array $authNetCIMCustomerInfo An array of Authorize.net CIM customer info to charge. 
	 * @param string $authNetChargeId The Authorize.net CIM identifier for the charge to be refunded
	 * @param float $refundAmount the amount to refund
	 * @param int $originalTransactionId The identifier for the MemberMouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refundAuthNetCIMChargeId($authNetCIMCustomerInfo, $authNetChargeId, $refundAmount, $originalTransactionId)
	{
		global $wpdb;
 
		$authNetCIM = $this->getAuthorizeNetCIM();
		
		// attempt to issue a refund
		$transaction = new AuthorizeNetTransaction();
		$transaction->amount = $refundAmount;
		$transaction->transId = $authNetChargeId;
		$transaction->customerProfileId = $authNetCIMCustomerInfo["customer_id"];
		$transaction->customerPaymentProfileId = $authNetCIMCustomerInfo["payment_id"];
 
		$response = $authNetCIM->createCustomerProfileTransaction("Refund", $transaction);
 
		if(!$response->isOk())
		{
			// if refund fails, attempt to void the charge	
			$transaction = new AuthorizeNetTransaction();
			$transaction->transId = $authNetChargeId;
			$transaction->customerProfileId = $authNetCIMCustomerInfo["customer_id"];
			$transaction->customerPaymentProfileId = $authNetCIMCustomerInfo["payment_id"];
			
			$response = $authNetCIM->createCustomerProfileTransaction("Void", $transaction); 
			if(!$response->isOk())
			{	
				return new MM_PaymentServiceResponse("Unable to issue a refund: {$response->getMessageText()}", MM_PaymentServiceResponse::$ERROR);
			}
		}
			
		//get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		$transactionDescription = "Refund for transaction# {$originalTransactionId}";
		$transactionDate = MM_Utils::getCurrentTime();
		
		if ($this->testMode)
		{
			$response = MM_TransactionLog::createTestTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$refundAmount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$originalTransactionId);
		}
		else 
		{ 
			$response = MM_TransactionLog::createTransactionEntry($originalTransactionInfo->order_id,
					$originalTransactionInfo->order_item_id,
					$refundAmount,
					$originalTransactionInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$originalTransactionId);
		}
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$originalTransactionId));
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	public function getTestAPILogin()
	{
		return $this->testAPILogin;
	}
	
	
	public function setTestAPILogin($apiLogin)
	{
		$this->testAPILogin = $apiLogin;
	}
	
	
	public function getTestTransactionKey()
	{
		return $this->testTransactionKey;
	}
	
	
	public function setTestTransactionKey($transactionKey)
	{
		$this->testTransactionKey = $transactionKey;
	}
	
	
	public function getLiveAPILogin()
	{
		return $this->liveAPILogin;
	}
	
	
	public function setLiveAPILogin($apiLogin)
	{
		$this->liveAPILogin = $apiLogin;
	}
	
	
	public function getLiveTransactionKey()
	{
		return $this->liveTransactionKey;
	}
	
	
	public function setLiveTransactionKey($transactionKey)
	{
		$this->liveTransactionKey = $transactionKey;
	}
	
	public function getLiveValidationMode()
	{
		return $this->liveValidationMode;
	}

	
	/**
	 * @return Returns the expected "value" of the validation mode the Authnet CIM api is expecting when creating a customer.
	 * - self::$VALIDATION_MODE_LIVE (liveMode): generates a transaction to the processor in the amount of $0.01 or $0.00. If successful, the transaction is immediately voided.
	 * - self::$VALIDATION_MODE_TEST (testMode): Performs field validation only.
	 * - self::$VALIDATION_MODE_NONE (none): no additional validation is performed.
	 */
	public function getActiveValidationMode()
	{
		switch($this->inTestMode())
		{
			case true:
				return self::$VALIDATION_MODE_TEST;
				break;
		
			default:
				return $this->getLiveValidationMode() ? self::$VALIDATION_MODE_LIVE : self::$VALIDATION_MODE_NONE;
				break;
		}
	}
	
	
	public function setLiveValidationMode($validationMode)
	{
		$this->liveValidationMode = $validationMode ? true : false;
	}
	
	
	public function setTestMode($testMode)
	{
		$testMode = (bool)$testMode;
		$this->testMode = $testMode;
	}
	
	
	public function getTestMode()
	{
		return $this->testMode;
	}
	
	
	/**
	 * @see MM_PaymentService::inTestMode()
	 */
	public function inTestMode()
	{
		return $this->getTestMode();
	}
	
	
	/**
	 * @see MM_PaymentService::switchToTestMode()
	 */
	public function switchToTestMode()
	{
		$this->setTestMode(true);
		return true;
	}


	public function isAcceptJSEnabled()
	{
		return $this->acceptJSEnabled;
	}


	public function setAcceptJSEnabled($acceptJSEnabled)
	{
		$this->acceptJSEnabled = (bool)$acceptJSEnabled;
	}
	
	
	/**
	 * checkoutInit is called from the checkout form prior to the page being rendered.
	 *
	 * @see MM_PaymentService::checkoutInit()
	 */
	public function checkoutInit()
	{
		return $this->acceptJSInit(array("acceptJS","membermouse-checkout-form"));
	}
	
	
	/**
	 * Load Accept.js on my account page to support the card update operation
	 *
	 * @see MM_PaymentService::myAccountInit()
	 */
	public function myAccountInit()
	{
		//currently the my account init process for accept.js is exactly the same as the checkout init process
		return $this->acceptJSInit(array("acceptJS","membermouse-myaccount-js"));
	}
	
	
	/**
	 * If Accept.js is being used, the javascript library is enqueued, as well as a custom bridge
	 * 
	 * @param array $bridgeDependencies The dependencies to pass to wp_enqueue_script when loading the token-exchange bridge js
	 */
	protected function acceptJSInit($bridgeDependencies=array())
	{
		//The front-end tasks are only relevent if Accept.js is enabled
		if ($this->acceptJSEnabled)
		{
			//add a closure attached to the 'script_loader_tag' filter to add the required charset attribute to the script load tag
			//this is a hackish way to get around wp_enqueue_scripts not supporting attributes for the generated script tag
			add_filter('script_loader_tag', function($tag, $handle, $src) {
				if ( $handle === 'acceptJS')
				{
					$tag = "<script type='text/javascript' src='{$src}' charset='utf8'></script>";
				}
				return $tag;
			}, 10, 3 );
					
				//when enqueuing accept.js, the $ver parameter for wp_enqueue_script MUST be null, otherwise wp attaches its version to the script.
				//one of the internal checks of the library to determine if it is being loaded from CDN is a url length check, and an attached version
				//changes the length of the url, causing that check to incorrectly fail
				if ($this->testMode)
				{
					wp_enqueue_script("acceptJS", "https://jstest.authorize.net/v1/Accept.js", array(),null, true);
				}
				else
				{
					wp_enqueue_script("acceptJS", "https://js.authorize.net/v1/Accept.js", array(), null, true);
				}
				wp_enqueue_script("membermouse-acceptJS", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-authorizenet-token-exchange.js"), $bridgeDependencies, MemberMouse::getPluginVersion(), true);
				wp_localize_script('membermouse-acceptJS', 'authorizenetJSInfo', array('authnetPublicClientKey' => $this->inTestMode()?$this->getTestPublicClientKey():$this->getLivePublicClientKey(),
						'apiLoginID' => $this->inTestMode()?$this->getTestAPILogin():$this->getLiveAPILogin(),
						'improperAuthnetCIMResponseErrorMsg' => _mmt("An improper response was received from Authorize.net, please try again")));
		}
	}	


	public function getTestPublicClientKey()
	{
		return $this->testPublicClientKey;
	}


	public function setTestPublicClientKey($testPublicClientKey)
	{
		$this->testPublicClientKey = $testPublicClientKey;
	}


	public function getLivePublicClientKey()
	{
		return $this->livePublicClientKey;
	}


	public function setLivePublicClientKey($livePublicClientKey)
	{
		$this->livePublicClientKey = $livePublicClientKey;
	}
	
	
	public function isAcceptJSReady()
	{
	    $siteUrl = MM_OptionUtils::getOption("siteurl");
	    $urlComponents = parse_url(strtolower($siteUrl));
	    if (isset($urlComponents["scheme"]) && ($urlComponents["scheme"] == "https")
	        && isset($urlComponents["host"]) && ($urlComponents["host"] != "localhost"))
	    {
	        return true;
	    }
	    else
	    {
	        return false;
	    }
	}
	
	
}
