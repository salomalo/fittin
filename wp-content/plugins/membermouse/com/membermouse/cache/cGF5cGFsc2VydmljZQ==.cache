/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_PayPalService handls PayPal transactions and notifications made using PayPal Standard and Express Checkout
 * It also has the capability to create orders based on correctly formatted incoming IPNs.
 * 
 * The facilitator of the order creation process for IPNs is the 'custom' field that PayPal allows merchants to send
 * While this field is limited to 255 characters, the scheme used by this class still opens up the possibility for moderate to
 * large orders to be created from an external form or a link.
 * 
 * The scheme is: orderItemId | product quantity x product id | coupon quantity * coupon id | shipping id * shipping amount
 * multiple products and/or coupons are separated by an ampersand (&). Order Item Id only exists if the order contains only one product.
 * 
 * An example custom field might be: |2*14&1*5|1*20|3*14.95 
 * which decodes to: No order item id, 2x product id 14, 1 x product id 5, 1 x coupon id 20, and shipping method with id 3 and amount $14.95
 *
 * 
 */
class MM_PayPalService extends MM_PaymentService
{
	protected $token = "PAYPAL"; 
	
	//paypal payment statuses
	public static $PAYMENT_STATUS_CANCELED_REVERSAL = "Canceled_Reversal";
	public static $PAYMENT_STATUS_COMPLETED = "Completed";
	public static $PAYMENT_STATUS_DENIED = "Denied";
	public static $PAYMENT_STATUS_EXPIRED = "Expired";
	public static $PAYMENT_STATUS_FAILED = "Failed";
	public static $PAYMENT_STATUS_IN_PROGRESS = "In-Progress";
	public static $PAYMENT_STATUS_PARTIALLY_REFUNDED = "Partially_Refunded";
	public static $PAYMENT_STATUS_PENDING = "Pending";
	public static $PAYMENT_STATUS_PROCESSED = "Processed";
	public static $PAYMENT_STATUS_REFUNDED = "Refunded";
	public static $PAYMENT_STATUS_REVERSED = "Reversed";
	public static $PAYMENT_STATUS_VOIDED = "Voided";
	
	public static $DFLT_LOCALE = "DFLT_LOCALE";

	public static $IPN_USER_AGENT = "MEMBERMOUSESERVICE";
	
	//internal errors
	private static $MULTIPLE_SUBSCRIPTIONS_ERROR = "multiple_subscriptions_error";
	
	//ipn processing statuses
	private static $IPN_STATUS_PROCESSED = 1;
	private static $IPN_STATUS_DUPLICATE = 2;
	
	//production and sandbox urls
	protected $sandboxUrl    = "https://www.sandbox.paypal.com/cgi-bin/webscr";
	protected $productionUrl = "https://www.paypal.com/cgi-bin/webscr";
	
	//production and sandbox nvp endpoints
	protected $sandboxNvpEndpoint    = "https://api-3t.sandbox.paypal.com/nvp";
	protected $productionNvpEndpoint = "https://api-3t.paypal.com/nvp";
	
	//configuration fields
	protected $email = "";
	protected $locale = "";
	protected $useSandbox = false;
	
	//api configuration fields, for use with Express Checkout API (can be used to cancel subscriptions)
	protected $apiUsername  = "";
	protected $apiPassword  = "";
	protected $apiSignature = "";
	
	//pdt identity token
	protected $pdtIdentityToken = "";
	
	//the following fields should not be persisted/serialized
	protected $exclusions = array("sandboxUrl", "productionUrl","sandboxNvpEndpoint","productionNvpEndpoint");
	
	//TODO: REFACTOR: NEVER SHIP TO PRODUCTION WITH $skipValidation AS TRUE; FOR LOCAL TESTING ONLY!
	private $skipValidation = false;
	private $allowOrderCreation = false;
	
	protected $supportedCurrencies = array("USD","AUD","BRL","CAD","CHF","CZK","DKK","EUR","GBP",
										   "HKD","HUF","ILS","JPY","MXN","MYR","NOK","NZD","PHP",
										   "PLN","SEK","SGD","THB","TRY","TWD");
	
	public function install()
	{
		global $wpdb;
		
		parent::install();
		
		$sql[] = "CREATE TABLE ".MM_TABLE_PAYPAL_IPN_LOG." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20),\n".
				"order_item_id bigint(20),\n".
				"txn_id varchar(20),\n".
				"txn_type varchar(32),\n".
				"subscr_id varchar(20),\n".
				"payment_status varchar(32),\n".
				"ipn_content text not null,\n".
				"received datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_paypal_ipn_log_txn_id_idx (txn_id)".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		
		$sql[] = "CREATE TABLE ".MM_TABLE_PAYPAL_SUBSCR_LINKS." (\n".
				"subscr_id varchar(20) NOT NULL,\n".
				"order_item_id bigint(20) NOT NULL,\n".
				"PRIMARY KEY  (subscr_id,order_item_id)\n".
				") DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;";
		
		
		foreach ($sql as $query)
		{
			dbdelta($query);
		}
		
	}
	
	
	/**
	 * Used to report what features the PayPal Service supports
	 * @see MM_PaymentService::supportsFeature()
	 * 
	 * @param $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_PaymentServiceFeatures::OFFSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TEST_MODE;
		return in_array($featureConst,$supported,true);
	}
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring PayPal
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/paypal_config.html.php",$this);
		return $config_options;
	}
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post)
	{
		$active = isset($post['offsite_payment_services']) && in_array(strtolower($this->getToken()), $post['offsite_payment_services']);
		$this->setActive($active);
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['paypal'])?$post['payment_service']['paypal']:array();
			if (!isset($config['email']) || empty($config['email']))
			{
				return new MM_Response("PayPal Configuration Error: please enter an email address",MM_Response::$ERROR);
			}
			else if (isset($config['email']))
			{
				//TODO: FUTURE: validate email?
				$this->setEmail($config['email']);
			}

			$this->setLocale($config['locale']);
			$this->useSandbox((isset($config['use_sandbox']) && (strtolower($config['use_sandbox']) == "true"))?true:false);
			
			$config['pdt_identity_token'] = !empty($config['pdt_identity_token'])?$config['pdt_identity_token']:"";
			$this->setPDTIdentityToken($config['pdt_identity_token']);
			
			$config['api_username'] = !empty($config['api_username'])?$config['api_username']:"";
			$config['api_password'] = !empty($config['api_password'])?$config['api_password']:"";
			$config['api_signature'] = !empty($config['api_signature'])?$config['api_signature']:"";
			
			if (!empty($config['api_username']) || !empty($config['api_password']) || !empty($config['api_signature']))
			{
				$allAreConfigured = (!empty($config['api_username']) && !empty($config['api_password']) && !empty($config['api_signature']));
				if (!$allAreConfigured)
				{
					return new MM_Response("PayPal Configuration Error: The API credentials must all be filled out in order to use the PayPal API. It is not required, but without the API, refunds and recurring product cancellations cannot be performed from within MemberMouse",MM_Response::$ERROR);
				}
			}
			$this->setAPIUsername($config['api_username']);
			$this->setAPIPassword($config['api_password']);
			$this->setAPISignature($config['api_signature']);
		}
		return new MM_Response();
	}
	
	public function getEmail()
	{
		return $this->email;
	}
	
	
	public function setEmail($email)
	{
		$this->email = $email;
	}
	
	
	/**
	 * Refunds the transaction with the supplied id if api credentials are present. If not, an error message directing the user to the
	 * PayPal interface is returned
	 *
	 * @param integer $transactionId The MemberMouse transaction id
	 * @return MM_PaymentServiceResponse Representing the success or failure of the refund operation
	 */
	public function refundTransaction($transactionId)
	{
		if (!empty($this->apiUsername) && !empty($this->apiPassword) && !empty($this->apiSignature))
		{
			$refundResponse = $this->expressCheckoutRefundTransaction($transactionId);
			return $refundResponse;
		}
		$paypalUrl = "https://www.paypal.com";
		$errorMessage = "To refund this transaction, use the <a href='{$paypalUrl}' target='_blank'>PayPal interface at {$paypalUrl}</a>";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}
	
	public function displayPaymentForm(MM_Order $order)
	{
		$templateData = new stdClass();
		$templateData->form_destination = $this->getPaypalStandardUrl();
		
		$templateData->token = $this->getToken();
		$templateData->configArray = $this->getPaymentConfigArray($order); 
		$html= MM_TEMPLATE::generate("{$this->getTemplateDir()}/paypal_payment_form.html.php",$templateData);
		return $html;
	}
	
	
	/**
	 * Creates an array containing the key/value pairs necessary to create a paypal standard subscribe button
	 * If an order contains a single recurring product, send the user_id + "|" + order_item_id in the 'custom'
	 * field in the PayPal request. 
	 * 
	 * @param MM_Order $order The order
	 * @return array of key/value pairs
	 */
	protected function getPaymentConfigArray(MM_Order $order)
	{
		
		$orderProductItems = $order->getProducts();
		$recurringItems = array();
		
		$orderHasRegularProduct = false;
		$orderHasRecurringProduct = false;
		
		$error = "";
		$itemDescription = "";
	
		foreach ($orderProductItems as $eachProductItem)
		{
			$eachProduct = new MM_Product($eachProductItem->getItemId());
			$itemDescription = ($eachProductItem->getQuantity() > 1)?($eachProductItem->getQuantity()." x ".$eachProduct->getName()):$eachProduct->getName();
			if ($eachProduct->isRecurring())
			{
				$recurringItemData = new stdClass();
				$recurringItemData->item = $eachProductItem;
				$recurringItemData->product = $eachProduct;
				$recurringItems[] = $recurringItemData;
				if ($orderHasRecurringProduct)
				{
					$error = self::$MULTIPLE_SUBSCRIPTIONS_ERROR;
				}
				else
				{
					$orderHasRecurringProduct = true;
				}
			}
			else 
			{
				$orderHasRegularProduct = true; //not being used yet, but available if needed in the future
			}
		}
		
		if (count($orderProductItems) > 1) //itemdescription is set in the loop above
		{
			$itemDescription = get_bloginfo() . " products";
		}
		
		
		//If there are no recurring products, use the _xclick command (Buy Now Button analogue) to send the data to PayPal
		//Otherwise, we must use _xclick_subscriptions
		$billingConfig = array();
		if (!$orderHasRecurringProduct)
		{
			$amountToBill = ($order->getSubtotal() - abs($order->getDiscount()));
			$amountToBill = ($amountToBill < 0)?0:$amountToBill; //if the discount is greater than the order amount, set price becomes $0 instead of negative
			
			$billingConfig['cmd'] = '_xclick';
			$billingConfig['amount'] = $amountToBill; //discount has to be combined into item price because there is no paypal variable for discounts
			$billingConfig['item_name'] = $itemDescription;
			$billingConfig['upload'] = '1';
			$billingConfig['no_shipping'] = '1'; //don't prompt for shipping address, we already have it
			$billingConfig['shipping'] = $order->getShipping();
			
			// TODO add tax back in when supported by MemberMouse; currently including the tax will
			// make it so that PayPal's built-in tax calculation functionality is bypassed
			//$billingConfig['tax'] = $order->getTax();
			//this can be broken out into individual items later, but then the discounts must be calculated per-item
			//see https://cms.paypal.com/au/cgi-bin/?cmd=_render-content&content_ID=developer/e_howto_html_cart_upload for details
		}
		else
		{
			//order has a recurring product
			$recurringItemData = reset($recurringItems);
			$recurringItem = $recurringItemData->item;
			$recurringProduct = $recurringItemData->product;
			$billingConfig['cmd'] = '_xclick-subscriptions';
			$billingConfig['no_note'] = 1;
			$billingConfig['src'] = "1"; //Set recurring payments until canceled
			$billingConfig['item_name'] = $itemDescription;
			$billingConfig['item_number'] = $recurringProduct->getId();
			
			$limitModifier = 0;
			if ($order->getTotal() != $recurringItem->getRecurringAmount())
			{
				if ($recurringItem->getTrialDuration() > 0)
				{
					$paypalUnits = $this->convertMMToPaypalUnits($recurringProduct->getTrialDuration(),$recurringProduct->getTrialFrequency());
				}
				else 
				{
					$paypalUnits = $this->convertMMToPaypalUnits($recurringProduct->getRebillPeriod(), $recurringProduct->getRebillFrequency());
					$limitModifier = 1;
				}
				$billingConfig['a1'] = $order->getTotal();
				$billingConfig['p1'] = $paypalUnits['numUnits'];
				$billingConfig['t1'] = $paypalUnits['unitName'];
			}
			
			$regularPeriodPaypalUnits = $this->convertMMToPaypalUnits($recurringItem->getRebillPeriod(), $recurringItem->getRebillFrequency());
			$billingConfig['a3'] = $recurringItem->getRecurringAmount();
			$billingConfig['p3'] = $regularPeriodPaypalUnits['numUnits'];
			$billingConfig['t3'] = $regularPeriodPaypalUnits['unitName'];
			if ($recurringProduct->doLimitPayments())
			{
				$billingConfig['srt'] = ($recurringProduct->getNumberOfPayments() - $limitModifier);
			}
		}
		
		//get confirmation url to redirect to on success
		$returnUrl = MM_AccessControlEngine::getConfirmationUrlForOrder($order);
		
		
		$paymentConfig = array();
		$paymentConfig['is_standard']     =   "1"; 
		$paymentConfig['business']        =   $this->getEmail(); //receiver's PayPal email
		$paymentConfig['custom']          =   $this->encodeCustomField($order);
		$paymentConfig['invoice']         =   $order->getOrderNumber(); //invoice (order) number
		$paymentConfig['notify_url']      =   MM_PLUGIN_URL."/x.php?service=paypal";
		$paymentConfig['cbt']             =   "Return to ".MM_OptionUtils::getOption("blogname"); //The text of the button the user sees after payment
		$paymentConfig['cancel_return']   =   MM_OptionUtils::getOption("siteurl");
		$paymentConfig['currency_code']   =   $order->getCurrency(); 
		
		if($this->getLocale() != "" && $this->getLocale() != self::$DFLT_LOCALE)
		{
			$paymentConfig['lc'] =   $this->getLocale();
		}
		
		$paymentConfig['bn']			  =   "MemberMouse_SP"; // PayPal Partnership Program MemberMouse BN code
		
		if (!empty($error))
		{
			$paymentConfig['error']     = $error;
		}
		if ($returnUrl !== false)
		{
			$paymentConfig['return'] = $returnUrl;
			$paymentConfig['rm']     = '2'; //how paypal redirects to the return url. 0 = GETs the returnurl, 1 = GETs with payment variables, 2 = POSTs with payment variables
		}
		
		$paymentConfig = $billingConfig + $paymentConfig;
		return $paymentConfig;		
	}
	
	
	/**
	 * Create a value to be embedded in the 'custom' field for a PayPal Standard order.
	 * It is limited to 255-chars (currently not enforced) and contains the 
	 * order item id (optional, for one product subscriptions only), the product ids/quantities, 
	 * the coupon ids/quantities, and the shipping method id plus the amount. The items are separated by
	 * pipes, with multiple items in each section separated by ampersands. See the class description for more detail
	 * 
	 * @param MM_Order $order The order to encode into a custom field
	 * @return String containing the encoded order
	 */
	public function encodeCustomField(MM_Order $order)
	{
		
		$productItems = $order->getProducts();
		$couponItems = $order->getCoupons();
		
		//section 1 - order item id (only for 'buy now' orders and subscriptions that contain 1 product)
		$itemIdSection = "";
		if (count($productItems) == 1)
		{
			$productItem = reset($productItems);
			if ($productItem->isValid())
			{
				$itemIdSection = $productItem->getId();
			}
		}
		
		//section 2 - product ids
		$productIdSection = "";
		reset($productItems);
		foreach ($productItems as $eachProductItem)
		{
			if (!empty($productIdSection))
			{
				$productIdSection.="&";
			}
			$productIdSection.=($eachProductItem->getQuantity()."*".$eachProductItem->getItemId());
		}
		
		//section 3 - coupon ids
		$couponIdSection = "";
		reset($couponItems);
		foreach ($couponItems as $eachcouponItem)
		{
			if (!empty($couponIdSection))
			{
				$couponIdSection.="&";
			}
			$couponIdSection.=($eachcouponItem->getQuantity()."*".$eachcouponItem->getItemId());
		}
		
		//section 4 - no shipping yet
		$shippingSection = "";
		
		
		//combine the sections
		$encodedField = "{$itemIdSection}|{$productIdSection}|{$couponIdSection}|{$shippingSection}";
		
		return $encodedField;
	}
	
	
	/**
	 * Processes IPN notifications
	 * @see MM_PaymentService::processNotification()
	 * 
	 * @param $request array containing the IPN variables, generally a copy of the $_POST
	 * @return MM_PaymentServiceResponse indicating success or failure processing the IPN
	 */
	public function processNotification($request)
	{
		global $wpdb;
		$request = (empty($request) && !empty($_POST) && is_array($_POST))?$_POST:$request; //if for some reason request isnt set but there is a $_POST, use the $_POST
		
		//validate the IPN
		$res = $this->validateIPN($request);
		if ($res->type == MM_Response::$ERROR)
		{
			return new MM_PaymentServiceResponse("Invalid IPN Notification",MM_PaymentServiceResponse::$ERROR);
		}
		
		//determine if this IPN is for a normal order or a subscription using transaction type (txn_type)
		$txn_type = !empty($request['txn_type'])?$request['txn_type']:"";
		
		switch ($txn_type)
		{
			case 'subscr_signup':
			case 'subscr_payment':
			case 'subscr_modify':
			case 'subscr_failed':
			case 'subscr_cancel':
				return $this->processSubscriptionNotification($request);
				break;
			case 'web_accept':
			case 'cart':
			case 'express_checkout':
				//cart stuff (no subscriptions)
				return $this->processOrderNotification($request);
				break;
			default:
				if ((strcasecmp($request['payment_status'],"Refunded") == 0) && !empty($request['parent_txn_id']))
				{
					return $this->processRefundNotification($request);
				}
				//otherwise, this is an unrecognized txn_type, return an error
				return new MM_PaymentServiceResponse("Unknown transaction type", MM_PaymentServiceResponse::$ERROR);	
		}
		
	}
	
	
	/**
	 * Locates an order item id using an IPN. The procedure is as follows:
	 * 
	 * 1. use invoice which holds the order #. If there is only one product item, return it, otherwise
	 *    match against the product item ids in the IPN
	 * Future step 2 could be to search by paypal email and product id, but this logic would need to be very specific
	 * 
	 * @param array $request The IPN fields. This is currently the $_POST superglobal
	 * @return MM_OrderItem the order item id on success, null if the order item id could not be located
	 */
	
	protected function locateOrderItemIdFromIPN($request)
	{ 
		//step 1 - attempt to retrieve the data from the custom field
		if (!empty($request['custom']))
		{
			$exploded = explode("|",$request['custom']);
			if (count($exploded) > 1)
			{ 
				$orderItemId = reset($exploded);
				if (!empty($orderItemId))
				{
					return $orderItemId;
				}
			}
		}
		
		//reaching this point assumes step 1 failed at some point
		//step 2 - use the invoice field. This method assumes there is only one product in the order. If there is more than one,
		//it doesnt make sense to try to match an order item with multiple products
		$itemNumber = isset($request['item_number'])?$request['item_number']:$request['item_number1'];
		if (!empty($request['invoice']) && !empty($itemNumber))
		{
			$order = MM_Order::getDataByOrderNumber($request['invoice']);
			if ($order->isValid())
			{
				$productItems = $order->getProducts();
				if (isset($productItems[$itemNumber]))
				{
					return $productItems[$itemNumber];
				}
			}
		}
		
		//couldnt reliably match the order, return null representing failure
		return null;
	}
	
	
	/**
	 * On paypal signup and/or first payments we verify that the initial payment is correct for the trial and the
	 * regular payments along with frequency and period of billing.
	 * 
	 * @param MM_OrderItem $orderItem
	 * @param string $trialPeriod
	 * @param float $trialPayment
	 * @param string $regularPeriod
	 * @param float $regularAmount
	 * @param bool $useTrial indicates if the order item should compare to trial values.
	 * @return boolean true if paypal gateway reflects the same values as what was ordered on MM.
	 */
	protected function isValidPaypalGatewaySignupInfo(MM_OrderItem $orderItem, $period, $payment, $useTrial=false)
	{     
		if($useTrial)
		{
			$trialAmt = $orderItem->getTrialAmount();
			if(floatval($payment) != floatval($trialAmt))
			{
				// if existing orderitem is 0 but payment trial was greater it 
				// is assumed a prorated amount due to upgrade.
				// TODO: calculate what was the prorated amount and see if it matches $payment
				$orderId = $orderItem->getOrderId();
				$order = new MM_Order($orderId);
				$discount = $order->getDiscount();
				
				if(floatval($trialAmt)>0)
				{
					$trialMinusDiscount = floatval($trialAmt)-abs($discount); 
					if(floatval($payment) != floatval($trialMinusDiscount))
					{ 
						return false;
					}
				}
				else
				{ 
					$total  =$orderItem->getTotal()-abs($discount);
					if(floatval($payment) != floatval($total))
					{
						return false;
					} 
				}

				// verify no trial period associated as this could just be a discount
				if(!$orderItem->hasTrialPeriod())
				{
					return true;
				}
			}
		}
		else
		{
			$amt = $orderItem->getRecurringAmount();
			if(floatval($payment) != floatval($amt))
			{ 
				 return false;
			}	
		}
		
		// get the period / frequency by which payment is due 
		$periodArr= explode(" ", $period); 
		if(count($periodArr)==2)
		{
			$paypalPeriod = intval($periodArr[0]);
			$paypalFrequency = strtolower($periodArr[1]);   
			$periodOfRebill = ($useTrial)?$orderItem->getTrialDuration():$orderItem->getRebillPeriod();
			$frequencyOfRebill = ($useTrial)?$orderItem->getTrialFrequency():$orderItem->getRebillFrequency(); 
			
			// both frequency and period must match
			if(intval($paypalPeriod)==intval($periodOfRebill))
			{  
				switch(strtolower($frequencyOfRebill))
				{
					case "months":
						return ($paypalFrequency === "m"); 
					case "days":
						return ($paypalFrequency === "d"); 
					case "weeks":
						return ($paypalFrequency === "w");
					case "years":
						return ($paypalFrequency === "y");
				} 
			}  
		} 
		else
		{
			$periodOfRebill = ($useTrial)?$orderItem->getTrialDuration():$orderItem->getRebillPeriod();
			$frequencyOfRebill = ($useTrial)?$orderItem->getTrialFrequency():$orderItem->getRebillFrequency(); 
			if(intval($periodOfRebill)<=0)
			{
				// no period information
				return true;
			}	
		} 
		return false;
	}
	
	
	/**
	 * At the highest level, there are two classifications of IPN that MemberMouse is mainly concerned with. IPNs for subscriptions, and 
	 * IPNs for orders. This method processes subscription IPNs
	 * 
	 * @param $request array
	 * @return MM_PaymentServiceResponse
	 */
	protected function processSubscriptionNotification($request)
	{	
		//pull a few required variables into local scope, for convenience
		$txn_type = !empty($request['txn_type'])?$request['txn_type']:"";
		$txn_id = !empty($request['txn_id'])?$request['txn_id']:"";
		$subscr_id = !empty($request['subscr_id'])?$request['subscr_id']:"";
		$paymentStatus = !empty($request['payment_status'])?$request['payment_status']:"";
		//mc_gross
		
		//attempt to find the order item id
		$orderItemId = $this->lookupOrderItemIdFromSubscription($subscr_id);	
		$orderItemId = (is_null($orderItemId))?$this->locateOrderItemIdFromIPN($request):$orderItemId;
		
		//if order item id was found, retrieve item entity if it exists 
		$orderItem = null;
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			$orderItem = (!$orderItem->isValid())?null:$orderItem;
		}
		$orderId = (is_null($orderItem))?null:$orderItem->getOrderId();
		
		
		$duplicateCheckResponse = $this->atomicDuplicateCheckAndLog($request,"subscription",$orderId,$orderItemId);
		if (MM_Response::isError($duplicateCheckResponse))
		{	  
			return new MM_PaymentServiceResponse("Duplicate IPN detected",MM_Response::$ERROR);
		}
		$ipnId = $duplicateCheckResponse->message;
		
		
		switch ($txn_type)
		{
			case 'subscr_signup':
				if (empty($orderItemId))
				{
					$createResponse = $this->createOrderFromSubscriptionIPN($request);
					if (MM_Response::isError($createResponse))
					{
						return new MM_PaymentServiceResponse($createResponse->message, MM_PaymentServiceResponse::$ERROR);
					}
					$orderItemId = $createResponse->message;
				}
				$this->linkSubscriptionToOrderItemId($subscr_id, $orderItemId);
					  
				/*
				 * Verify that the callback amount should match originating period/frequency/amount
				 * 
				 * From paypal:
				 * period1 - trial duration (if available)
				 * period3 - regular duration
				 * mc_amount1 - trial amount
				 * mc_amount3 - regular cost
				 */
				$trialPeriod = !empty($request['period1'])?$request['period1']:"";
				$trialPaymentAmount = !empty($request['mc_amount1'])?$request['mc_amount1']:"";
				$regularPeriod = !empty($request['period3'])?$request['period3']:"";
				$regularAmount = !empty($request['mc_amount3'])?$request['mc_amount3']:"";

				$notTamperedWith = true;
				if ($orderItem->hasTrialPeriod())
				{
					$notTamperedWith = $notTamperedWith && ($this->isValidPaypalGatewaySignupInfo($orderItem, $trialPeriod, $trialPaymentAmount, true));
				}
				
				if ($notTamperedWith === true)
				{
					$notTamperedWith = $notTamperedWith && ($this->isValidPaypalGatewaySignupInfo($orderItem, $regularPeriod, $regularAmount, false));
				}
				
				if ($notTamperedWith)
				{  
					$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
					$orderItem->commitData();
				}
				else
				{  
					// set to tampered data where period/frequency/amount are invalid
					$orderItem->setStatus(MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH);
					$orderItem->commitData();
				} 
					
				//deal with the scenario where the initial order amount was $0
				if (!is_null($orderItem))
				{
					$order = new MM_Order($orderItem->getOrderId());
					if ($order->isValid() && ($order->getTotal() == 0.00))
					{
						// only allow access in this case if tamper is non evident.  
						if($orderItem->getStatus() != MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH)
						{
							//	for whatever reason (coupons, free trial, etc) the initial order amount was $0, so apply access now
							$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
							if (MM_Response::isError($accessResponse))
							{
								return new MM_PaymentServiceResponse("Error assigning access from $0 order with order id {$order->getId()}",MM_PaymentServiceResponse::$ERROR);
							}
						}
					}
				}  
				
				return new MM_PaymentServiceResponse();
				break;
			case 'subscr_payment':
				//TODO: REFACTOR: set status to paid_completed if its for the full amount, check that payment status is factored in correctly
				$paymentAmount = $request['mc_gross'];
				if (empty($orderItemId))
				{
					$createResponse = $this->createOrderFromSubscriptionIPN($request,MM_Order::$PAID_COMPLETE);
					if ($createResponse->type == MM_Response::$ERROR)
					{
						return new MM_PaymentServiceResponse($createResponse->message, MM_PaymentServiceResponse::$ERROR);
					}
					$orderItemId = $createResponse->message;					
					$this->linkSubscriptionToOrderItemId($subscr_id, $orderItemId);						
				}
				
				//at this point, there has to be an orderItemId or else we would have bailed
				//create the orderItem for later use
				$orderItem = new MM_OrderItem($orderItemId);
				$order = new MM_Order($orderItem->getOrderId());				
				
				//for an order with a free trial, any payment received will be a rebill (there is no IPN received for a $0 payment)
				if (($orderItem->getAmount() > 0.00) && !$this->isSubscriptionRebill($request)) 
				{
					//This is a first payment
					 
					/*
					 * If someone spoofs the payment process and we get a callback for an item but the price doesn't match,
					 * we want to flag this and check for this when allowing content access.
					 */
					$totalOwed = $order->getTotal();  
					$this->modifyForGatewayPriceMismatch($paymentAmount,$totalOwed,$orderItem,$order); 
					
					/*
					 * If the user had tampered with the data, do not make the status of this user active
					 */
					if($orderItem->getStatus() != MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH)
					{ 
						//grant access based on the order
						MM_AccessControlEngine::assignAccessFromOrder($order);
					} 
					
					//now log to transactions table
					$transactionDescription = "Payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
					if ($this->useSandbox)
					{
						$transactionLogResponse = MM_TransactionLog::createTestTransactionEntry($order->getId(),$orderItemId, $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->getId(),$ipnId);
					}
					else 
					{
						$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(),$orderItemId, $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->getId(),$ipnId);
					}
				}
				else 
				{
					//This is a rebill. Currently MemberMouse doesn't have a scheduler, hence doesn't generate regular charges.
					//Hence, we need to make two entries in the transactions table (using the $balance flag) to create a charge to apply the payment against
					$transactionDescription = "Recurring payment for order# {$order->getOrderNumber()}, item: {$orderItem->getDescription()}";
					if ($this->useSandbox)
					{
						$transactionLogResponse = MM_TransactionLog::createTestTransactionEntry($order->getId(), $orderItemId, $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$ipnId);
					}
					else 
					{
						$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId, $paymentAmount, $order->getCurrency(), $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,true,$this->getId(),$ipnId);
					}
				}
				//if this is a payment following a rebill failure, reset the status to recurring
				if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
				{
					$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
					$orderItem->commitData();
					MM_AccessControlEngine::assignAccessFromOrderItems($order->getCustomer(), array($orderItem));
				}
				
				//check if item has a limit on the number of rebills, change the status if it does
				$this->checkPaymentPlanCompletion($orderItem);
				
				return new MM_PaymentServiceResponse($transactionLogResponse->message,($transactionLogResponse->type == MM_Response::$SUCCESS)?MM_PaymentServiceResponse::$SUCCESS:MM_PaymentServiceResponse::$ERROR);
				break;
			case 'subscr_modify':
				//subscr_modify should never be generated through membermouse, however if customer's change the funding source or address associated with their account
				//this IPN type will be issued, safe to ignore.
				return new MM_PaymentServiceResponse();
				break;
			case 'subscr_failed':
				//rebill (or possibly initial payment) failed. PayPal will automatically retry, no action required yet
				if (!is_null($orderItem))
				{
					$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED);
					$orderItem->commitData();
					parent::handleOverdueSubscriptionItem($orderItem);
					return new MM_PaymentServiceResponse("PayPal Subscription Rebill Failed",MM_PaymentServiceResponse::$FAILED);
				}
				break;
			case 'subscr_cancel':
				//The subscription was cancelled, revoke access
				if (!is_null($orderItem))
				{
					$response = MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
					if (MM_Response::isError($response))
					{
						return new MM_PaymentServiceResponse("Error cancelling subscription for order id {$orderItem->getOrderId()}",MM_PaymentServiceResponse::$ERROR);
					}
					$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
					$orderItem->commitData();
				}
				return new MM_PaymentServiceResponse();
				break;
			case 'subscr_eot':
				//the subscription term has ended. 
				if (!is_null($orderItem))
				{
					if ($orderItem->isRecurring() && ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING))
					{
						//active order item, term has ended
						$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_COMPLETE);
						return new MM_PaymentServiceResponse();
					}
				}
				break;
			default:
				return new MM_PaymentServiceResponse("Unrecognized Transaction Type",MM_PaymentServiceResponse::$ERROR);
				break;
		}
		
	}
	
	/**
	 * Process refund IPNs
	 * 
	 * @param array $request The contents of the IPN. Will be the same as the contents of $_POST
	 * @return MM_PaymentServiceResponse
	 */
	protected function processRefundNotification($request)
	{
		global $wpdb;
		
		$parent_txn_id = $request['parent_txn_id'];
		$refundAmount  = $request['mc_gross'];
		
		//bridge from the IPN table to the transactions table, using the PayPal txn_id of the refunded transaction (the parent)
		$transactionsTable = MM_TABLE_TRANSACTION_LOG;
		$ipnTable = MM_TABLE_PAYPAL_IPN_LOG;
		$sql = "SELECT t.* from {$ipnTable} i, {$transactionsTable} t where (i.txn_id=%s) and (t.payment_service_id=%d) and (t.payment_service_detail_id=i.id)";
		$transactionRow = $wpdb->get_row($wpdb->prepare($sql,$parent_txn_id,$this->getId()));
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("PayPal refund IPN could not be processed: Transaction not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		//log this IPN
		$ipnResponse = $this->logIPN($request, MM_PayPalService::$IPN_STATUS_PROCESSED,$transactionRow->order_id,$transactionRow->order_item_id);
		if (!($ipnResponse instanceof MM_Response) || ($ipnResponse->type == MM_Response::$ERROR))
		{
			return new MM_PaymentServiceResponse("Error logging IPN for order item id {$transactionRow->order_item_id}", MM_PaymentServiceResponse::$ERROR);
		}
		
		//don't proceed if the transaction has already been refunded
		if (!empty($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Error refunding PayPal txn_id {$parent_txn_id}: the transaction is already refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		$ipnId = $ipnResponse->message;
		$transactionDescription = "Refund for transaction# {$transactionRow->id}";
		if ($this->useSandbox)
		{
			$response = MM_TransactionLog::createTestTransactionEntry($transactionRow->order_id,
					$transactionRow->order_item_id,
					$refundAmount,
					$transactionRow->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					$ipnId,
					MM_Utils::getCurrentTime(),
					$transactionRow->id);
		}
		else
		{
			$response = MM_TransactionLog::createTransactionEntry($transactionRow->order_id, 
												 			  $transactionRow->order_item_id, 
															  $refundAmount, 
															  $transactionRow->currency,
															  $transactionDescription, 
															  MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
															  false,
															  $this->getId(),
															  $ipnId,
												  			  MM_Utils::getCurrentTime(),
												  			  $transactionRow->id);
		}
		if (MM_Response::isSuccess($response))
		{
			$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionRow->id));
		}
		return new MM_PaymentServiceResponse();
	}
	
	/*
	 * If someone spoofs the payment process and we get a callback for an item but the price doesn't match,
	 * we want to flag this and check for this when allowing content access.
	 * 
	 * @param float $totalPaid is a value of the amount paid via paypal
	 * @param float $totalOwed is a value of the amount owed
	 * @param MM_OrderItem $orderItem 
	 * @param MM_Order $order 
	 */
	private function modifyForGatewayPriceMismatch($totalPaid,$totalOwed,MM_OrderItem $orderItem,MM_Order $order)
	{
		if(floatval($totalPaid)<floatval($totalOwed))
		{  
			if(!is_null($orderItem))
			{  
				$orderItem->setStatus(MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH);
				$orderItem->commitData();
			}
			else{
				$productItems = $order->getProducts();
		 
				if(is_array($productItems)){
					foreach($productItems as $itemId=>$itemObj){  
						$itemObj->setStatus(MM_OrderItem::$STATUS_GATEWAY_PAYMENT_MISMATCH);
						$itemObj->commitData();
					}
				}
			}
		}
	}
	
	/**
	 * Processes IPNs for web_accept, cart, and express_checkout txn_types. In MemberMouse, this currently translates to orders with
	 * non-recurring products
	 * 
	 * @param array $request An array containing the IPN data, usually the $_POST
	 * @return MM_PaymentServiceResponse indicating the success/failure processing this IPN
	 */
	public function processOrderNotification($request)
	{ 
		$request = (empty($request) && !empty($_POST) && is_array($_POST))?$_POST:$request; //if for some reason request isnt set but there is a $_POST, use the $_POST
		
		$orderNumber = (empty($request['invoice']))?null:$request['invoice'];
		$orderItemId = $this->locateOrderItemIdFromIPN($request);
		
		if (!is_null($orderItemId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			$orderItem = (!$orderItem->isValid())?null:$orderItem;
		}
		$orderId = (is_null($orderItem))?null:$orderItem->getOrderId();
		
		$duplicateCheckResponse = $this->atomicDuplicateCheckAndLog($request,"order",$orderId,$orderItemId);
		if (MM_Response::isError($duplicateCheckResponse))
		{	  
			return new MM_PaymentServiceResponse("Duplicate IPN detected",MM_Response::$ERROR);
		}
		$ipnId = $duplicateCheckResponse->message;
		
		//because the IPN types handled by this method include cart upload, this IPN could have multiple items associated with it, so bridge from
		//order item to the order to ensure access to all items
		$order = MM_Order::getDataByOrderNumber($orderNumber);
		
		if (!$order->isValid())
		{ 
			return new MM_PaymentServiceResponse("Unable to locate the order referred to by this IPN",MM_PaymentServiceResponse::$ERROR);
		}
 
		$currency  = !empty($request['mc_currency'])?$request['mc_currency']:$order->getCurrency(); //if for whatever reason currency is not sent, assume its the same as the order currency
		//TODO: REFACTOR: handle the scenario where the order currency differs from the IPN currency? Prevents somebody paying $100 USD for an order valued at $100 GBP
		
		$totalPaid = $request['mc_gross'];
		$totalOwed = $order->getTotal(); 
		
		$paymentStatus = (!empty($request['payment_status']))?$request['payment_status']:""; 
		if ($paymentStatus == MM_PayPalService::$PAYMENT_STATUS_COMPLETED)
		{
			$this->modifyForGatewayPriceMismatch($totalPaid,$totalOwed,$orderItem,$order);
			
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			if ($this->useSandbox)
			{
				$transactionLogResponse = MM_TransactionLog::createTestTransactionEntry($order->getId(),$orderItemId, $totalPaid, $currency, $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->getId(),$ipnId);
			}
			else 
			{
				$transactionLogResponse = MM_TransactionLog::createTransactionEntry($order->getId(),$orderItemId, $totalPaid, $currency, $transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,false,$this->getId(),$ipnId);
			}
			
			if ($totalPaid >= $totalOwed)
			{
				$accessResponse = MM_AccessControlEngine::assignAccessFromOrder($order);
				if (MM_Response::isError($accessResponse))
				{
					return new MM_PaymentServiceResponse("Error assigning access from order id {$order->getId()}",MM_PaymentServiceResponse::$ERROR);
				}
			}
		}
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Detects if an IPN is a first received payment or if a payment has already be recorded, in which case this IPN 
	 * can be considered a rebill. A payment is considered a rebill if a payment has already been made to the subscr_id in the IPN
	 * 
	 * @param array $request An array containing the IPN, usually the $_POST
	 * @return boolean true if this payment is a rebill, false otherwise
	 */
	protected function isSubscriptionRebill($request)
	{
		global $wpdb;
		
		$txn_type = !empty($request['txn_type'])?$request['txn_type']:"";
		$txn_id = !empty($request['txn_id'])?$request['txn_id']:"";
		$subscr_id = isset($request['subscr_id'])?$request['subscr_id']:"";	
		
		if ($txn_type != "subscr_payment")
		{
			return false;
		}
		
		$rebillCheckSQL = "SELECT COUNT(*) from ".MM_TABLE_PAYPAL_IPN_LOG." WHERE (subscr_id = %s) AND (txn_type = %s) AND (txn_id != %s)";
		$numPayments = $wpdb->get_var($wpdb->prepare($rebillCheckSQL,$subscr_id,$txn_type,$txn_id));
		if (is_null($numPayments))
		{
			return false;
		}
		
		return ($numPayments>0);
	}
	
	
	
	/**
	 * Creates an order from the IPN notification, and returns the order item id. The order must include an item_number
	 * LIMITATION: This method can only create an order with a single product of quantity one. While its possible multiple products/quantities can be 
	 * encoded using the item_number/custom fields in the future, this behavior does not exist now
	 * 
	 * @param array $request An array containing the IPN, usually the $_POST
	 * @param int $initialStatus (optional) An MM_Order constant representing the status to place the created order in
	 * 
	 * @return MM_Response containing the order item id as the message on success, or an error message on failure
	 */
	protected function createOrderFromSubscriptionIPN($request,$initialStatus=null)
	{
		
		//if order creation is not allowed, return an error
		if (!$this->allowOrderCreation)
		{
			return new MM_Response("Received subscription IPN that could not be tied to an order, and automatic order creation is disabled",MM_Response::$ERROR);
		}
		
		//test receiver_email (as per the IPN guide page 15) to make sure that the IPN is not being spoofed.
		//prevents a user from setting up a PayPal account, pointing to a MemberMouse callback url, making a transaction
		//to pay themselves, and having an account created
		if (empty($request['receiver_email']) || ($request['receiver_email'] != $this->email))
		{
			$receiver_email = !empty($request['receiver_email'])?$request['receiver_email']:"<not set>";
			return new MM_Response("createOrderFromSubscriptionIPN: Receiver email {$receiver_email} does not match, possibly a spoofed IPN",MM_Response::$ERROR);
		}
		
	
		if (empty($request['item_number']))
		{
			return new MM_Response("createOrderFromSubscriptionIPN: IPN does not include an item number",MM_Response::$ERROR);
		}
		
		$product = new MM_Product($request['item_number']);
		if (!$product->isValid())
		{
			return new MM_Response("createOrderFromSubscriptionIPN: Received invalid item number: {$request['item_number']}; no matching product",MM_Response::$ERROR);
		}
		
		if (empty($request['payer_email']))
		{
			return new MM_Response("createOrderFromSubscriptionIPN: IPN does not include a payer email",MM_Response::$ERROR);
		}
		
		//create a new order
		$order = new MM_Order(); 
		
		//create or lookup the customer
		$userEmail = $request['payer_email'];
		$user = MM_User::findByEmail($userEmail);
		
		if (!$user->isValid())
		{
			$user->commitData();
		}
		
		//link order to customer
		$order->setCustomer($user);
		
		
		//set the order billing address
		$billingAddress = new MM_CustomerAddress();
		$billingAddress->setFirstName(isset($request['first_name'])?$request['first_name']:"");
		$billingAddress->setLastName(isset($request['last_name'])?$request['last_name']:"");
		$billingAddress->setAddressLine1(isset($request['address_street'])?$request['address_street']:"");
		$billingAddress->setCity(isset($request['address_city'])?$request['address_city']:"");
		$billingAddress->setState(isset($request['address_state'])?$request['address_state']:"");
		$billingAddress->setCountry(isset($request['address_country_code'])?$request['address_country_code']:""); //iso 3166
		$billingAddress->setPostalCode(isset($request['address_zip'])?$request['address_zip']:"");
		$order->setBillingAddress($billingAddress);
		
		//add the product to the order
		$order->addProduct($product);
		
		//only one address comes through with a subscription; add billing address to shipping address
		if ($product->isShippable())
		{
			$order->setShippingAddress($billingAddress);
		}
		
		$order->calculateTotal();
		
		if (!is_null($initialStatus) && is_int($initialStatus))
		{
			$order->setOrderStatus($initialStatus);
		}
		
		//TODO: REFACTOR: how does the customer password get set?!
		
		$res = $order->commitData();
		if (MM_Response::isSuccess($res))
		{
			$productItems = $order->getProducts();
			$theOrderItem = reset($productItems); //currently this operates under the assumption that there will only be one product in a subscription
			$response = new MM_Response($theOrderItem->getId());
		}
		else
		{
			$response = new MM_Response("",MM_Response::$ERROR);
			$response->message = ($res instanceof MM_Response)?$res->message:"createOrderFromSubscriptionIPN: Error creating order from IPN";
			return $response;
		}		
	}
	
	/**
	 * looks up an order item id using a PayPal subscriber id (subscr_id)
	 * 
	 * @param string $subscr_id The subscr_id from the IPN
	 * @return int containing the order item id, null if not found
	 */
	protected function lookupOrderItemIdFromSubscription($subscr_id)
	{
		global $wpdb;
		
		if (empty($subscr_id))
		{
			return null;
		}
		
		$lookupSQL = "SELECT order_item_id from ".MM_TABLE_PAYPAL_SUBSCR_LINKS." WHERE subscr_id = %s";
		$orderItemId = $wpdb->get_var($wpdb->prepare($lookupSQL,$subscr_id));
		return $orderItemId;
	}
	
	
	/**
	 * link a paypal subscr_id to an order item id. Simplifies the lookup process when an IPN without an order number is received
	 * 
	 * @param string $subscr_id The PayPal subscr_id field from the IPN. Should be an int, but this is not guaranteed since the value comes from an external system
	 * @param int $orderItemId The order item id to associate the subscr_id to
	 * 
	 * @return MM_Response indicating success or failure in creating the db link
	 */
	protected function linkSubscriptionToOrderItemId($subscr_id, $orderItemId)
	{
		global $wpdb;
		
		if (!empty($subscr_id) && !empty($orderItemId))
		{
			$insertSQL = "INSERT IGNORE INTO ".MM_TABLE_PAYPAL_SUBSCR_LINKS." set subscr_id = %s, order_item_id=%d";	
			$res = $wpdb->query($wpdb->prepare($insertSQL,$subscr_id,$orderItemId));
			if ($res === false)
			{
				return new MM_Response("Error linking PayPal subscr_id {$subscr_id} to order item id {$orderItemId}",MM_Response::$ERROR);
			}
			return new MM_Response();
		}
		else 
		{
			return new MM_Response("Attempted to link PayPal subscr_id to an order item id, but one or both of the ids was null",MM_Response::$ERROR);
		}
	}
	
	
	/**
	 * Logs an IPN request. This is necessary for duplicate detection, and potentially for troubleshooting
	 * 
	 * @param array $request This is an array containing the IPN variables, typically identical to $_POST
	 * @param int $ipnStatus Represents how this IPN was processed. One of the constants associated with IPN processing status in MM_PayPalService
	 * @param int $orderId (optional) The order id associated with this IPN
	 * @param int $orderItemId (optional) The order item id associated with this IPN
	 * 
	 * @return MM_Response containing the id of the row in the IPN log table if successful, or an error message if failed
	 */
	protected function logIPN($request, $ipnStatus, $orderId=null, $orderItemId=null) 
	{
		global $wpdb;
		
		$subscr_id = isset($request['subscr_id'])?$request['subscr_id']:null;
		$txn_id = isset($request['txn_id'])?$request['txn_id']:null;
		$txn_type = isset($request['txn_type'])?$request['txn_type']:null;
		$payment_status = isset($request['payment_status'])?$request['payment_status']:null;
		
		//order item id can be used to get order id, if appropriate
		if (is_null($orderId) && !empty($orderId))
		{
			$orderItem = new MM_OrderItem($orderItemId);
			if ($orderItem->isValid())
			{
				$orderId = $orderItem->getOrderId();
			}
		}
		
		$insertData = array(
			"order_id"=>$orderId,
			"order_item_id" => $orderItemId,
			"txn_id" => $txn_id,
			"txn_type" => $txn_type,
			"subscr_id"=>$subscr_id,
			"payment_status"=>$payment_status,
			"ipn_content"=>serialize($request),
			"received" =>MM_Utils::getCurrentTime()
		);
		
		$res = $wpdb->insert(MM_TABLE_PAYPAL_IPN_LOG,$insertData);
		if ($res == false)
		{
			return new MM_Response("Error logging IPN to database",MM_Response::$ERROR);
		}
		return new MM_Response($wpdb->insert_id);
	}
	
	
	/**
	 * Detects whether this IPN has been received or not for this subscription
	 * 
	 * @param array $request The IPN request. This is currently the $_POST
	 * @return boolean true if this is a duplicate, false otherwise
	 */
	protected function isDuplicateSubscriptionIPN($request)
	{
		//TODO: REFACTOR: check this logic, specifically if txn_id is null
		global $wpdb;
		
		$subscr_id = isset($request['subscr_id'])?$request['subscr_id']:null;
		$txn_id = isset($request['txn_id'])?$request['txn_id']:null;
		$txn_type = isset($request['txn_type'])?$request['txn_type']:null;
		
		$dupeCheckSQL = "select count(*) from ".MM_TABLE_PAYPAL_IPN_LOG. " where ".
						"(subscr_id = %s) and (txn_id = %s) and (txn_type = %s)";
		$numRecords = $wpdb->get_var($wpdb->prepare($dupeCheckSQL,$subscr_id,$txn_id,$txn_type));
		return ($numRecords>0);
	}
	
	
	/**
	 * Detects whether this IPN has been received or not for this one-time purchase payment
	 *
	 * @param array $request The IPN request. This is usually but not always the same as $_POST
	 * @return boolean true if this is a duplicate, false otherwise
	 */
	protected function isDuplicateOrderIPN($request)
	{
		global $wpdb;
	
		$txn_id = isset($request['txn_id'])?$request['txn_id']:null;
		
		$dupeCheckSQL = "select count(*) from ".MM_TABLE_PAYPAL_IPN_LOG. " where ".
				"(txn_id = %s) and ((txn_type = 'web_accept') or (txn_type = 'cart') or (txn_type = 'express_checkout'))";
		$numRecords = $wpdb->get_var($wpdb->prepare($dupeCheckSQL,$txn_id));
		return ($numRecords>0);
	}
	
	
	/**
	 * This function creates a database managed lock, checks to see if an IPN is a duplicate, logs the new IPN, and then unlocks the db
	 * 
	 * @param string $request The IPN request, usually but not always the same as $_POST
	 * @param string $type (optional) This will be either "order" or "subscription". Defaults to "subscription"
	 * 
	 * @return MM_Response with status success if the IPN is NOT a duplicate, error otherwise. The logged IPN's id is the message in both cases
	 */
	protected function atomicDuplicateCheckAndLog($request,$type="subscription",$orderId=null, $orderItemId=null)
	{
		global $wpdb;
		
		$subscr_id = isset($request['subscr_id'])?$request['subscr_id']:"";
		$txn_id = isset($request['txn_id'])?$request['txn_id']:"";
		$txn_type = isset($request['txn_type'])?$request['txn_type']:"";
		
		//wait up to 10 secs to acquire an ipn-specific lock. 
		//MySQL 5.7+ imposes a 64 char max for lock identifiers, so use the md5 of the txn_type, txn_id, and subscr_id to create a unique identifier
		$lockName = "mm_paypal_ipn_lock-".md5("{$txn_type}|{$txn_id}|{$subscr_id}");		
		$lockAcquired = $wpdb->get_var("SELECT COALESCE(GET_LOCK('{$lockName}',10),0)");
		if ($lockAcquired != "1")
		{
			$isDuplicate = true;
		}
		else 
		{
			//dupe check
			$isDuplicate = (strtolower($type) == "order")?$this->isDuplicateOrderIPN($request):$this->isDuplicateSubscriptionIPN($request);
		}
	
		//log the ipn
		$ipnStatus = ($isDuplicate)?MM_PayPalService::$IPN_STATUS_DUPLICATE:MM_PayPalService::$IPN_STATUS_PROCESSED;
		$ipnLogResponse = $this->logIPN($request, $ipnStatus ,$orderId ,$orderItemId);
		$ipnLogId = MM_Response::isSuccess($ipnLogResponse)?$ipnLogResponse->message:false;
		
		//release the lock
		if ($lockAcquired == "1")
		{
			$wpdb->query("SELECT RELEASE_LOCK('{$lockName}')");
		}
		
		if ($isDuplicate)
		{
			//dupes cause this function to return an error response
			return new MM_Response($ipnLogId,MM_Response::$ERROR);
		}
		else 
		{
			return new MM_Response($ipnLogId);
		}
	} 
	
	/**
	 * Validates the IPN with PayPal
	 * 
	 * @param array $request The contents of the initial ipn POST
	 * @return MM_Response indicating successful validation or failure
	 */
	private function validateIPN($request)
	{	
		if ($this->skipValidation)
		{
			return new MM_Response();
		}
		
		$postData = "";
		
		foreach ($request as $key=>$value) 
		{         
			$value = urlencode(stripslashes($value)); 
			$postData  .= "&$key=$value";
		}
				
		$validationUrl = $this->getPaypalStandardUrl()."?cmd=_notify-validate";
	 	$response = $this->doHTTPRequest($validationUrl,"POST",$postData,array(CURLOPT_FORBID_REUSE=>1, CURLOPT_HTTPHEADER=>array('Connection: Close', "User-Agent: " . self::$IPN_USER_AGENT)));
		if (($response instanceof MM_Response) && ($response->message == "VERIFIED"))
		{
			return $response;
		}
		else 
		{
			//we have to change the type to error because MM_Response::ERROR is only returned from doHttpRequest if there was a communications error
			//for the purposes of this method, error also includes successful requests indicating an invalid IPN
			$response->type = MM_Response::$ERROR;
			return $response;
		}
	}
	
	
	/**
	 * Takes MemberMouse units for recurring intervals and converts to PayPal units.
	 * PayPal takes months,days,weeks, and years, and converts the unit name to 'M',"D','W', and 'Y'
	 * 
	 * @param integer $numUnits
	 * @param string $unitName
	 * 
	 * @return boolean false on invalid input, otherwise an array containing keys 'numUnits' and 'unitName' along with the corresponding values
	 */
	protected function convertMMToPaypalUnits($numUnits, $unitName)
	{
		if (!is_numeric($numUnits) || ($numUnits == 0))
		{
			return false;
		}
		
		switch ($unitName)
		{
			case "months":
				return array("numUnits"=>$numUnits, "unitName"=>"M");
				break;
			case "days":
				return array("numUnits"=>$numUnits, "unitName"=>"D");
				break;
			case "weeks":
				return array("numUnits"=>$numUnits, "unitName"=>"W");
				break;
			case "years":
				return array("numUnits"=>$numUnits, "unitName"=>"Y");
				break;
			default:
				return false;
		}
		return false; //shouldn't ever reach here
	}
	
	
	/**
	 * Determines whether the service is operating in sandbox or production mode, and returns the appropriate
	 * PayPal Standard purchase url.
	 * 
	 * @return string The url to submit purchases to
	 */
	protected function getPaypalStandardUrl()
	{
		if ($this->useSandbox)
		{
			return $this->sandboxUrl;
		}
		else 
		{
			return $this->productionUrl;
		}
	}
	
	
	/**
	 * Returns a URL that can be used as a link to initiate a PayPal purchase, ie. a one-click-buy link
	 * 
	 * @param MM_Order $order The order being used to generate the link
	 * @return boolean|string false on error, the purchase link (as a string) on success
	 */
	public function getPaypalPurchaseUrl(MM_Order $order)
	{
		if (is_null($order))
		{
			return false;
		}
		
		$configArray = $this->getPaymentConfigArray($order);
		if ($configArray === false)
		{
			return false;
		}
		
		$purchaseUrl = $this->getPaypalStandardUrl();
		$purchaseUrl .= "?".http_build_query($configArray);
		return $purchaseUrl;
	}
	
	
	/**
	 * With no parameters (or empty parameters) supplied, this method reports whether the PayPal sandbox is being used.
	 * When a parameter is supplied, the mode of operation is changed to match the parameter
	 *
	 * @param boolean $newSetting (optional) If true, use the sandbox, if false, use live PayPal servers
	 * @return boolean True if this provider is configured to use the sandbox, false if it is using production.
	 */
	public function useSandbox($newSetting="")
	{
		if ($newSetting !== "")
		{
			$this->useSandbox = (bool)$newSetting;
		}
		return $this->useSandbox;
	}
	
	
	public function getLocale()
	{
		return $this->locale;
	}
	
	
	public function setLocale($locale)
	{
		$this->locale = $locale;
	}
	
	
	public function getAPIUsername()
	{
		return $this->apiUsername;
	}
	
	
	public function setAPIUsername($apiUsername)
	{
		$this->apiUsername = $apiUsername;
	}
	
	
	public function getAPIPassword()
	{
		return $this->apiPassword;
	}
	
	
	public function setAPIPassword($apiPassword)
	{
		$this->apiPassword = $apiPassword;
	}
	
	
	public function getAPISignature()
	{
		return $this->apiSignature;
	}
	
	
	public function setAPISignature($apiSignature)
	{
		$this->apiSignature = $apiSignature;
	}
		
	
	/**
	 * Validate that a product can be charged by PayPal
	 * 
	 * @param MM_Product $product to validate
	 * @return MM_Response indicating success if its chargeable or the errors otherwise (actual errors are placed in the message field as an array)
	 */
	public function validateProductIsChargeable(MM_Product $product)
	{
		//TODO: Refactor: Finish me or remove me
	}
	
	
	public function getPDTIdentityToken()
	{
		return $this->pdtIdentityToken;
	}
	
	
	public function setPDTIdentityToken($pdtIdentityToken)
	{
		$this->pdtIdentityToken = $pdtIdentityToken;
	}

	
	/**
	 * PayPal subscriptions are managed through their interface
	 * 
	 * @see MM_PaymentService::cancelSubscription()
	 * @param MM_OrderItem $orderItem The order item linked to the subscription to cancel
	 * @return MM_PaymentServiceResponse If express checkout cancellation fails or can't be done, this will have the error type with the error message directing the user to their PayPal account
	 */
	public function cancelSubscription(MM_OrderItem $orderItem)
	{
		if (!empty($this->apiUsername) && !empty($this->apiPassword) && !empty($this->apiSignature))
		{
			return $this->expressCheckoutCancelSubscription($orderItem);
		}
		$paypalUrl = "https://www.paypal.com";
		$errorMessage = "To cancel this subscription, use the PayPal interface at {$paypalUrl}";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}
	
	
	/**
	 * Returns the appropriate NVP API endpoint based on whether the class is in sandbox mode or not
	 * 
	 * @return string The url to the NVP API endpoint that should be used based on the mode the class is in
	 */
	protected function getNVPEndpoint()
	{
		return ($this->useSandbox)?$this->sandboxNvpEndpoint:$this->productionNvpEndpoint;
	}
	
	
	/**
	 * Performs an Express Checkout NVP API operation as passed in $action.
	 *
	 * Although the PayPal Standard API provides no facility for cancelling a subscription, the PayPal
	 * Express Checkout  NVP API can be used.
	 * 
	 * @param MM_OrderItem $orderItem The order item linked to the subscription to cancel
	 * @return MM_PaymentServiceResponse The result of the cancellation attempt
	 * 
	 */
	protected function expressCheckoutCancelSubscription(MM_OrderItem $orderItem)
	{
		global $wpdb;
		
		//make sure this is a product. 
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to cancel a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		//then make sure its not already cancelled
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Error cancelling subscription: The subscription has already been cancelled",MM_PaymentServiceResponse::$ERROR);
		}
		
		$subscr_id = $wpdb->get_var($wpdb->prepare("SELECT subscr_id FROM ".MM_TABLE_PAYPAL_SUBSCR_LINKS." WHERE order_item_id=%s",$orderItem->getId()));
		if (is_null($subscr_id))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
			
			return new MM_PaymentServiceResponse("Unable to cancel subscription: Subscription not found",MM_PaymentServiceResponse::$ERROR);
		}
		
		$apiRequest['USER']      = urlencode($this->getAPIUsername());
		$apiRequest['PWD']       = urlencode($this->getAPIPassword());
		$apiRequest['SIGNATURE'] = urlencode($this->getAPISignature());
		$apiRequest['VERSION']   = "76.0";
		$apiRequest['METHOD']    = "ManageRecurringPaymentsProfileStatus";
		$apiRequest['PROFILEID'] = urlencode($subscr_id);
		$apiRequest['ACTION']    = urlencode('Cancel');
		$apiRequest['NOTE']      = urlencode('Subscription cancelled through MemberMouse');
		
		$cancelResponse = $this->parseExpressCheckoutResponse($this->doHTTPRequest($this->getNVPEndpoint(),"POST",$apiRequest));
		
		if (MM_PaymentServiceResponse::isSuccess($cancelResponse))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
		}
		else 
		{
			// there was an error that occured in cancelling the subscription in PayPal, cancel recurring
			// in MM and inform the customer that they should cancel the subscription manually via PayPal
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
			$orderItem->commitData();
			
			$paypalUrl = "https://www.paypal.com";
			$payPalErrorMsg = $cancelResponse->message;
			$errorMsg = "This subscription has been canceled in MemberMouse.\n\nHowever, an error occured when attempting to cancel the subscription in PayPal.\n\n";
			$errorMsg .= "The error message returned from PayPal was:\n{$payPalErrorMsg}\n\n";
			$errorMsg .= "To ensure this subscription is canceled in PayPal, use the PayPal interface at {$paypalUrl}";
			
			$cancelResponse->setMessage($errorMsg);
		}
		return $cancelResponse;
	}
	
	
	/**
	 * Uses the ExpressCheckout NVP to attempt to refund a transaction
	 * 
	 * @param string $transactionId The MemberMouse transaction id
	 * @return MM_PaymentServiceResponse representing the status of the refund attempt (success, failure or error)
	 */
	protected function expressCheckoutRefundTransaction($transactionId)
	{
		global $wpdb;
		
		if (empty($transactionId))
		{
			//should never happen
			return new MM_PaymentServiceResponse("Unable to refund transaction: no transaction id was supplied",MM_PaymentServiceResponse::$ERROR);
		}
	
		$sql = "SELECT i.txn_id, t.* FROM ".MM_TABLE_TRANSACTION_LOG." t LEFT JOIN ".MM_TABLE_PAYPAL_IPN_LOG." i ON (t.payment_service_detail_id = i.id) WHERE t.id=%s AND t.payment_service_id=%s LIMIT 1";
		$txnInfo = $wpdb->get_row($wpdb->prepare($sql,$transactionId,$this->getId()));
		if (is_null($txnInfo))
		{
			return new MM_PaymentServiceResponse("Unable to refund transaction: the transaction id is invalid",MM_PaymentServiceResponse::$ERROR);
		}
				
		//make sure its not already refunded
		if (!is_null($txnInfo->refund_id))
		{
			return new MM_PaymentServiceResponse("Unable to refund transaction: the transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
			
		$apiRequest['USER']          = urlencode($this->getAPIUsername());
		$apiRequest['PWD']           = urlencode($this->getAPIPassword());
		$apiRequest['SIGNATURE']     = urlencode($this->getAPISignature());
		$apiRequest['VERSION']       = "92.0";
		$apiRequest['METHOD']        = "RefundTransaction";
		$apiRequest['REFUNDTYPE']    = urlencode('Full');
		$apiRequest['CURRENCYCODE']  = $txnInfo->currency;
		$apiRequest['TRANSACTIONID'] = $txnInfo->txn_id;
	
		$refundResponse = $this->parseExpressCheckoutResponse($this->doHTTPRequest($this->getNVPEndpoint(),"POST",$apiRequest));
		if (MM_PaymentServiceResponse::isSuccess($refundResponse))
		{
			$responseData = $refundResponse->message;
			//not sure how i feel about this next part - if paypal returns the total amount refunded, it uses that... 
			//otherwise it assumes the amount matches the amount of the original transaction. Seems like a safe assumption, but..
			$transactionAmount = floatval(isset($responseData['TOTALREFUNDEDAMOUNT'])?$responseData['TOTALREFUNDEDAMOUNT']:$txnInfo->amount);
			$transactionDescription = "Refund for transaction# {$transactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
			 
			if ($this->useSandbox)
			{
				$response = MM_TransactionLog::createTestTransactionEntry($txnInfo->order_id,
						$txnInfo->order_item_id,
						$transactionAmount,
						$txnInfo->currency,
						$transactionDescription,
						MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
						false,
						$this->getId(),
						null,
						$transactionDate,
						$transactionId);
			}
			else 
			{
				$response = MM_TransactionLog::createTransactionEntry($txnInfo->order_id,
					$txnInfo->order_item_id,
					$transactionAmount,
					$txnInfo->currency,
					$transactionDescription,
					MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
					false,
					$this->getId(),
					null,
					$transactionDate,
					$transactionId);
			}
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE ".MM_TABLE_TRANSACTION_LOG." SET refund_id = %s WHERE id = %s",$response->message,$transactionId));
			}
			
		}
		
		return $refundResponse;		
	}
	
	
	/**
	 * Translates the raw response received from the NVP endpoint into an MM_PaymentServiceResponse
	 * 
	 * @param MM_Response $response A wrapper around the response from the MM_PaymentServiceResponse endpoint 
	 * @return MM_PaymentServiceResponse The translated results of the operation
	 */
	protected function parseExpressCheckoutResponse(MM_Response $response,$responseType="CANCEL")
	{
		if (MM_Response::isError($response))
		{
			return MM_PaymentServiceResponse::translate($response);
		}
		
		$responseType = strtoupper($responseType);
		parse_str($response->message,$resultData);
		
		$operationResult = isset($resultData['ACK'])?$resultData['ACK']:"Failure";
		if ($operationResult == "Failure")
		{
			$reason = (isset($resultData['L_LONGMESSAGE0']))?$resultData['L_LONGMESSAGE0']:"There was an unknown error";
			return new MM_PaymentServiceResponse($reason, MM_PaymentServiceResponse::$ERROR);
		}
		
		return new MM_PaymentServiceResponse($resultData);
	}

	
	/**
	 * PayPal subscriptions are managed through their interface
	 * 
	 * @see MM_PaymentService::updateSubscriptionInfo()
	 * @param MM_OrderItem $orderItem The order item linked to the subscription to update
	 * @param MM_CardInfo $cardInfo (optional) The new credit card information to update the subscription with
	 * @param MM_CustomerAddress $billingAddress (optional) The new billing address to update the subscription with
	 * 
	 * @return MM_PaymentServiceResponse For PayPal, this will always be an error, with the error message directing the user to their PayPal account
	 */
	public function updateSubscriptionInfo(MM_OrderItem $orderItem, MM_CardInfo $cardInfo=null, MM_CustomerAddress $billingAddress=null)
	{
		$paypalUrl = "https://www.paypal.com";
		$errorMessage = "To update payment information, use the PayPal interface at {$paypalUrl}";
		return new MM_PaymentServiceResponse($errorMessage,MM_PaymentServiceResponse::$ERROR);
	}
	
	
	/** 
	 * Intercepts PDT tokens and use them prior to rendering the confirmation page, if necessary
	 * 
	 * Criteria are:
	 * 1. PDT identity token must be set
	 * 2. CorePageEngine class must be loadable
	 * 3. The current page must be a confirmation page
	 * 4. The PayPal transaction id parameter ('tx') must be set in the url querystring
	 * 5. There must be a MemberMouse transaction key in the url querystring
	 * If all of these criteria are met, we want to check to see if the payment IPN arrived first. If not, then we retrieve the
	 * payment status using PDT and use that to update the order
	 **/
	public function doInitHook() 
	{ 
		global $wpdb;
		
		$thisPage = MM_Utils::constructPageUrl();
		if (!empty($this->pdtIdentityToken) && class_exists("MM_CorePageEngine") && MM_CorePageEngine::isConfirmationPageByUrl($thisPage) && !empty($_GET['tx']) && !empty($_GET[MM_Session::$KEY_TRANSACTION_KEY]))
		{
			$transactionKey = MM_TransactionKey::getTransactionByKey($_GET[MM_Session::$KEY_TRANSACTION_KEY]);
			$order = new MM_Order($transactionKey->getOrderId());
			if ($order->isValid() && (($order->getOrderStatus() == MM_Order::$PENDING) || ($order->getOrderStatus() == MM_Order::$AWAITING_PAYMENT)))
			{
				//a valid order that hasn't received a payment means that the IPN hasn't been received yet, send for pdt information
				$postData['cmd'] = '_notify-synch';
				$postData['tx'] = $_GET['tx'];
				$postData['at'] = $this->getPDTIdentityToken();
				$pdtResponse = $this->doHTTPRequest($this->getPaypalStandardUrl(),"POST",$postData);
				if (MM_Response::isSuccess($pdtResponse))
				{
					$lines = explode("\n", $pdtResponse->message);
					$pdtResponseData = array();
					if (strcmp ($lines[0], "SUCCESS") == 0)  //we only care to continue if the payment was successful
					{
						for ($i=1; $i<count($lines);$i++)
						{
							@list($key,$val) = explode("=", $lines[$i]);
							$pdtResponseData[urldecode($key)] = urldecode($val);
						}
					
					
						//send pdt request through ipn pathway emulating an IPN if payment was successful			
						if (isset($pdtResponseData['subscr_id']))
						{
							$pdtResponseData['txn_type'] = 'subscr_payment';
							$this->processSubscriptionNotification($pdtResponseData);
						}
						else 
						{
							$pdtResponseData['txn_type'] = 'web_accept';
							$this->processOrderNotification($pdtResponseData);
						}
					}
				}
			}
		}
	}
	
	
	public function inTestMode()
	{
		return $this->useSandbox;
	}
	
	
	/**
	 * Changes the configuration of this payment service to use the test mode settings, if available.
	 * If the configuration was able to be successfully changed to be a test mode configuration, true is returned, otherwise false
	 *
	 *  @return bool
	 */
	public function switchToTestMode()
	{
		$this->useSandbox = true;
		return true;
	}
}
