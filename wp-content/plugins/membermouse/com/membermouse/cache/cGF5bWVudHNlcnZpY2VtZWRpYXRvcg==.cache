/**
 *
 *MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 */

/**
 * MM_PaymentServiceMediator is a class that serves as a mediator between MemberMouse and the active payment services
 * It notifies the payment services that they need to perform non-payment specific tasks such as updating product information.
 * The mediator may update multiple payment services as a result of one call, depending on configuration
 */

class MM_PaymentServiceMediator {
	
	private $async      = false; //coming soon
	private $activeOnly = true;  //determines whether inactive services receive notifications also
	
	
	/**
	 * Notifies payment services a new product was added
	 * 
	 * @param MM_Product $product The newly added product
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyProductAdded(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_ADDED, $product);
	}
	

	/**
	 * Notifies payment services a product was updated
	 *
	 * @param MM_Product $product The updated product
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyProductUpdated(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_UPDATED,$product);
	}
	

	/**
	 * Notifies payment services a product was removed
	 *
	 * @param MM_Product $product The removed product
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyProductRemoved(MM_Product $product)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::PRODUCT_REMOVED,$product);
	}
	
	
	/**
	 * Notifies payment services a new coupon was added
	 *
	 * @param MM_Coupn $coupon The newly added coupon
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyCouponAdded(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_ADDED, $coupon);
	}
	
	
	/**
	 * Notifies payment services a coupon was updated
	 *
	 * @param MM_Coupn $coupon The updated coupon
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyCouponUpdated(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_UPDATED, $coupon);
	}
	
	
	/**
	 * Notifies payment services a coupon was removed
	 *
	 * @param MM_Coupn $coupon The removed coupon
	 * @return boolean true if all the notified services handled the notification without error, false otherwise
	 */
	public function notifyCouponRemoved(MM_Coupon $coupon)
	{
		return $this->notifyServicesOfEvent(MM_MemberMouseEventListener::COUPON_REMOVED, $coupon);
	}

	
	/**
	 * Notifies services that an event was received, and passes through the event type and associated data
	 * 
	 * @param integer $eventType One of the constants defined in MM_MemberMouseEventListener
	 * @param varies $eventData The data attached to the event
	 * @return boolean boolean true if all the notified services handled the notification without error, false otherwise. This is passed through to the caller
	 */
	protected function notifyServicesOfEvent($eventType, $eventData)
	{
		$potentialServices = ($this->activeOnly)?MM_PaymentServiceFactory::getAvailablePaymentServices():MM_PaymentServiceFactory::getPaymentServicesArray();
		$overallStatus = new MM_Response();
		//TODO: REFACTOR: implement asynch functionality
		foreach ($potentialServices as $potentialService)
		{
			if ($potentialService instanceof MM_MemberMouseEventListener)
			{
				//only send events to services that implement the listener interface
				$overallStatus = ($overallStatus->type == MM_Response::$SUCCESS)?($potentialService->eventReceived($eventType, $eventData)):$overallStatus;
			}
		}
		return $overallStatus;
	}
}
