class MM_IDevAffiliateProvider extends MM_AbstractAffiliateProvider 
{
	private static $MM_CART_PROFILE_ID = 96;
	
	private static $PAYOUT_TYPE_PERCENT = 1;
	private static $PAYOUT_TYPE_FLATRATE = 2;
	
	private $apiUrl;
	private $apiSecretKey;
	private $ipTrackingEnabled;
	private $sendAffiliateWelcomeEmail;
	private $affiliateWelcomeEmailSubject;
	private $affiliateWelcomeEmailBody;
	
	/**
	 * To make a connection to iDevAffiliate a URL and API secret key are required
	 * @param Object $provider_info Options object
	 */
	public function __construct($provider_info) 
	{
		parent::__construct($provider_info);
		
		$additional_data = (is_object($provider_info) && isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
		if (isset($additional_data['apiUrl'])) 
		{
			$this->apiUrl = $additional_data['apiUrl'];
		}
		
		if (isset($additional_data['apiSecretKey']))
		{
			$this->apiSecretKey = $additional_data['apiSecretKey'];
		}
		
		if (isset($additional_data['ipTrackingEnabled']))
		{
			$this->ipTrackingEnabled = $additional_data['ipTrackingEnabled'];
		}
		
		if (isset($additional_data['sendAffiliateWelcomeEmail']))
		{
			$this->sendAffiliateWelcomeEmail = $additional_data['sendAffiliateWelcomeEmail'];
		}
		
		if (isset($additional_data['affiliateWelcomeEmailSubject']))
		{
			$this->affiliateWelcomeEmailSubject = $additional_data['affiliateWelcomeEmailSubject'];
		}
		
		if (isset($additional_data['affiliateWelcomeEmailBody']))
		{
			$this->affiliateWelcomeEmailBody = $additional_data['affiliateWelcomeEmailBody'];
		}
	}
	
	public function getAffiliateTrackingId()
	{
		return "idev_id";
	}
	
	public function trackCommission(MM_CommissionProfile $commissionProfile, $affiliateId, $orderNumber, $orderTotal, $orderData, $isRebill)
	{
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$params["idev_ordernum"] = $orderNumber;
		$params["idev_saleamt"] = $orderTotal;
		$params["ip_address"] = $orderData["order_ip_address"];
		$params["profile"] = self::$MM_CART_PROFILE_ID;
		
		if(!empty($affiliateId))
		{
			$params["affiliate_id"] = $affiliateId;
		}
		
		// check for a coupon code
		if(isset($orderData["order_coupons"]))
		{
			$coupons = json_decode(stripslashes($orderData["order_coupons"]));
		
			foreach($coupons as $coupon)
			{
				$params["coupon_code"] = $coupon->code;
				
				// only supports one coupon right now
				break;
			}
		}
		
		// append product IDs
		if(isset($orderData["order_products"]))
		{
			$products = json_decode(stripslashes($orderData["order_products"]));
		
			foreach($products as $product)
			{
				$params["products_purchased"] = $product->id;
		
				// only supports one product right now, when multiple products supported separate them by a |
				break;
			}
		}
		
		// see if there are custom rebill commissions
		if($isRebill && $commissionProfile->getRebillCommissionType() != MM_CommissionProfile::$COMMISSION_TYPE_DEFAULT)
		{
			switch($commissionProfile->getRebillCommissionType())
			{
				case MM_CommissionProfile::$COMMISSION_TYPE_PERCENT:
					$params["idev_percent"] = intval($commissionProfile->getRebillCommissionValue()) / 100;
					break;
					
				case MM_CommissionProfile::$COMMISSION_TYPE_FLATRATE:
					$params["idev_commission"] = $commissionProfile->getRebillCommissionValue();
					break;
			}
		}
			
		return $this->doHTTPRequest($this->getAPIUrl()."/sale.php", "POST", $params);
	}
	
	public function reverseCommission($affiliateId, $orderNumber) 
	{ 
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$params["order_number"] = $orderNumber;
		
		return $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/terminate_commission.php", "POST", $params);
	}
	
	public function createAffiliateAccount($userData) 
	{ 
		$profileResponse = $this->getProfileIdForMembershipLevel($userData["membership_level"]);
		
		if(MM_Response::isSuccess($profileResponse) && !empty($profileResponse->message))
		{
			// profile info is in the format {payoutLevelID}_{typeID}_{levelNumber}
			$profileParams = explode("_", $profileResponse->message);
			
			if(is_array($profileParams) && count($profileParams) == 3)
			{
				$type = $profileParams[1];
				$level = $profileParams[2];
				
				$user = new MM_User($userData["member_id"]);
				
				if($user->isValid())
				{	
					$params = array();
					$params["secret"] = $this->getAPISecretKey();
					$params["username"] = $user->getUsername();
					$params["password"] = MM_Utils::createRandomString();
					$params["email"] = $user->getEmail();
					$params["payout_type"] = $type;
					$params["payout_level"] = $level;
					$params["first_name"] = $user->getFirstName();
					$params["last_name"] = $user->getLastName();
					$params["phone"] = $user->getPhone();
					$params["address_1"] = $user->getBillingAddress();
					$params["city"] = $user->getBillingCity();
					$params["state"] = $user->getBillingState();
					$params["zip"] =  $user->getBillingZipCode();
					$params["country"] = $user->getBillingCountry();
					$params["ip_address"] = MM_Utils::getClientIPAddress();
					
					// add upline affiliate if present
					$affiliateId = MM_Cookies::getAffiliateValue();
					
					if(!empty($affiliateId))
					{
						$params["tier"] = $affiliateId;
					}
					
					$result = $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/mm_new_affiliate.php", "POST", $params);
					
					if(MM_Response::isSuccess($result))
					{
						$affiliate = new MM_AffiliateVO();
						$affiliate->setData($params);
						$affiliate->setUrl($this->getAPIUrl());
						$result->addData("affiliateData", $affiliate);
					}
					
					return $result;
				}
			}
		}
		
		return new MM_Response("Error creating affiliate account", MM_Response::$ERROR);
	}
	
	/**
	 * 
	 * Return the payout profiles associated with the affiliate provider, keyed by id with the values being profile names
	 * @return MM_Response containing profiles as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getPayoutProfiles() 
	{
		$profiles = array();
		$params = array();
		$params["secret"] = $this->getAPISecretKey();
		$response = $this->doHTTPRequest($this->getAPIUrl()."/API/scripts/get_payout_levels.php", "POST", $params);
		
		if(MM_Response::isSuccess($response))
		{
			$profileList = json_decode($response->message);
			
			if($profileList)
			{
				foreach($profileList as $profile)
				{
					$payoutLevelTitle = "";
					$payoutAmount = "";
					
					switch(intval($profile->type))
					{
						case self::$PAYOUT_TYPE_PERCENT:
							$payoutLevelTitle .= "Percentage ";
							$payoutAmount = floatval($profile->amt) * 100;
							$payoutAmount .= "%";
							break;
							
						case self::$PAYOUT_TYPE_FLATRATE:
							$payoutLevelTitle .= "Flat Rate ";
							$payoutAmount = _mmf($profile->amt,$profile->currency);
							break;
					}
					
					$payoutLevelTitle .= "Payout Level {$profile->level} ({$payoutAmount})";
					
					$profiles[$profile->id."_".$profile->type."_".$profile->level] = $payoutLevelTitle;
				}
			}
			else 
			{
				$msg = "Unable to connect to iDevAffiliate";
				
				if(isset($response->message))
				{
					$msg .= "\n\n{$response->message}";
				}
				
				return new MM_Response($msg, MM_Response::$ERROR);
			}
		}
		
		return new MM_Response($profiles, MM_Response::$SUCCESS);
	}
	
	/**
	 * Report the features that iDevAffiliate supports
	 *
	 * @param integer $featureConst a const as defined in MM_AffiliateProviderFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		$supported[] = MM_AffiliateProviderFeatures::DEFAULT_AFFILIATE_ID;
		$supported[] = MM_AffiliateProviderFeatures::CUSTOM_REBILL_COMMISSIONS;
		$supported[] = MM_AffiliateProviderFeatures::AFFILIATE_ACCOUNT_CREATION;
		$supported[] = MM_AffiliateProviderFeatures::COMMISSION_TRACKING;
		$supported[] = MM_AffiliateProviderFeatures::COMMISSION_TRACKING_BY_COUPON;
		$supported[] = MM_AffiliateProviderFeatures::COMMISSION_TRACKING_BY_IP_ADDRESS;
		return in_array($featureConst,$supported,true);
	}
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post) 
	{
		$provider_entity = new MM_AffiliateProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$api_url = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiUrl"):"";
		$api_secret_key = ($provider_entity->isValid())?$provider_entity->getConfigOption("apiSecretKey"):"";
		
		$form = new MM_AffiliateProviderDialog();
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">	
			<table>
			<tr>
				<td style='width:100px;'>iDevAffiliate URL</td>
				<td>
					<span style="font-family:courier; font-size:11px;">
					<input type="text" name="idevaffiliate_url" id="idevaffiliate_url" size="50" value="{$api_url}"/>
					</span>
				</td>
			</tr>
			<tr>	
				<td>API Secret Key</td>
				<td>
					<span style="font-family:courier; font-size:11px;">
					<input type="text" name="idevaffiliate_secret_key" id="idevaffiliate_secret_key" size="25" value="{$api_secret_key}"/>
					</span>
				</td>
			</tr>
			</table>		
		</div>
OPTIONS;
		return $form;
	}
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractAffiliateProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && ((isset($optionData['idevaffiliate_url'])) && !empty($optionData['idevaffiliate_url'])) 
			&& ((isset($optionData['idevaffiliate_secret_key'])) && !empty($optionData['idevaffiliate_secret_key']))) 
		{
			$provider_token = $optionData['provider_token'];
			$api_url = $optionData['idevaffiliate_url'];
			$api_secret_key = $optionData['idevaffiliate_secret_key'];
			$ip_tracking_enabled = isset($optionData['idevaffiliate_ip_tracking_enabled']) ? $optionData['idevaffiliate_ip_tracking_enabled'] : "";
			$send_affiliate_welcome_email = isset($optionData['idevaffiliate_send_affiliate_welcome_email']) ? $optionData['idevaffiliate_send_affiliate_welcome_email'] : "";
			$affiliate_welcome_email_subject = isset($optionData['idevaffiliate-send-affiliate-welcome-email-subject']) ? $optionData['idevaffiliate-send-affiliate-welcome-email-subject'] : "";
			$affiliate_welcome_email_body = isset($optionData['idevaffiliate-send-affiliate-welcome-email-body']) ? $optionData['idevaffiliate-send-affiliate-welcome-email-body'] : "";
			
			$this->setAPIUrl($api_url);
			$this->setAPISecretKey($api_secret_key);
			$this->setIPTrackingEnabled($ip_tracking_enabled);
			$this->setSendAffiliateWelcomeEmail($send_affiliate_welcome_email);
			$this->setAffiliateWelcomeEmailSubject($affiliate_welcome_email_subject);
			$this->setAffiliateWelcomeEmailBody($affiliate_welcome_email_body);
			
			$provider_entity = new MM_AffiliateProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid()) 
			{
				//first write the provider's configuration options
				$provider_entity->setConfigOption("apiUrl", $this->getAPIUrl());
				$provider_entity->setConfigOption("apiSecretKey", $this->getAPISecretKey());
				$provider_entity->setConfigOption("ipTrackingEnabled", $this->getIPTrackingEnabled());
				$provider_entity->setConfigOption("sendAffiliateWelcomeEmail", $this->getSendAffiliateWelcomeEmail());
				$provider_entity->setConfigOption("affiliateWelcomeEmailSubject", $this->getAffiliateWelcomeEmailSubject());
				$provider_entity->setConfigOption("affiliateWelcomeEmailBody", $this->getAffiliateWelcomeEmailBody());
				$provider_entity->setActive(true);
				$commit_response = $provider_entity->commitData();
				
				if ($commit_response->type == MM_Response::$ERROR) 
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the profile mappings
				if (isset($optionData['membership_level_mappings']) && is_array($optionData['membership_level_mappings'])) 
				{
					$provider_id = $provider_entity->getId(); 
					return $this->persistProfileMappings($provider_id, $optionData['membership_level_mappings']);
				}
			}
			else 
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else 
		{
			//optionData is not an array, or the api URL was not sent
			return new MM_Response("Failed to save settings: API URL and secret key are required",MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	/**
	 * Configures the iDevAffiliate provider in order to do the initial connect
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param $optionData Array The values posted from the form rendered by renderOptionsDialog
	 */
	public function configureFromOptions($optionData) 
	{
		if (isset($optionData['idevaffiliate_url'])) 
		{
			$this->setAPIUrl($optionData['idevaffiliate_url']);
		}
		if (isset($optionData['idevaffiliate_secret_key']))
		{
			$this->setAPISecretKey($optionData['idevaffiliate_secret_key']);
		}
		if (isset($optionData['idevaffiliate_ip_tracking_enabled']))
		{
			$this->setIPTrackingEnabled($optionData['idevaffiliate_ip_tracking_enabled']);
		}
		if (isset($optionData['idevaffiliate_send_affiliate_welcome_email']))
		{
			$this->setSendAffiliateWelcomeEmail($optionData['idevaffiliate_send_affiliate_welcome_email']);
		}
		if (isset($optionData['idevaffiliate-send-affiliate-welcome-email-subject']))
		{
			$this->setAffiliateWelcomeEmailSubject($optionData['idevaffiliate-send-affiliate-welcome-email-subject']);
		}
		if (isset($optionData['idevaffiliate-send-affiliate-welcome-email-body']))
		{
			$this->setAffiliateWelcomeEmailBody($optionData['idevaffiliate-send-affiliate-welcome-email-body']);
		}
		return new MM_Response();
	}
	
	public function renderAdditionalOptions()
	{
		$provider_entity = new MM_AffiliateProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$ip_tracking_enabled = ($provider_entity->isValid())?$provider_entity->getConfigOption("ipTrackingEnabled"):"";
		
		$output = "<p style=\"margin-top:20px;\"><a href=\"http://support.membermouse.com/support/solutions/articles/9000020279-idevaffiliate-configuring\" target=\"_blank\">Need help configuring iDevAffiliate?</a></p>";
		$output .= "<p class=\"mm-section-header\" style=\"margin-top:20px;\">Enable Passing Affiliate ID to Your Landing Page</p>";
		$output .= "<p><a href=\"{$this->getAPIUrl()}/admin/setup.php?action=77#tab_1_2\" target=\"_blank\" class=\"mm-ui-button green\">Configure in iDevAffiliate</a></p>";
		
		$output .= "<p class=\"mm-section-header\" style=\"margin-top:20px;\">Configure Per-Product Commissions</p>";
		$output .= "<p><a href=\"{$this->getAPIUrl()}/admin/setup.php?action=65\" target=\"_blank\" class=\"mm-ui-button green\">Configure in iDevAffiliate</a></p>";
		
		$output .= "<p class=\"mm-section-header\" style=\"margin-top:20px;\">IP Address Tracking</p>";

		$output .= "<p style='width:700px;'>iDevAffiliate supports IP tracking. Sometimes a customer who is a legitimate referral can arrive at the checkout page
				without the referring affiliate's ID being provided. IP tracking is a backup method used to attempt to match a sale 
				with the referring affiliate using the customer's IP address.</p>
				
				<p style='width:700px;'>iDevAffiliate is an external system so a time overhead is involved in making a request to it (the time it takes for the iDevAffiliate
				server to receive and respond to the request). In order to be as efficient as possible, MemberMouse's default behavior is to only make requests to 
				iDevAffiliate when an affiliate commission is explicitly indicated (i.e. if the affiliate ID is present or a coupon code is applied to the order).
				</p>
				
				<p style='width:700px;'>Enabling IP tracking in MemberMouse bypasses these efficiency rules and a commission request will be sent to iDevAffiliate 
			 	on every sale. For this reason, we do not recommend using this feature unless you have reason to believe that a sizeable amount of your customers 
				arrive on your site without an affiliate being explicitly indicated.</p>
				
				<p style='width:700px;'>If you're using affiliate URLs such as <code>http://yourdomain.com/?affid=123</code>, an explicit affiliate 
				ID will be present close to 100% of time so enabling IP address tracking shouldn't be necessary.</p>";
		$output .= "<p><input type='checkbox' name='idevaffiliate_ip_tracking_enabled' id='idevaffiliate_ip_tracking_enabled' ";
		
		if($ip_tracking_enabled == "1")
		{
			$output .= "checked";
		}
		
		$output .= " /> Enable IP Address Tracking</p>";
		
		return $output;
	}
	
	/**
	 * 
	 * Returns the API URL
	 * @return String the API URL
	 */
	protected function getAPIUrl() 
	{
		if(substr($this->apiUrl, -1) == "/")
		{
			return substr($this->apiUrl, 0, strlen($this->apiUrl)-1);
		}
		else
		{
			return $this->apiUrl;
		}
	}
	
	/**
	 * 
	 * Sets the API URL
	 * @param String $apiUrl The new API URL
	 */
	protected function setAPIUrl($apiUrl) 
	{
		if(substr($apiUrl, -1) == "/")
		{
			$this->apiUrl = substr($apiUrl, 0, strlen($apiUrl)-1);
		}
		else
		{
			$this->apiUrl = $apiUrl;
		}
	}
	
	/**
	 * 
	 * Returns the API secret key
	 * @return String the API secret key
	 */
	protected function getAPISecretKey() 
	{
		return $this->apiSecretKey;
	}
	
	/**
	 * 
	 * Sets the API secret key
	 * @param String $apiSecretKey The new API secret key
	 */
	protected function setAPISecretKey($apiSecretKey) 
	{
		$this->apiSecretKey = $apiSecretKey;
	}
	
	/**
	 * 
	 * Returns the IP tracking enabled parameter
	 * @return String the IP tracking enabled value
	 */
	public function getIPTrackingEnabled() 
	{
		return $this->ipTrackingEnabled;
	}
	
	/**
	 * 
	 * Sets the IP tracking enabled parameter
	 * @param String $ipTrackingEnabled The new IP tracking enabled value
	 */
	protected function setIPTrackingEnabled($ipTrackingEnabled) 
	{
		if($ipTrackingEnabled == "on")
		{
			$ipTrackingEnabled = "1";
		}
		
		$this->ipTrackingEnabled = $ipTrackingEnabled;
	}
	
	/**
	 * 
	 * Returns the send affiliate welcome email parameter
	 * @return String the send affiliate welcome email enabled value
	 */
	public function getSendAffiliateWelcomeEmail() 
	{
		return $this->sendAffiliateWelcomeEmail;
	}
	
	/**
	 * 
	 * Sets the send affiliate welcome email parameter
	 * @param String $sendAffiliateWelcomeEmail The new send affiliate welcome email value
	 */
	protected function setSendAffiliateWelcomeEmail($sendAffiliateWelcomeEmail) 
	{
		if($sendAffiliateWelcomeEmail == "on")
		{
			$sendAffiliateWelcomeEmail = "1";
		}
		
		$this->sendAffiliateWelcomeEmail = $sendAffiliateWelcomeEmail;
	}
	
	public function getAffiliateWelcomeEmailSubject() 
	{
		return $this->affiliateWelcomeEmailSubject;
	}
	
	protected function setAffiliateWelcomeEmailSubject($subject) 
	{
		$this->affiliateWelcomeEmailSubject = $subject;
	}
	
	public function getAffiliateWelcomeEmailBody() 
	{
		return $this->affiliateWelcomeEmailBody;
	}
	
	protected function setAffiliateWelcomeEmailBody($body) 
	{
		$this->affiliateWelcomeEmailBody = $body;
	}
	
}
