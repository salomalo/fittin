/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_StripeService is an implementation of the MM_PaymentService interface using Stripe (www.stripe.com)
 */

class MM_TwoCheckoutService extends MM_PaymentService implements MM_MemberMouseEventListener
{
	protected static $DEFAULT_REFUND_CATEGORY = 5; // 'other' from 2Checkout
	protected static $DEFAULT_REFUND_COMMENT  = 'MemberMouse Refund.';
	
	protected $token = "TWOCHECKOUT"; 
	
	protected $username = array(
		"test" => array(
			"seller" => "",
			"api" => "",
		), 
		"live" => array(
			"seller" => "",
			"api" => "",
		), 
	);
	
	protected $password = array(
		"test" => array(
			"seller" => "",
			"api" => "",
		), 
		"live" => array(
			"seller" => "",
			"api" => "",
		), 
	);
	
	protected $publicKey = array(
		'test' => '', 
		'live' => ''
	);
	
	protected $privateKey = array(
		'test' => '', 
		'live' => ''
	);
	
	protected $sellerId = array(
		'test' => '', 
		'live' => ''
	);
	
	protected $secretWord = array(
		'test' => '', 
		'live' => ''
	);
	
	protected $testMode = false;	
	
	protected $supportedCurrencies = array("ARS","AUD","BRL","GBP","CAD","DKK",
	                                       "EUR","HKD","INR","ILS","JPY","LTL",
	                                       "MYR","MXN","NZD","NOK","PHP","RON",
	                                       "RUB","SGD","ZAR","SEK","CHF","TRY",
	                                       "AED","USD");
	
	protected $errorCodes = array(
		/**
		 * https://www.2checkout.com/documentation/payment-api/create-sale
		 */
		"200" => array(
			"message" => "Unable to process the request",
			"cause"   => "Incorrect attributes or malformed JSON object.",
			"type"    => "failed",
		),
		"300" => array(
			"message" => "Unauthorized",
			"cause"   => "Seller unauthorized to use the API or incorrect private key. Invalid Token",
			"type"    => "error",
		),
		"400" => array(
			"message" => "Bad request - parameter error",
			"cause"   => "Missing required attributes or invalid token.",
			"type"    => "error",
		),
		"600" => array(
			"message" => "Authorization Failed",
			"cause"   => "Credit Card failed to authorize.",
			"type"    => "error",
		),
		"601" => array(
			"message" => "Payment Authorization Failed:  Please update your cards expiration date and try again, or try another payment method.",
			"cause"   => "Invalid Expiration Date.",
			"type"    => "error",
		),
		"602" => array(
			"message" => "Payment Authorization Failed:  Please verify your Credit Card details are entered correctly and try again, or try another payment method.",
			"cause"   => "Credit Card failed to authorize.",
			"type"    => "error",
		),
		"603" => array(
			"message" => "Your credit card has been declined because of the currency you are attempting to pay in.  Please change the currency of the transaction or use a different card and try again.",
			"cause"   => "Invalid Currency for card type.",
			"type"    => "error",
		),
		"604" => array(
			"message" => "Payment Authorization Failed: Credit is not enabled on this type of card, please contact your bank for more information or try another payment method.",
			"cause"   => "Credit Card failed to authorize.",
			"type"    => "error",
		),
		"605" => array(
			"message" => "Payment Authorization Failed: Invalid transaction type for this credit card, please use a different card and try submitting the payment again, or contact your bank for more information.",
			"cause"   => "Invalid transaction type for credit card.",
			"type"    => "error",
		),
		"606" => array(
			"message" => "Payment Authorization Failed: Please use a different credit card or payment method and try again, or contact your bank for more information.",
			"cause"   => "Credit Card failed to authorize.",
			"type"    => "error",
		),
		"607" => array(
			"message" => "Payment Authorization Failed: Please verify your information and try again, or try another payment method.",
			"cause"   => "Credit Card failed to authorize.",
			"type"    => "error",
		),
		/**
		 * https://www.2checkout.com/documentation/api/sales/refund-invoice
		 */
		"PARAMETER_MISSING" => array(
			"message" => "Required parameter missing",
			"cause"   => "Required parameter missing",
			"type"    => "failed",
		),
		"PARAMETER_INVALID" => array(
			"message" => "Invalid value for parameter",
			"cause"   => "Invalid value for parameter",
			"type"    => "failed",
		),
		"RECORD_NOT_FOUND" => array(
			"message" => "Unable to find record",
			"cause"   => "Unable to find record",
			"type"    => "error",
		),
		"FORBIDDEN" => array(
			"message" => "Access denied to sale.",
			"cause"   => "Access denied to sale.",
			"type"    => "error",
		),
		"AMBIGUOUS" => array(
			"message" => "Ambiguous request. Multiple invoices on sale. invoice_id parameter required.",
			"cause"   => "Ambiguous request. Multiple invoices on sale. invoice_id parameter required.",
			"type"    => "error",
		),
		"TOO_LOW" => array(
			"message" => "Amount must be at least 0.01",
			"cause"   => "Amount must be at least 0.01",
			"type"    => "error",
		),
		"NOTHING_TO_DO" => array(
			"message" => "Invoice was already refunded",
			"cause"   => "Invoice was already refunded",
			"type"    => "error",
		),
		"TOO_HIGH" => array(
			"message" => "Amount greater than remaining balance on invoice",
			"cause"   => "Amount greater than remaining balance on invoice",
			"type"    => "error",
		),
		"TOO_LATE" => array(
			"message" => "Invoice too old to refund",
			"cause"   => "Invoice too old to refund",
			"type"    => "error",
		),
	);

	
	
	public function __construct($autoload=true)
	{
		parent::__construct($autoload);
	}
	
	
	public function loadDependencies()
	{
		require_once(MM_LIB_DIR."/2checkout/Twocheckout.php");
	}	
	
	
	public function install() 
	{ 
		parent::install();
		
		$sql = "CREATE TABLE ".MM_TABLE_TWOCHECKOUT_CHARGES." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"order_id bigint(20) NOT NULL,\n".
				"order_item_id bigint(20) NULL,\n".
				"charge_id varchar(255) COLLATE utf8_bin,\n".
				"customer_id bigint(20) NOT NULL,\n".
				"amount decimal(10,2) NOT NULL,\n".
				"currency char(3) NOT NULL DEFAULT 'usd',\n".
				"transaction_date datetime NOT NULL,\n".
				"PRIMARY KEY  (id),\n".
				"KEY mm_stripe_charge_charge_id_idx (charge_id)\n".
				");\n";

		$sql .= "CREATE TABLE ".MM_TABLE_TWOCHECKOUT_WEBHOOKS." (\n".
				"id bigint(20) NOT NULL AUTO_INCREMENT,\n".
				"webhook_id varchar(255),\n".
				"webhook_data longtext,\n".
				"date_received datetime NOT NULL,\n".
				"PRIMARY KEY  (id)\n".
				");\n";
		
		dbDelta($sql);
	}
	
	
	/**
	 * Report the features the Stripe service supports
	 * @see MM_PaymentService::supportsFeature()
	 *
	 * @param integer $featureConst a const as defined in MM_PaymentServiceFeatures
	 * @return boolean true if supported, false if not supported
	 */
	public function supportsFeature($featureConst)
	{
		//$supported[] = MM_PaymentServiceFeatures::CARD_ON_FILE;
		$supported[] = MM_PaymentServiceFeatures::ONSITE_SERVICE;
		$supported[] = MM_PaymentServiceFeatures::COUPONS;
		$supported[] = MM_PaymentServiceFeatures::TOKEN_EXCHANGE;
		return in_array($featureConst,$supported,true);
	}
	
	
	/**
	 * Returns the html that will be used on the payment method settings screen for configuring Stripe
	 * @see MM_PaymentService::displayConfigOptions()
	 * 
	 * @return String containing the configuration dialog html
	 */
	public function displayConfigOptions()
	{
		$config_options = MM_TEMPLATE::generate("{$this->getTemplateDir()}/twocheckout_config.html.php",$this);
		return $config_options;
	}
	
	
	/**
	 * Validates and configures the object with the settings information generated by submission of the configuration dialog
	 * @see MM_PaymentService::processConfigOptions()
	 *
	 * @param $post An array containing the data posted from the payment methods settings screen
	 * @return An MM_Response of type MM_Response::SUCCESS indicating successful validation and assigment. On error, the type will be MM_Response::ERROR and the message will contain the error messages
	 */
	public function processConfigOptions($post) 
	{ 	
		$active = (isset($post['onsite_payment_service']) && (strtolower($this->getToken()) == $post['onsite_payment_service']));
		$this->setActive($active);
		
		if ($active)
		{
			$this->install();
			$config = isset($post['payment_service']['twocheckout']) ? $post['payment_service']['twocheckout'] : array();
			$empty_errors = "";
			$config['test_mode'] = isset($config['test_mode']) ? (bool)$config['test_mode'] : false;
			
			foreach ($config as $k => $v)
			{
  				if ($k == 'test_mode')
  				{
    				continue;
  				}
  			
  				if (!$v)
  				{
    				$empty_errors .= "2Checkout: Please enter a value for the " . ucfirst(str_replace("_", " ", $k) . "\n");
  				}
			}
			
			/**
  		 	* Authenticate User input
  		 	*/
	      try
	      {
	      	/**
	         * Authenticates access to Admin API. Username & Password are only needed
	         */
				Twocheckout::username($config[$config['test_mode'] ? 'test' : 'live']['api']['username']);
				Twocheckout::password($config[$config['test_mode'] ? 'test' : 'live']['api']['password']);
				Twocheckout::sandbox($config['test_mode'] == 1);
				$company = Twocheckout_Company::retrieve();
	      }
	      catch (Twocheckout_Error $e)
	      {
	      	$empty_errors .= "2Checkout API Authentication: " . $e->getMessage();
	      }
			
			if ($empty_errors != "")
			{	
				return new MM_Response($empty_errors,MM_Response::$ERROR);
			}
			
			//if here, that means they are all ok
			$this->setTestMode($config['test_mode']);
			//$this->setUsername($config['test']['seller']['username'], 'test', 'seller');
			$this->setUsername($config['test']['api']['username'], 'test', 'api');
			//$this->setUsername($config['live']['seller']['username'], 'live', 'seller');
			$this->setUsername($config['live']['api']['username'], 'live', 'api');
			//$this->setPassword($config['test']['seller']['password'], 'test', 'seller');
			$this->setPassword($config['test']['api']['password'], 'test', 'api');
			//$this->setPassword($config['live']['seller']['password'], 'live', 'seller');
			$this->setPassword($config['live']['api']['password'], 'live', 'api');
			$this->setPublicKey($config['test']['public_key'], 'test');
			$this->setPublicKey($config['live']['public_key'], 'live');
			$this->setPrivateKey($config['test']['private_key'], 'test');
			$this->setPrivateKey($config['live']['private_key'], 'live');
			$this->setSellerId($config['test']['seller_id'], 'test');
			$this->setSellerId($config['live']['seller_id'], 'live');
			$this->setSecretWord($config['test']['secret_word'], 'test');
			$this->setSecretWord($config['live']['secret_word'], 'live');
		}
		
		return new MM_Response();
	}
	
	
	/**
	 * Respond to Stripe webhooks. Used to detect refunds issued by the other side
	 * @see MM_PaymentService::processNotification()
	 *
	 * @param array $request The $_POST superglobal if it exists, a blank array if not. Ignored in this implementation in favor of php://input
	 * @return MM_PaymentServiceResponse indicating the status of any operations performed in the method. The message field of the response will be echoed to the script caller verbatim
	 */
	public function processNotification($request) 
	{
		global $wpdb;
		
		$webhook = array();
		foreach ($_POST as $k => $v) {
		    $webhook[$k] = $v;
		}

		$passback = Twocheckout_Notification::check($webhook, $this->getSecretWord($this->getTestMode() ? "test" : "live"));

		if($passback['response_code'] != "Success")
		{
			return new MM_PaymentServiceResponse($passback['response_message']);
		}
		
		if (isset($webhook['message_id']) && $this->isDuplicateWebhook($webhook['message_id']))
		{
			return new MM_PaymentServiceResponse("Duplicate webhook");
		}
		
		//log the webhook
		$wpdb->insert(
			MM_TABLE_TWOCHECKOUT_WEBHOOKS, 
			array(
				"webhook_id" 	 => $webhook['message_id'], 
				"webhook_data"  => serialize($webhook), 
				"date_received" => MM_Utils::getCurrentTime()
			)
		);
		
		if (!isset($webhook['message_type']))
		{
			//we don't recognize this webhook, so just ignore it
			return new MM_PaymentServiceResponse();
		}
				
		switch ($webhook['message_type'])
		{
			case 'REFUND_ISSUED':
			
				$itemCount = $webhook['item_count'];
				
				// Partial Refund or not a refund at all, ignore for now
				if($webhook["item_name_{$itemCount}"] == "Partial Refund" || $webhook["item_type_{$itemCount}"] != "refund")
				{
					return new MM_PaymentServiceResponse();
				}
			
				$transactionLookupSQL = "
					SELECT 
					t.id as transaction_id 
					FROM " . MM_TABLE_TRANSACTION_LOG . " t 
					LEFT JOIN (" . MM_TABLE_TWOCHECKOUT_CHARGES . " c) 
					ON t.order_id = c.order_id
					WHERE t.payment_service_id = %s 
					AND (
						t.transaction_type = %s OR 
						t.transaction_type = %s
					) 
					AND t.payment_service_detail_id = c.id 
					AND c.charge_id = %s 
					AND t.refund_id IS NULL
				";
					
				$chargeInfo = 	$wpdb->get_row(
										$wpdb->prepare(
											$transactionLookupSQL,
											$this->getId(),
											MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT, 
											MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT,
											$webhook['sale_id']
										)
									);
				
				if ($chargeInfo != null)
				{
					$refundResponse = $this->_refundTransaction($chargeInfo->transaction_id, false);
				}
				return new MM_PaymentServiceResponse();
				break;
			default:
				//we don't recognize this webhook, so just ignore it
				return new MM_PaymentServiceResponse();
		}
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Detects if the webhook with the supplied id has been processed before
	 * 
	 * @param string $webhookId
	 * @return boolean true if this is a duplicate id, false otherwise
	 */
	private function isDuplicateWebhook($webhookId)
	{
		global $wpdb;
		
		$count = $wpdb->get_var($wpdb->prepare("SELECT count(*) FROM ".MM_TABLE_TWOCHECKOUT_WEBHOOKS." WHERE webhook_id=%s",$webhookId));
		return (!is_null($count) && ($count>0));
	}
	
	
	/**
	 * Charge an order
	 * 
	 * @param MM_Order $order The order to charge
	 * @param MM_CardInfo $cardInfo The credit card information to use in charging the order
	 * @return MM_PaymentServiceResponse An object representing the status of the charge attempt
	 */
	public function chargeOrder(MM_Order $order, MM_CardInfo $cardInfo=null, $validate=true) 
	{ 
		global $wpdb;
		
		$parentResponse = parent::chargeOrder($order,$cardInfo,$validate);
		if (!MM_PaymentServiceResponse::isSuccess($parentResponse))
		{
			return $parentResponse;
		}
		
		$tryCardOnFile = is_null($cardInfo);
		if (!$tryCardOnFile) 
		{
			$cardValidation = $cardInfo->validate();
			if ($cardValidation !== true)
			{
				return new MM_PaymentServiceResponse("Unable to charge order: {$cardValidation}",MM_PaymentServiceResponse::$ERROR);
			}
		}
		
		if ($order->getTotal() > 0.00)
		{	
			$chargeResponse = $this->send2COCharge($order, $cardInfo);
			
			if (MM_PaymentServiceResponse::isError($chargeResponse) || MM_PaymentServiceResponse::isFailed($chargeResponse))
			{
				return $chargeResponse;
			}
			
			//log to transactions tables
			$productItems = $order->getProducts();
			$orderItemId = null;
			if (count($productItems) == 1)
			{
				$orderItem   = reset($productItems);
				$orderItemId = $orderItem->getId();
			}
			
			$chargeObject = $chargeResponse->getMessage();
			$transactionDescription = "Payment for order# {$order->getOrderNumber()}";
			$transactionDate = MM_Utils::getCurrentTime();
			$insertData = array( 
				"order_id"         => $order->getId(),
				"order_item_id"    => $orderItemId,
				"charge_id"     	 => $chargeObject['response']['orderNumber'],
				"customer_id"      => $order->getCustomer()->getId(),
				"amount"           => $order->getTotal(),
				"currency"         => $order->getCurrency(),
				"transaction_date" => $transactionDate
			);
			$wpdb->insert(MM_TABLE_TWOCHECKOUT_CHARGES,$insertData);
			$twoCheckoutChargeId = $wpdb->insert_id;
			
			//now log the payment in the transactions table
			$res = MM_TransactionLog::createTransactionEntry($order->getId(), $orderItemId,$order->getTotal(), $order->getCurrency(),$transactionDescription, MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT,true,$this->id,$twoCheckoutChargeId,$transactionDate);
		}
		
		//reaching this point means the subscriptions were scheduled and the initial charge was successful
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Send a charge to Stripe, and returns an object containing the unfiltered result.
	 * 
	 * @param object  $order The entire MM_Order object so we can reference data needed
	 * @param string  $cardInfo The credit card to charge
	 * 
	 * @return MM_PaymentServiceResponse On success, contains the stripe charge object returned by the gateway, on failure contains an error message
	 */
	protected function send2COCharge($order, $cardInfo = null)
	{	
		if (is_null($order->getCurrency()))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No currency was selected",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($cardInfo))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No payment method was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (is_null($order->getBillingAddress()))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: No billing address was provided",MM_PaymentServiceResponse::$ERROR);
		}
		
		if (!is_numeric($order->getTotal()))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received a non-numeric amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$amount = intval(strval($order->getTotal() * 100));
		
		if (!is_int($amount))
		{
			return new MM_PaymentServiceResponse("Unable to create charge: Received an improperly formatted amount to charge",MM_PaymentServiceResponse::$ERROR);
		}
		
		$charge_data = array();
		$charge_data['merchantOrderId'] = $order->getOrderNumber();
		$charge_data['token'] 			  = $cardInfo->getToken();
		$charge_data['currency'] 		  = $order->getCurrency();
		$charge_data['total'] 			  = $order->getTotal();
		$charge_data['billingAddr'] 	  = array(
			"name" 			=> $order->getBillingAddress()->getFirstName() . " " . $order->getBillingAddress()->getFirstName(),
			"addrLine1" 	=> $order->getBillingAddress()->getAddressLine1(),
			"city" 			=> $order->getBillingAddress()->getCity(),
			"state" 			=> $order->getBillingAddress()->getState(),
			"zipCode" 		=> $order->getBillingAddress()->getPostalCode(),
			"country" 		=> $order->getBillingAddress()->getCountry(),
			"email" 			=> $order->getCustomer()->getEmail(),
			"phoneNumber" 	=> $order->getBillingAddress()->getPhone(),
		);
		
		if(!is_null($order->getShippingAddress()))
		{
			$charge_data['shippingAddr'] = array(
				"name" 			=> $order->getShippingAddress()->getFirstName() . " " . $order->getShippingAddress()->getFirstName(),
				"addrLine1" 	=> $order->getShippingAddress()->getAddressLine1(),
				"city" 			=> $order->getShippingAddress()->getCity(),
				"state" 			=> $order->getShippingAddress()->getState(),
				"zipCode" 		=> $order->getShippingAddress()->getPostalCode(),
				"country" 		=> $order->getShippingAddress()->getCountry(),
				"email" 			=> $order->getCustomer()->getEmail(),
				"phoneNumber" 	=> $order->getShippingAddress()->getPhone(),
			);
		}
		
		try 
		{
			Twocheckout::privateKey($this->getPrivateKey($this->getTestMode() ? "test" : "live"));
			Twocheckout::sellerId($this->getSellerId($this->getTestMode() ? "test" : "live"));
			Twocheckout::sandbox($this->getTestMode());
			return new MM_PaymentServiceResponse(Twocheckout_Charge::auth($charge_data));
		} 
		catch (Twocheckout_Error $e)
		{
			if(isset($this->errorCodes[$e->getCode()]))
			{
				return new MM_PaymentServiceResponse($this->errorCodes[$e->getCode()]['cause'], $this->errorCodes[$e->getCode()]['type'] == "failed" ? MM_PaymentServiceResponse::$FAILED : MM_PaymentServiceResponse::$ERROR);
			}
			else
			{
				return new MM_PaymentServiceResponse($e->getMessage(), MM_PaymentServiceResponse::$FAILED);
			}
		}
	}
	
	
	/**
	 * Refunds a transaction
	 * 
	 * @param integer $transactionId The MemberMouse transaction to refund
	 * @return MM_PaymentServiceResponse indicating success, failure, or error
	 */
	public function refundTransaction($transactionId)
	{
		return $this->_refundTransaction($transactionId, true);
	}
	
	
	/**
	 * Internal refund method that allows a refund to be processed the same way, even if it is initiated on Stripe and sent to us via webhook
	 * 
	 * @param integer $transactionId The id of the MemberMouse transaction being refunded
	 * @param boolean $shouldAttemptGatewayRefund (optional) Indicates whether the method should attempt to issue a refund through the Stripe api. If Stripe notifies us via webhook, the charge is already refunded, so this should be false
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function _refundTransaction($transactionId, $shouldAttemptGatewayRefund = true, $refundAmount = null) 
	{
		global $wpdb;
		
		// make sure we have a valid transaction id
		if (empty($transactionId))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, invalid transaction id supplied", MM_PaymentServiceResponse::$ERROR);
		}
		
		// make sure the transaction exists
		$transactionRow = $wpdb->get_row($wpdb->prepare("SELECT * from " . MM_TABLE_TRANSACTION_LOG . " where id = %s", $transactionId));
				
		if (is_null($transactionRow))
		{
			return new MM_PaymentServiceResponse("Unable to process refund, transaction does not exist", MM_PaymentServiceResponse::$ERROR);
		}
		
		// make sure its not already refunded
		if (!is_null($transactionRow->refund_id))
		{
			return new MM_PaymentServiceResponse("Transaction has already been refunded",MM_PaymentServiceResponse::$ERROR);
		}
		
		// determine where the transaction information is stored based on the type
		if(!is_null($refundAmount) && $refundAmount > 0 && $refundAmount != abs($transactionRow->amount)) {
			$transactionAmount = $refundAmount;
		} else {
			$transactionAmount = abs($transactionRow->amount);
		}
		
		$gatewayRefundRequired = false;
		switch ($transactionRow->transaction_type)
		{
			case MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT:
				$twoCheckOutChargeQuery = "SELECT * from ".MM_TABLE_TWOCHECKOUT_CHARGES." WHERE id = %s";
				$twoCheckOutChargeInfo = $wpdb->get_row($wpdb->prepare($twoCheckOutChargeQuery,$transactionRow->payment_service_detail_id));
				$twoCheckOutChargeId = $twoCheckOutChargeInfo->charge_id;
				$gatewayRefundRequired = true;
				break;
			case MM_TransactionLog::$TRANSACTION_TYPE_CHARGE:
			case MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_CHARGE:
				return new MM_PaymentServiceResponse("Unable to refund transaction: Not a payment",MM_PaymentServiceResponse::$ERROR);
				break;
			default:
				return new MM_PaymentServiceResponse("Unknown transaction type, unable to process refund",MM_PaymentServiceResponse::$ERROR);
		}
		
		if ($gatewayRefundRequired && $shouldAttemptGatewayRefund)
		{
			if (empty($twoCheckOutChargeId)) //necessary for both voids and credits
			{
				return new MM_PaymentServiceResponse("A configuration error was encountered during the attempt to void the transaction",MM_PaymentServiceResponse::$ERROR);
			}
			return $this->refund2COChargeId($twoCheckOutChargeId,$transactionId);
		}
		
		return new MM_PaymentServiceResponse(); //success
	}	
	
	
	/**
	 * Refunds a Stripe charge, and logs the refund in the transaction table
	 * 
	 * @param string $stripeChargeId The Stripe identifier for the charge to be refunded
	 * @param int $originalTransactionId The identifier for the membermouse transaction
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	protected function refund2COChargeId($twoCheckOutChargeId, $originalTransactionId)
	{
		global $wpdb;
		
		$alreadyRefunded = false;
		try 
		{	
			// Do the 2Checkout refund
			Twocheckout::username($this->getUsername(($this->getTestMode() ? "test" : "live"), "api"));
			Twocheckout::password($this->getPassword(($this->getTestMode() ? "test" : "live"), "api"));
			Twocheckout::sandbox($this->getTestMode());
			
			$args = array(
				'sale_id'  => $twoCheckOutChargeId,
				'category' => self::$DEFAULT_REFUND_CATEGORY,
				'comment'  => self::$DEFAULT_REFUND_COMMENT,
			);
			
			$result = Twocheckout_Sale::refund($args);
		}
		catch (Exception $e)
		{	
			if(isset($this->errorCodes[$e->getCode()]))
			{
				return new MM_PaymentServiceResponse($this->errorCodes[$e->getCode()]['cause'], $this->errorCodes[$e->getCode()]['type'] == "failed" ? MM_PaymentServiceResponse::$FAILED : MM_PaymentServiceResponse::$ERROR);
			}
			else
			{
				return new MM_PaymentServiceResponse($e->getMessage(), MM_PaymentServiceResponse::$FAILED);
			}
		}
			
		// get original transaction details
		$originalTransactionInfo = $wpdb->get_row($wpdb->prepare("SELECT * FROM ".MM_TABLE_TRANSACTION_LOG." WHERE id=%s",$originalTransactionId));
		if (!$alreadyRefunded || ($alreadyRefunded && is_null($originalTransactionInfo->refund_id)))
		{
			$transactionDescription = "Refund for transaction# {$originalTransactionId}";
			$transactionDate = MM_Utils::getCurrentTime();
			
			$response = MM_TransactionLog::createTransactionEntry(
								$originalTransactionInfo->order_id,
								$originalTransactionInfo->order_item_id,
								$originalTransactionInfo->amount,
								$originalTransactionInfo->currency,
								$transactionDescription,
								MM_TransactionLog::$TRANSACTION_TYPE_REFUND,
								false,
								$this->getId(),
								null,
								$transactionDate,
								$originalTransactionId
							);
							
			if (MM_Response::isSuccess($response))
			{
				$wpdb->query($wpdb->prepare("UPDATE " . MM_TABLE_TRANSACTION_LOG . " SET refund_id = %s WHERE id = %s", $response->message, $originalTransactionId));
			}
		}
		
		return new MM_PaymentServiceResponse();		
	}
	
	/**
	 * Respond to events generated by MemberMouse
	 *
	 * @see MM_MemberMouseEventListener::eventReceived()
	 * @param integer $eventType An event constant enumerated in MM_MemberMouseEventListener
	 * @param variable $eventData Any data associated with the event
	 * 
	 * @return MM_Response indicating success or failure processing the event
	 */
	public function eventReceived($eventType, $eventData)
	{
		$response = new MM_Response();
		switch ($eventType)
		{
			case MM_MemberMouseEventListener::PRODUCT_ADDED:
			case MM_MemberMouseEventListener::PRODUCT_UPDATED:
				if ($eventData instanceof MM_Product)
				{
					$product = $eventData;
					if ($product->isRecurring())
					{
						return new MM_Response("Error: 2Checkout currently does not support recurring billing",MM_Response::$ERROR);
					}
				}
				break;
			default:
				return $response;
		}
		return $response;
	}
	
	public function cancelSubscription(MM_OrderItem $orderItem)
	{	
		return new MM_PaymentServiceResponse();
	}
	
	public function getUsername($type='live', $subtype='seller')
	{
		return $this->username[$type][$subtype];
	}
	
	
	public function setUsername($username, $type='live', $subtype='seller')
	{	
		$this->username[$type][$subtype] = $username;
	}
	
	
	public function getPassword($type='live', $subtype='seller')
	{
		return $this->password[$type][$subtype];
	}
	
	
	public function setPassword($password, $type='live', $subtype='seller')
	{
		$this->password[$type][$subtype] = $password;
	}
	
	
	public function getPublicKey($type='live')
	{
		return $this->publicKey[$type];
	}
	
	
	public function setPublicKey($publicKey, $type='live')
	{
		$this->publicKey[$type] = $publicKey;
	}
	
	
	public function getPrivateKey($type='live')
	{
		return $this->privateKey[$type];
	}
	
	
	public function setPrivateKey($privateKey, $type='live')
	{
		$this->privateKey[$type] = $privateKey;
	}
	
	
	public function getSellerId($type='live')
	{
		return $this->sellerId[$type];
	}
	
	
	public function setSellerId($sellerId, $type='live')
	{
		$this->sellerId[$type] = $sellerId;
	}
	
	
	public function getSecretWord($type='live')
	{
		return $this->secretWord[$type];
	}
	
	
	public function setSecretWord($secretWord, $type='live')
	{
		$this->secretWord[$type] = $secretWord;
	}
	
	
	public function setTestMode($testMode)
	{
		$testMode = (bool)$testMode;
		$this->testMode = $testMode;
	}
	
	
	public function getTestMode()
	{
		return $this->testMode;
	}
	
  /**
	 * checkoutInit is called from the checkout form prior to the page being rendered.
	 * 
	 * @see MM_PaymentService::checkoutInit()
	 */
	public function checkoutInit()
	{
		wp_enqueue_script("2COJS", "https://www.2checkout.com/checkout/api/2co.min.js", array(), MemberMouse::getPluginVersion(), true);
		wp_enqueue_script("membermouse-2COJS", plugins_url(MM_PLUGIN_NAME."/resources/js/common/mm-2CO-token-exchange.js"), array("2COJS","membermouse-checkout-form"), MemberMouse::getPluginVersion(), true);
		wp_localize_script('membermouse-2COJS', '_2COJSInfo', array('_2COPublicKey' => $this->getPublicKey($this->getTestMode()?'test':'live'), '_2COSellerId' => $this->getSellerId($this->getTestMode()?'test':'live'), 'environment' => $this->getTestMode()?'sandbox':'production'));
	}	
	  
}
