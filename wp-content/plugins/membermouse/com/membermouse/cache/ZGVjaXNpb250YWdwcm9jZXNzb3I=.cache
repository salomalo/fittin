class MM_DecisionTagProcessor
{
	public static $TAG_MEMBER_DECISION = "mm_member_decision";
	public static $TAG_ORDER_DECISION = "mm_order_decision";
	public static $TAG_ORDER_SUBDECISION = "mm_order_subdecision";
	public static $TAG_AFFILIATE_DECISION = "mm_affiliate_decision";
	public static $TAG_CUSTOM_DECISION = "mm_custom_decision";
	public static $TAG_ACCESS_DECISION = "mm_access_decision";
 	
 	// states for decision checks
 	public static $IGNORE = 0;
 	public static $PASS = 1;
 	public static $FAIL = -1;
 	
 	// placeholder value for expressions
 	public static $PLACEHOLDER_VALUE = "[[MMVALUE]]";
 	
 	// access types
 	public static $ACCESS_CURRENT = "true";
 	public static $ACCESS_FUTURE = "future";
 	public static $ACCESS_NONE = "false";
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is a decision tag.
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to SmartContent.
	 */
	public static function isDecisionSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_MEMBER_DECISION:
			case self::$TAG_ORDER_DECISION:
			case self::$TAG_ORDER_SUBDECISION:
			case self::$TAG_AFFILIATE_DECISION:
			case self::$TAG_CUSTOM_DECISION:
			case self::$TAG_ACCESS_DECISION:
				return true;
				
			default:
				return false;
		}
	}
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		$smartTagVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_SMARTTAG_VERSION);
		
		if(MM_MemberMouseService::hasPermission(MM_MemberMouseService::$FEATURE_SMART_CONTENT_TAGS))
		{
			// switch between SmartTag versions
			if($smartTagVersion == "2.1")
			{
				switch($smartTag) 
				{
					case self::$TAG_MEMBER_DECISION:
						return MM_DecisionTagProcessor_V2::mm_member_decision($content, $atts, $code);
						
					case self::$TAG_ORDER_DECISION:
					case self::$TAG_ORDER_SUBDECISION:
						return MM_DecisionTagProcessor_V2::mm_order_decision($content, $atts, $code);
						
					case self::$TAG_AFFILIATE_DECISION:
						return MM_DecisionTagProcessor_V2::mm_affiliate_decision($content, $atts, $code);
						
					case self::$TAG_CUSTOM_DECISION:
						return MM_DecisionTagProcessor_V2::mm_custom_decision($content, $atts, $code);
						
					case self::$TAG_ACCESS_DECISION:
						return MM_DecisionTagProcessor_V2::mm_access_decision($content, $atts, $code);
						
					default:
						return $content;
				}	
			}
			else
			{
				switch($smartTag)
				{
					case self::$TAG_MEMBER_DECISION:
						return MM_DecisionTagProcessor_V1::mm_member_decision($content, $atts, $code);
				
					case self::$TAG_ORDER_DECISION:
					case self::$TAG_ORDER_SUBDECISION:
						return MM_DecisionTagProcessor_V1::mm_order_decision($content, $atts, $code);
				
					case self::$TAG_AFFILIATE_DECISION:
						return MM_DecisionTagProcessor_V1::mm_affiliate_decision($content, $atts, $code);
				
					case self::$TAG_CUSTOM_DECISION:
						return MM_DecisionTagProcessor_V1::mm_custom_decision($content, $atts, $code);
				
					case self::$TAG_ACCESS_DECISION:
						return MM_DecisionTagProcessor_V1::mm_access_decision($content, $atts, $code);
				
					default:
						return $content;
				}
			}
		}
		else
		{
			return "The ".$code." SmartTag is not available for this MemberMouse license. Upgrade MemberMouse to unlock Decision SmartTags";
		}
	}
	
	/**
	 * This function processes the MM_Access_Decision tag. It is responsible for determining
	 * whether or not the content should be displayed based on the access rights of the current user
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_access_decision($content, $atts, $code)
	{
		if(is_array($atts) && count($atts)>0)
		{
			foreach($atts as $k=>$v)
			{
				$key = strtolower($k);
				$$key=$v;
			}
		}
		
		// get current page ID
		if(!isset($id))
		{
			global $post;
			$id = $post->ID;
		}
		
		// ensure that the id and access attributes are set		
		if(isset($id) && isset($access))
		{
			$validAccessTypes = array(self::$ACCESS_CURRENT, self::$ACCESS_NONE, self::$ACCESS_FUTURE);
			
			if(!in_array($access, $validAccessTypes))
			{
				return "Invalid SmartTag Configuration: Invalid 'access' attribute of '{$access}' passed to SmartTag {$code}";
			}
			
			$user = MM_SmartTagUtil::getCurrentUser();
			$pce = new MM_ProtectedContentEngine();
			
			if($pce->isUnprotected($id))
			{
				$crntAccess = self::$ACCESS_CURRENT;
			}
			else
			{
				$dateOffset = $pce->daysToAccess($id, $user->getId());
					
				if($dateOffset === false)
				{
					$crntAccess = self::$ACCESS_NONE;
				}
				else if($dateOffset >= 0)
				{
					$crntAccess = self::$ACCESS_CURRENT;
				}
				else if($dateOffset < 0)
				{
					$crntAccess = self::$ACCESS_FUTURE;
				}
			}
				
			// check if access of current user is sufficient based on access requested
			if($crntAccess == $access)
			{
				return do_shortcode($content);
			}
			else
			{
				return "";
			}
		}
		else
		{
			return "Invalid SmartTag Configuration: 'id' and 'access' attributes are required for SmartTag {$code}";
		}
	}
	
	public static function checkDaysWithAccess(MM_User $user, $accessType, $accessTypeId, $daysComparisonValue, $daysComparisonMethod = ">")
	{
		$daysWithAccess = 0;
		
		switch($accessType)
		{
			case MM_AccessControlEngine::$ACCESS_TYPE_MEMBERSHIP:
				if($user->isAdmin() || MM_Employee::isEmployee($user->getId()))
				{
					// get preview bar settings
					$previewSettings = MM_Preview::getData();
 	 	
			 	 	if($previewSettings !== false)
			 	 	{	
			 	 		$daysWithAccess = $previewSettings->getDays();
			 	 	}
				}
				else
				{
					$daysWithAccess = $user->getDaysAsMember();
				}
				
				break;
				
			case MM_AccessControlEngine::$ACCESS_TYPE_BUNDLE:
				if($user->isAdmin() || MM_Employee::isEmployee($user->getId()))
				{
					// get preview bar settings
					$previewSettings = MM_Preview::getData();
				
					if($previewSettings !== false)
					{
						$daysWithAccess = $previewSettings->getAppliedDays($accessTypeId);
					}
				}
				else
				{
					$daysWithAccess = $user->getDaysWithBundle($accessTypeId);
				}
				
				break;
		}
		
		if($daysComparisonMethod == ">" && $daysWithAccess >= $daysComparisonValue)
		{
			return true;
		}
		else if($daysComparisonMethod == "<" && $daysWithAccess < $daysComparisonValue)
		{
			return true;
		}
		
		return false;
	}
 	
 	public static function pass($test, $mustPass=false)
 	{
 		if(!$mustPass && ($test == self::$IGNORE || $test == self::$PASS))
 		{
 			return true;
 		}
 		else if($mustPass && $test == self::$PASS)
 		{
 			return true;
 		}
 		else
 		{
 			return false;
 		}
 	}
}
