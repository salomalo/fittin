class MM_MemberTagProcessor
{	
	public static $TAG_MEMBER_DATA = "mm_member_data";
	public static $TAG_MEMBER_LINK = "mm_member_link";
	
	
	/**
	 * Takes a SmartTag string and returns true if the SmartTag is related to members.
	 * 
	 * @param String $smartTag the name of the SmartTag
	 * @return Boolean returns true if the SmartTag passed is related to members.
	 */
	public static function isMemberSmartTag($smartTag)
	{
		switch($smartTag) 
		{
			case self::$TAG_MEMBER_DATA:
			case self::$TAG_MEMBER_LINK:
				return true;
				
			default:
				return false;
		}
	}
	
	
	/**
	 * Takes a SmartTag name and a number of properties related to the SmartTag and makes a call to 
	 * the appropriate function based on the SmartTag name.
	 * @param String $smartTag the name of the SmartTag
	 * @param String $content the content to process
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function processSmartTag($smartTag, $content, $atts, $code)
	{
		switch($smartTag) 
		{
			case self::$TAG_MEMBER_DATA:
				return self::mm_member_data($content, $atts, $code);
				
			case self::$TAG_MEMBER_LINK:
				return self::mm_member_link($content, $atts, $code);
				
			default:
				return "Invalid Member SmartTag {$smartTag} found.";
		}
	}
	
	
	/**
	 * This function processes the MM_Member_Data tag. It is responsible for 
	 * returning member data based on the name attribute.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_member_data($content, $atts, $code)
	{
		$member = MM_SmartTagUtil::getCurrentUser();
		
		if($member->isValid())
		{
			if(is_array($atts) && count($atts) > 0)
			{
				foreach($atts as $k=>$v)
				{
					$key = strtolower($k);
					$$key = $v;
				}
			}
			
			if(isset($name))
			{
				$name = strtolower($name);
				
				switch($name)
				{
					case "id":
						return $member->getId();
						
					case "registrationdate":
						if(isset($dateformat))
						{
							return MM_Utils::dateToLocal($member->getRegistrationDate(false), $dateformat);
						}
						else
						{
							return $member->getRegistrationDate(true);
						}
						
					case "statuschangeddate":
						if(isset($dateformat))
						{
							return MM_Utils::dateToLocal($member->getStatusUpdatedDate(false), $dateformat);
						}
						else
						{
							return $member->getStatusUpdatedDate(true);
						}
						
					case "expirationdate":
						if($member->doesExpire())
						{
							if(isset($dateformat))
							{
								return MM_Utils::dateToLocal($member->getExpirationDate(false), $dateformat);
							}
							else
							{
								return $member->getExpirationDate(true);
							}
						}
						else 
						{
							return MM_NO_DATA;
						}

					case "cancellationdate":
						if($member->isPendingCancellation())
						{
							if(isset($dateformat))
							{
								return MM_Utils::dateToLocal($member->getCancellationDate(false), $dateformat);
							}
							else
							{
								return $member->getCancellationDate(true);
							}
						}
						else
						{
							return MM_NO_DATA;
						}
						
					case "firstname":
						return $member->getFirstName();
						
					case "lastname":
						return $member->getLastName();
						
					case "email":
						return $member->getEmail();
						
					case "phone":
						return $member->getPhone();
						
					case "username":
						return $member->getUsername();
						
					case "password":
						return !is_null($member->getPassword()) ? $member->getPassword() : "********";
						
					case "daysasmember":
						return $member->getDaysAsMember();
						
					case "membershipid":
						return $member->getMembershipId();
						
					case "membershipname":
						return _mmt($member->getMembershipName(),MM_LANGUAGE_DOMAIN);
						
					case "statusid":
						return $member->getStatus();
						
					case "statusname":
						return MM_Status::getName($member->getStatus());
						
					case "billingaddress":
						return $member->getBillingAddress();
						
					case "billingcity":
						return $member->getBillingCity();
						
					case "billingstate":
						global $wpdb;
						$results = $wpdb->get_col("SELECT `name` from " . MM_TABLE_COUNTRY_SUBDIVISIONS . " where `iso` = '" . $member->getBillingCountry() . "' AND `code` = '" . $member->getBillingState() . "'");
						return isset($results[0]) ? $results[0] : $member->getBillingState();
						
					case "billingzipcode":
						return $member->getBillingZipCode();
						
					case "billingcountry":
						return $member->getBillingCountry();
						
					case "shippingaddress":
						return $member->getShippingAddress();
						
					case "shippingcity":
						return $member->getShippingCity();
						
					case "shippingstate":
						global $wpdb;
						$results = $wpdb->get_col("SELECT `name` from " . MM_TABLE_COUNTRY_SUBDIVISIONS . " where `iso` = '" . $member->getShippingCountry() . "' AND `code` = '" . $member->getShippingState() . "'");
						return isset($results[0]) ? $results[0] : $member->getShippingState();
						
					case "shippingzipcode":
						return $member->getShippingZipCode();
						
					case "shippingcountry":
						return $member->getShippingCountry();
						
					default:
						if(strpos($name, "customfield_") !== false)
						{
							$fieldId = preg_replace("/[^0-9]+/", "", $name);
							$data = $member->getCustomDataByFieldId($fieldId);
							return stripslashes($data->getValue());
						}
						else if(strpos($name, "dayswithbundle_") !== false)
						{
							$bundleId = preg_replace("/[^0-9]+/", "", $name);
							
							if($member->hasBundle($bundleId, false))
							{
								$daysWithBundle = $member->getDaysWithBundle($bundleId);
								
								if($daysWithBundle !== false)
								{
									return $daysWithBundle;
								}
								else 
								{
									return -1;
								}
							}
							else
							{
								return -1;
							}
						}
						else
						{
							return "Invalid SmartTag Configuration: The 'name' attribute '{$name}' is invalid for SmartTag {$code}.";
						}
				}
			}
			else
			{
				return "Invalid SmartTag Configuration: The 'name' attribute is required for SmartTag {$code}.";
			}
		}
		else
		{
			return "";
		}
	}
	
	/**
	 * This function processes the MM_Member_Link tag. It is responsible for
	 * returning a link based on the type attribute.
	 * @param String $content the content contained within the SmartTag (if any)
	 * @param Array $atts an associative array of attributes associated with the SmartTag
	 * @param String $code the raw version of the SmartTag name (i.e. not case-insentive, not broken up into parts)
	 * @return String a string based on the $content passed with all SmartTags processed
	 */
	public static function mm_member_link($content, $atts, $code)
	{
		$member = MM_SmartTagUtil::getCurrentUser();
	
		if($member->isValid())
		{
			if(is_array($atts) && count($atts) > 0)
			{
				foreach($atts as $k=>$v)
				{
					$key = strtolower($k);
					$$key = $v;
				}
			}

			if(!isset($redirecturl))
			{
				$redirecturl = "";
			}
			
			if(isset($type))
			{
				switch(strtolower($type))
				{
					case "cancelmembership":
						$url = "javascript:pymtutils_js.changeMembershipStatus({$member->getId()}, ";
						$url .= "{$member->getMembershipId()}, ".MM_Status::$CANCELED.", '{$redirecturl}');";
						return $url;
	
					case "pausemembership":
						$url = "javascript:pymtutils_js.changeMembershipStatus({$member->getId()}, ";
						$url .= "{$member->getMembershipId()}, ".MM_Status::$PAUSED.", '{$redirecturl}');";
						return $url;
	
					case "cancelbundle":
					case "pausebundle":
						if(isset($value))
						{
							if(strtolower($type) == "cancelbundle")
							{
								$newStatus = MM_Status::$CANCELED;
							}
							else
							{
								$newStatus = MM_Status::$PAUSED;
							}
							
							$url = "javascript:pymtutils_js.changeBundleStatus({$member->getId()}, ";
							$url .= "{$value}, {$newStatus}, '{$redirecturl}');";
							return $url;
						}
						else
						{
							return "Invalid SmartTag Configuration: The 'value' attribute is required for SmartTag {$code} when type is {$type}.";
						}
						
					case "freebundle":
						if(isset($value))
						{	
							$url = "javascript:pymtutils_js.applyFreeBundle({$member->getId()}, ";
							$url .= "{$value}, '{$redirecturl}');";
							return $url;
						}
						else
						{
							return "Invalid SmartTag Configuration: The 'value' attribute is required for SmartTag {$code} when type is {$type}.";
							}
	
					default:
						return "Invalid SmartTag Configuration: The 'type' attribute '{$type}' is invalid for SmartTag {$code}.";
				}
			}
			else
			{
				return "Invalid SmartTag Configuration: The 'type' attribute is required for SmartTag {$code}.";
			}
		}
		else
		{
			return "Invalid SmartTag Configuration: Could not find member for SmartTag {$code}.";
		}
	}
}
