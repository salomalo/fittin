/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 *
 * MM_ScheduledPaymentService implements common functionality utilized by all payment services that utilize the MemberMouse scheduler.
 */
abstract class MM_ScheduledPaymentService extends MM_PaymentService
{	
	/**
	 * Iterates over an array of order items and for each recurring product creates a schedule using the MemberMouse scheduling framework
	 *
	 * @param array $productItems An array of products to iterate through and create schedules for if necessary
	 *
	 * @return MM_PaymentServiceResponse indicating success or error
	 */
	protected function createSchedulesFromProducts($productItems)
	{
		$createdSubscriptions = array();
		foreach ($productItems as $aProductItem)
		{
			$trialDuration = $aProductItem->getTrialDuration();
			$trialFrequency = $aProductItem->getTrialFrequency();
			if ($aProductItem->isRecurring() || (!empty($trialDuration)))
			{
				//this section is always handling the 2nd payment. If there is a trial, this occurs after the trial period, if not after a regular period interval
				if (!empty($trialDuration) && is_numeric($trialDuration))
				{
					$offset = "+ {$aProductItem->getTrialDuration()} {$aProductItem->getTrialFrequency()}";
					$nextPaymentNumber = 1;
				}
				else
				{
					$offset = "+ {$aProductItem->getRebillPeriod()} {$aProductItem->getRebillFrequency()}";
					$nextPaymentNumber = 2;
				}
				$nextScheduledDate = strtotime($offset);
				$schedulerResponse = $this->scheduleSubscriptionPayment($aProductItem,$nextScheduledDate,$nextPaymentNumber);
				if (MM_Response::isError($schedulerResponse))
				{
					$error = !empty($schedulerResponse->message)?$schedulerResponse->message:"Unknown error";
					$details = (empty($error))?"":": {$error}";
		
					//cancel any already created subscriptions
					$this->cancelScheduledSubscriptions($createdSubscriptions);
					//TODO: have cancel change the item status back
					return new MM_PaymentServiceResponse("There was an error processing the transaction: Internal Error{$details}",MM_PaymentServiceResponse::$ERROR);
				}
				$aProductItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
				$aProductItem->commitData();
				$createdSubscriptions[] = $aProductItem;
			}
		}
		
		return new MM_PaymentServiceResponse($createdSubscriptions);
	}
	
	
	/**
	 * Based on the status of an existing subscription and the number of payments already made, this function determines if another
	 * payment needs to be scheduled
	 *
	 * @param MM_OrderItem The item (representing a product) to use to generate the charge
	 * @param MM_User The customer associated with the subscription
	 * @param The number of the current rebill payment
	 *
	 * @return MM_PaymentServiceResponse indicating success or error
	 */
	protected function scheduleNextPaymentForExistingSubscription(MM_OrderItem $orderItem, MM_User $customer, $currentRebillNumber)
	{
		//if this is not a recurring payment, then we are done
		if (!$orderItem->isRecurring())
		{
			return new MM_PaymentServiceResponse();
		}
		
		//the subscription is recurring, check the status and update if we're done
		$maxRebills = intval($orderItem->getMaxRebills());
		
		if (($maxRebills > 0) && ($currentRebillNumber >= $maxRebills))
		{
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_COMPLETE);
			$orderItem->commitData();
			return new MM_PaymentServiceResponse();
		}
		else if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			//restarting a failed subscription
			$this->cancelScheduledSubscriptions($orderItem); //cancel all the queued retries for the failed billing
			$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING);
			$orderItem->commitData();
			MM_AccessControlEngine::assignAccessFromOrderItems($customer, array($orderItem));
		}
		
		//now schedule the next charge, if necessary
		$nextPaymentNumber = ++$currentRebillNumber;
		$nextPaymentDate = date("Y-m-d H:i",strtotime("+ {$orderItem->getRebillPeriod()} {$orderItem->getRebillFrequency()}"));
		$this->scheduleSubscriptionPayment($orderItem, $nextPaymentDate,$nextPaymentNumber);
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Schedules a future payment using the MemberMouse scheduling framework
	 *
	 * @param MM_OrderItem The item (representing a product) to use to generate the charge
	 * @param string $scheduleDate The date to schedule the charge to occur on. Must be a GMT date in a format parseable by the php strtotime function. Including a time is ok too, although timer resolution is controlled by the server
	 * @param int $paymentNumber Designates which payment this is. This information is stored in the scheduled event
	 *
	 * @return MM_Response indicating success or error
	 */
	protected function scheduleSubscriptionPayment(MM_OrderItem $aProductItem, $scheduleDate, $paymentNumber=2)
	{
		//TODO: check against total payments?
		$scheduledPayment = new MM_ScheduledPaymentEvent();
		$scheduledPayment->setScheduledDate($scheduleDate);
		$scheduledPayment->setPaymentNumber($paymentNumber);
		$scheduledPayment->setOrderItemId($aProductItem->getId());
		$userId = MM_Order::getUserIdByOrderId($aProductItem->getOrderId());
		$scheduledPayment->setUserId($userId);
		$scheduledPayment->setPaymentServiceId($this->id);
		//TODO: update commit to retry if scheduling fails
		return $scheduledPayment->commitData(true);
	}
	
	
	/**
	 * Responds to payment event notifications sent from the MemberMouse scheduler
	 *
	 * @param MM_ScheduledPaymentEvent $paymentEvent contains payment event information
	 * @return MM_PaymentServiceResponse indicated successful receipt only, not the status of the triggered operation
	 */
	public function processScheduledPaymentEvent(MM_ScheduledPaymentEvent $paymentEvent)
	{
		$orderItem = new MM_OrderItem($paymentEvent->getOrderItemId());
		if (!$orderItem->isValid())
		{
			return new MM_PaymentServiceResponse("Invalid Subscription",MM_Response::$ERROR);
		}
		$currentRebillNumber = intval($paymentEvent->getPaymentNumber());
		$rebillResponse = $this->executeSubscriptionPayment($orderItem,$currentRebillNumber);
		
		if (MM_PaymentServiceResponse::isSuccess($rebillResponse))
		{
			$paymentEvent->setStatus(MM_ScheduledEvent::$EVENT_PROCESSED);
			$paymentEvent->setProcessedDate(MM_Utils::getCurrentTime());
			$paymentEvent->commitData(false);
		}
		else if ($paymentEvent->getBillingStatus() >= MM_ScheduledPaymentEvent::$THIRD_REBILL_FAILED)
		{
			//cancel after 3rd failed billing attempt
			$orderItem = new MM_OrderItem($paymentEvent->getOrderItemId());
			$this->cancelSubscription($orderItem);
			MM_AccessControlEngine::revokeAccessForOrderItem($orderItem);
		}
		return $rebillResponse;
	}
	
	
	/**
	 * Cancels the user's subscription. With Stripe, this simply means canceling all of the scheduled payment events for this order item
	 * @see MM_PaymentService::cancelSubscription()
	 * 
	 * @param MM_OrderItem $orderItem The product item whose subscription is being cancelled
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function cancelSubscription(MM_OrderItem $orderItem) 
	{
		//first, make sure this is a product. If not, something got messed up above
		if ($orderItem->getItemType() != MM_OrderItem::$ORDER_ITEM_TYPE_PRODUCT)
		{
			return new MM_PaymentServiceResponse("Attempted to cancel a non-product item",MM_PaymentServiceResponse::$ERROR);
		}
		
		//then make sure its not already cancelled
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED)
		{
			return new MM_PaymentServiceResponse("Error cancelling subscription: The subscription has already been cancelled",MM_PaymentServiceResponse::$ERROR);
		}
		
		$this->cancelScheduledSubscriptions(array($orderItem));
		
		$orderItem->setStatus(MM_OrderItem::$STATUS_RECURRING_CANCELLED);
		$orderItem->commitData();
		
		return new MM_PaymentServiceResponse();
	}
	
	
	/**
	 * Cancel subscriptions that have been created. NOTE: This method is not the same as cancelSubscription. This method is only intended to be used internally
	 * to delete subscriptions when the initial order fails
	 * 
	 * @param array $subscriptionItems An array of MM_OrderItems representing products having subscriptions
	 * @return MM_Response indicating success or failure
	 */
	protected function cancelScheduledSubscriptions($subscriptionItems, $clearStatus=true)
	{
		global $wpdb;
		
		if (!is_array($subscriptionItems))
		{
			if ($subscriptionItems instanceof MM_OrderItem)
			{
				$subscriptionItems = array($subscriptionItems);
			}
			else 
			{
				return new MM_Response("Error canceling scheduled subscription payments: Invalid parameters",MM_Response::$ERROR);
			}
		}
		
		$hadError = false;
		$errorMessage = "";
		foreach ($subscriptionItems as $subscriptionItem)
		{
			//now wipe any scheduled payment events for this item from the db
			$scheduledPaymentsSQL = "SELECT sp.id FROM ".MM_TABLE_SCHEDULED_PAYMENTS." sp LEFT JOIN ".MM_TABLE_SCHEDULED_EVENTS." se ON (sp.id=se.id) ".
									"WHERE sp.order_item_id=%s AND sp.payment_service_id=%s AND se.status <> %s";
			$scheduledPaymentIds = $wpdb->get_col($wpdb->prepare($scheduledPaymentsSQL,$subscriptionItem->getId(), $this->getId(), MM_ScheduledEvent::$EVENT_PROCESSED));
			if ($scheduledPaymentIds)
			{
				foreach ($scheduledPaymentIds as $scheduledPaymentId)
				{
					$event = new MM_ScheduledPaymentEvent($scheduledPaymentId);
					$thisResponse = $event->delete();
					if (MM_Response::isError($thisResponse))
					{
						$hadError = true;
						$errorMessage.="{$thisResponse->message}\n";
					}
				}
			}
			$subscriptionItem->setStatus(0); // this resets the status on the order item
			$subscriptionItem->commitData();
		}
		
		if ($hadError)
		{
			return new MM_Response($errorMessage,MM_Response::$ERROR);
		}
		
		return new MM_Response();
	}
	
	
	/**
	 * Resume a subscription where a rebill failed
	 * 
	 * @param MM_OrderItem $orderItem
	 */
	protected function resumeSubscription(MM_OrderItem $orderItem)
	{
		global $wpdb;
		$paymentNumber = 1;
		if ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_REBILL_FAILED)
		{
			//calculate how many payments have been made towards this subscription
			$paymentCalcSQL = "SELECT COUNT(*) FROM ".MM_TABLE_TRANSACTION_LOG." WHERE order_id=%s ".
							  "AND order_item_id=%s AND ((transaction_type=%s) OR (transaction_type=%s))";
			$paymentNumber = $wpdb->get_var($wpdb->prepare($paymentCalcSQL,$orderItem->getOrderId(), $orderItem->getId(),MM_TransactionLog::$TRANSACTION_TYPE_PAYMENT, MM_TransactionLog::$TRANSACTION_TYPE_RECURRING_PAYMENT));
		}
		return $this->executeSubscriptionPayment($orderItem,++$paymentNumber);
	}
	
	
	/**
	 * Modifies the next billing date for a subscription. Accepts an order item and a new date to use at the next billing date.
	 * The date can be either a textual representation of a date in a format acceptable to strtotime() or a timestamp
	 * 
	 * @param MM_OrderItem $orderItem The order item to modify the schedule of
	 * @param string $newBillDate The next billing date, in either string format or as a unix timestamp
	 * 
	 * @return MM_PaymentServiceResponse indicating success or failure
	 */
	public function modifyNextBillingDate(MM_OrderItem $orderItem, $newBillDate)
	{
		if (!$orderItem->isRecurring() || ($orderItem->getStatus() == MM_OrderItem::$STATUS_RECURRING_CANCELLED))
		{
			return new MM_PaymentServiceResponse("Order is not recurring, there is no next bill date",MM_PaymentServiceResponse::$ERROR);
		}
		
		$timestamp = is_int($newBillDate)?$newBillDate:strtotime($newBillDate);
		if ($timestamp === false)
		{
			return new MM_PaymentServiceResponse("Error parsing date",MM_PaymentServiceResponse::$ERROR);
		}
		
		$scheduledPaymentEvent = MM_ScheduledPaymentEvent::findNextScheduledEventByOrderItemId($orderItem->getId(),false);
		if (!$scheduledPaymentEvent->isValid())
		{
			return new MM_PaymentServiceResponse("Next billing date not found",MM_PaymentServiceResponse::$ERROR);
		}
		$gmtNewBillDate = gmdate("Y-m-d H:i",$timestamp);
		$scheduledPaymentEvent->setScheduledDate($gmtNewBillDate);
		$scheduledPaymentEvent->setStatus(0);
		$scheduledPaymentEvent->setForceStatusUpdate(true);
		return MM_PaymentServiceResponse::translate($scheduledPaymentEvent->commitData(true));	
	}
  
}
