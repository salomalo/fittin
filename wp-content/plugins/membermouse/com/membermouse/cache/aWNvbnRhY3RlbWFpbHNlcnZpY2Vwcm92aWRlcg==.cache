class MM_IContactEmailServiceProvider extends MM_AbstractEmailServiceProvider 
{
	
	private $username;
	private $password;
	public static $API_KEY = "3Nnuk4Mt6sFTbDzzRQe6piN6S9qq2TLW";
	
	private $account_id;
	private $client_folder_id;
	
	private $host = "https://app.icontact.com";
	
	/**
	 * The iContact api requires a username, password, and appID key to auth against the api, so these are parameters for the constructor
	 */
	public function __construct($provider_info) 
	{
		if (is_object($provider_info) && (isset($provider_info->username)) && !empty($provider_info->username)
			&& (isset($provider_info->password)) && !empty($provider_info->password)) 
		{
			parent::__construct($provider_info);
			$this->username = $provider_info->username;
			$this->password = $provider_info->password;
			$additional_data = (isset($provider_info->additional_data))?unserialize($provider_info->additional_data):array();
			if (is_array($additional_data) && array_key_exists("clientFolderId", $additional_data))
			{
				$this->setClientFolderId($additional_data['clientFolderId']);
			}
		}
	}
	
	/**
	 * 
	 * Return the lists associated with the configured apiKey, keyed by id with the values being list names
	 * @return MM_Response containing lists as the message on success, an MM_Response containing the error state otherwise
	 */
	public function getLists() 
	{
		$lists = array();
		$resource = "c/{$this->client_folder_id}/lists";
		$response_obj = $this->callIContactAPI($resource);
		if ($response_obj->type != MM_Response::$SUCCESS)
		{
			return $response_obj;
		}
		
		if (!isset($response_obj->message->lists))
		{
			return new MM_Response("Error retrieving lists from iContact, Please try again later");
		}
		
		foreach ($response_obj->message->lists->list as $list_obj)
		{
			$list_id = (String)$list_obj->listId;
			$list_name = (String)$list_obj->name;
			$lists[$list_id] = $list_name;
		}
		return new MM_Response($lists);
	}
	
	/**
	 * Return a DHTML/Javascript dialog capable of collecting the options needed to configure the provider
	 * @return String the markup for the options dialog
	 */
	public function renderOptionsDialog($post) 
	{
		if (!isset($post['icontact_action']))
		{
			return $this->renderFirstOptionsDialog($post);
		}
		else 
		{
			switch ($post['icontact_action'])
			{
				case 'getClientFolder':
					return $this->renderSecondOptionsDialog($post);
					break;
				default:
					return $this->renderFirstOptionsDialog($post);
					break;
			}
		}
	}

	protected function renderFirstOptionsDialog($post) {
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$icontact_username = ($provider_entity->isValid())?$provider_entity->getUsername():"";
		$icontact_password = ($provider_entity->isValid())?$provider_entity->getPassword():"";
		$icontact_api_id = MM_IContactEmailServiceProvider::$API_KEY;
		
		$form = new MM_EmailServiceProviderDialog();
		
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">			
			<label style="float:left; width:8em;">Username</label>
			<input type="text" name="icontact_username" id="icontact_username" size="16" value="{$icontact_username}"/><br/>
			<label style="float:left; width:8em;">Password</label>
			<input type="password" name="icontact_password" id="icontact_password" size="16" value="{$icontact_password}"/><br/>
			<input type="hidden" name="icontact_action" value="getClientFolder">					
		</div>
OPTIONS;

		$form->controls = <<<CONTROLS
		<button id="email-service-provider-configure" class="mm-ui-button blue" onClick="mmjs.showNewProviderOptions(jQuery('#provider-config-form :input').serializeArray()); return false;" style="cursor:pointer;">Configure</button>
		<button id="reset" class="mm-ui-button" style="display:none" onClick="mmjs.providerOptionsReset(); return false;" style="cursor:pointer;">Reset</button>
CONTROLS;
		return $form;
	}

	protected function renderSecondOptionsDialog($post)
	{
		if (!isset($post['icontact_username']) || empty($post['icontact_username']))
		{
			return new MM_Response("Please enter your iContact username",MM_Response::$ERROR);
		}
		
		if (!isset($post['icontact_password']) || empty($post['icontact_password']))
		{
			return new MM_Response("Please enter your iContact password",MM_Response::$ERROR);
		}
		
		$this->username = $post['icontact_username'];
		$this->password = $post['icontact_password'];
		
		//first get the account id
		$response = $this->getAccountId();
		if ($response->type != MM_Response::$SUCCESS)
		{
			return $response;
		}
		else 
		{
			$this->account_id = $response->message;
		}
		
		$provider_entity = new MM_EmailServiceProvider();
		$provider_entity->setToken($this->getToken());
		$provider_entity->getData();
		$icontact_username = $post['icontact_username'];
		$icontact_password = $post['icontact_password'];
		$icontact_api_id = MM_IContactEmailServiceProvider::$API_KEY;
		$client_folder_id = ($provider_entity->isValid() && ($provider_entity->getConfigOption("clientFolderId")))?$provider_entity->getConfigOption("clientFolderId"):"";
		
		//now get the client folders
		$response = $this->getClientFolders();
		if ($response->type != MM_Response::$SUCCESS)
		{
			return $response;
		}
		
		if (is_array($response->message) && (count($response->message) == 1))
		{
			foreach ($response->message as $k=>$v)
			{
				//should only be one, but this is the easiest way to get the key and the value
				$response->message[$k] = "Default Folder ({$v})";
			}
		}
		
		$client_folder_options = MM_HtmlUtils::generateSelectionsList($response->message,$client_folder_id);		
		
		$form = new MM_EmailServiceProviderDialog();
		
		$form->dialog = <<<OPTIONS
		<div id="mm-provider-config-options">			
			<label style="float:left; width:8em;">Username</label>
			<input type="text" name="icontact_username" id="icontact_username" size="12" value="{$icontact_username}"/><br/>
			<label style="float:left; width:8em;">Password</label>
			<input type="password" name="icontact_password" id="icontact_password" size="12" value="{$icontact_password}"/><br/>
			<label style="float:left; width:8em;">Client Folder</label>
			<select name="icontact_client_folder">{$client_folder_options}</select><br/>					
		</div>
OPTIONS;
		return $form;
	}
	
	/**
	 * Responds to data collected from the form rendered by renderOptionsDialog
	 * @see MM_AbstractEmailServiceProvider::handleOptionsDialog()
	 * @param $optionData Array containing the posted values
	 * @return MM_Response object indicating success or failure
	 */
	public function handleOptionsDialog($optionData) 
	{
		if (is_array($optionData) && (isset($optionData['icontact_username'])) && !empty($optionData['icontact_username'])
			&& (isset($optionData['icontact_password'])) && !empty($optionData['icontact_password'])
			) 
		{
			$provider_token = $optionData['provider_token'];
			$this->username = $optionData['icontact_username'];
			$this->password = $optionData['icontact_password'];
			$this->client_folder_id = $optionData['icontact_client_folder'];
			
			$prospect_list_id = $optionData['prospect_list_id'];
			$cancellation_list_id = $optionData['cancellation_list_id'];
			
			$provider_entity = new MM_EmailServiceProvider();
			$provider_entity->setToken($provider_token);
			$provider_entity->getData();
			if ($provider_entity->isValid()) 
			{
				//first write the provider's configuration options
				$provider_entity->setAPIKey(MM_IContactEmailServiceProvider::$API_KEY);
				$provider_entity->setUsername($this->username);
				$provider_entity->setPassword($this->password);
				$provider_entity->setConfigOption("clientFolderId", $this->client_folder_id);
				$provider_entity->setActive(true);
				$provider_entity->setProspectListID($prospect_list_id);
				$provider_entity->setCancellationListID($cancellation_list_id);
				$commit_response = $provider_entity->commitData();
				if ($commit_response->type == MM_Response::$ERROR) 
				{
					//pass through errors committing to the database
					return $commit_response;
				}
				//now write the list mappings
				if (isset($optionData['member_type_mappings']) && is_array($optionData['member_type_mappings'])) 
				{
					$provider_id = $provider_entity->getId(); 
					return $this->persistListMappings($provider_id,$optionData['member_type_mappings']);
				}
			}
			else 
			{
				//failed to load entity from table
				return new MM_Response("Failed to save settings",MM_Response::$ERROR);
			}
		}
		else 
		{
			//optionData is not an array, or the api key was not sent
			return new MM_Response("Failed to save settings: Incorrect options format or iContact credentials not sent",MM_Response::$ERROR);
		}
	}
	
	/**
	 * Configures the iContact provider in order to do the initial connect
	 * @see MM_AbstractEmailServiceProvider::configureFromOptions()
	 * @param $optionData Array The values posted from the form rendered by renderOptionsDialog
	 */
	public function configureFromOptions($optionData) 
	{
		if (!isset($optionData['icontact_username']) || !isset($optionData['icontact_password']))
		{
			return new MM_Response("There was an error connecting to iContact. Please make sure you have entered a username, password, and client folder",MM_Response::$ERROR);
		}
		
		if (!isset($optionData['icontact_client_folder']) && ($this->client_folder_id == ""))
		{
			return new MM_Response("There was an error connecting to iContact. Please make sure you have selected a valid client folder",MM_Response::$ERROR);
		}
		
		$this->username = $optionData['icontact_username'];
		$this->password = $optionData['icontact_password'];
		$this->client_folder_id = (isset($optionData['icontact_client_folder']))?$optionData['icontact_client_folder']:$this->client_folder_id;
		return new MM_Response();
	}
	
	/**
	 * Adds a member to a list
	 * @see MM_AbstractEmailServiceProvider::addMemberToList()
	 * @param $email String The email address to add to the list
	 * @param $listId String The id of the list
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 * @return MM_Response indicating success or failure
	 */
	public function addMemberToList($email,$listId,$includeBundleInfo=true) 
	{
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid())
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$this->addRequiredCustomFields($this->client_folder_id, $includeBundleInfo);
		$cf_response = $this->getMemberDataToMerge($email, $includeBundleInfo);
		if ($cf_response->type == MM_Response::$ERROR) 
		{
			return $cf_response;
		}
		
		//first sync the contact
		$contact_response = $this->syncContact($email, $cf_response->message);
		if (($status = $this->getiContactError($contact_response) !== false))
		{
			return new MM_Response($status, MM_Response::$ERROR);
		}
		$contact = $contact_response->message;
		
		//now subscribe to the new list
		$subscriptions = new SimpleXMLElement("<subscriptions></subscriptions>");
		$subscription = $subscriptions->addChild("subscription");
		$subscription->addChild("contactId",(string)$contact->contactId);
		$subscription->addChild("listId",$listId);
		$subscription->addChild("status","normal");
		$subscribeResponse = $this->callIContactAPI("c/{$this->client_folder_id}/subscriptions","POST",$subscriptions->asXML()); 
		if (($status = $this->getiContactError($subscribeResponse)) !== false)
		{
			return new MM_Response($status,MM_Response::$ERROR);
		}
		return new MM_Response();
	}	
	
	/**
	 * 
	 * Adds merge variables to the list if they are not already present. This is crucial, because trying to update a custom field that isn't
	 * specified may cause indeterminate results. Currently used to add access tags
	 * @param String $listId The id of the list to add the merge vars to
	 * @param $includeBundleInfo indicates if bundle information should be passed
	 */
	private function addRequiredCustomFields($client_folder_id, $includeBundleInfo=true)
	{
		$mvCache = $this->getListCustomFields($client_folder_id);
		if ($mvCache->type == MM_Response::$ERROR)
		{
			return $mvCache;
		}
		$mvCache = $mvCache->message;
		
		$customFieldsXml = new SimpleXMLElement("<customfields></customfields>");
		
		if($includeBundleInfo)
		{
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = strtolower($reqTag); //icontact only supports lowercase tags, ironically the opposite of Mailchimp
				if (!isset($mvCache[$reqTag]))
				{
					//add this custom field to the client folder
					$thisField = $customFieldsXml->addChild('customfield');
					$thisField->addChild('privateName',$reqTag);
					$thisField->addChild('publicName',$reqName);
					$thisField->addChild('displayToUser',"0");
					$thisField->addChild('fieldType','text');
				}
			}
		}
		
		if (count($customFieldsXml->children()) >0)
		{
			//fields were added, so call iContact
			$cf_response = $this->callIContactAPI("c/{$client_folder_id}/customfields","POST",$customFieldsXml->asXML());
			if ($cf_response->type == MM_Response::$ERROR) 
			{
				return new MM_Response("Error adding custom fields to the iContact account",MM_Response::$ERROR);
			}
			else 
			{
				$payload = $cf_response->message;
				if (isset($payload->errors))
				{
					//try to determine if there was an error state on the iContact side
					return new MM_Response("Error adding custom fields to the iContact account".
							((isset($payload->errors->error))?": ".(string)$payload->errors->error:""),MM_Response::$ERROR);
				}

				return $cf_response;
			}
		}
		return new MM_Response();
	}
	
	/**
	 * Returns the custom fields in the client folder keyed by the tag
	 * @param String $client_folder_id The id of the client folder to retrieve custom fields for
	 */
	protected function getListCustomFields($client_folder_id)
	{
		$cfCache = array();
		$cf_response = $this->callIContactAPI("c/{$client_folder_id}/customfields");
		if ($cf_response->type == MM_Response::$ERROR)
		{
			return new MM_Response("Error retrieving custom fields: {$cf_response->message}",MM_Response::$ERROR);
		}
		else
		{
			$cf_obj = $cf_response->message;
			if (isset($cf_obj->customfields->customfields->customfield))
			{
				foreach ($cf_obj->customfields->customfield as $customField)
				{
					$cfCache[(string)$customField->privateName] = (string)$customField->publicName;
				}
			}
			return new MM_Response($cfCache);
		}
	}
	
	/**
	 * Removes a member from a list
	 * @see MM_AbstractEmailServiceProvider::removeMemberFromList()
	 * @param $email String The email address to remove from the list
	 * @param $listId String The id of the list
	 * @return MM_Response indicating success or failure
	 */
	public function removeMemberFromList($email, $listId)  
	{
		if (empty($listId)) 
		{
			return new MM_Response();
		}
		
		//first sync (retrieve) the contact
		$contact = $this->syncContact($email, array());
		if ($contact->type == MM_Response::$ERROR)
		{
			return $contact;
		}
		if (($status = $this->getiContactError($contact)) !== false)
		{
			return new MM_Response($status,MM_Response::$ERROR);
		}
		
		//contact should be valid now, unwrap it from the MM_Response message
		$contact = $contact->message;
		
		//now unsubscribe from the list
		$subscriptions = new SimpleXMLElement("<subscriptions></subscriptions>");
		$subscription = $subscriptions->addChild("subscription");
		$subscription->addChild("contactId",(string)$contact->contactId);
		$subscription->addChild("listId",$listId);
		$subscription->addChild("status","unsubscribed");
		
		$subscribeResponse = $this->callIContactAPI("c/{$this->client_folder_id}/subscriptions","POST",$subscriptions->asXML()); 
		if (($status = $this->getiContactError($subscribeResponse)) !== false)
		{
			return new MM_Response($status,MM_Response::$ERROR);
		}
		return new MM_Response();
	}
	
	/**
	 * Changes a members list subscription based on a change in membership level. 
	 * Performs a remove, looks up the list (if any) for the new membership level, and then performs an add
	 * @see MM_AbstractEmailServiceProvider::changeMembershipLevel()
	 * @param $email String The email address of the member to be updated
	 * @param $newMemberType int The member type id of the member's new member type
	 * @return MM_Response indicating success or failure
	 */
	public function changeMembershipLevel($email,$newMemberType) 
	{
		$overall_success = true;
		$overall_status = "";
		$listFriendlyNames = $this->getLists();
		
		$member = MM_User::findByEmail($email);
		
		if (!$member->isValid()) 
		{
			return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
		}
		$oldListId = $member->getSubscribedListId();
		
		$newListId = (empty($newMemberType))?$this->getListIdForMember($email):$this->getListIdForMembershipLevel($newMemberType);
		if ($newListId->type == MM_Response::$ERROR)
		{
			return new MM_Response($newListId->message,MM_Response::$ERROR);
		}
		$newListId = $newListId->message;
		
		//four possible states - a.) old list is blank but not new list - add to new list
		// b.) new list is blank but not old list - remove from old list
		// c.) both are blank - return success
		// d.) both are populated - change from old to new
		
		if (empty($oldListId) && !empty($newListId))
		{
			return $this->addMemberToList($email, $newListId);
		}
		else if (empty($newListId) && !empty($oldListId))
		{
			return $this->removeMemberFromList($email, $oldListId);
		}
		else if (empty($oldListId) && empty($newListId))
		{
			return new MM_Response();
		}
		else if (!empty($oldListId) && !empty($newListId))
		{
			$member = MM_User::findByEmail($email);
			
			if (!$member->isValid())
			{
				return new MM_Response("Could not find member with email {$email}",MM_Response::$ERROR);
			}
			$this->addRequiredCustomFields($this->client_folder_id);
			$cf_response = $this->getMemberDataToMerge($email);
			if ($cf_response->type == MM_Response::$ERROR) 
			{
				return $cf_response;
			}
		
			//first sync the contact
			$contact = $this->syncContact($email, $cf_response->message);
			$subscription = new SimpleXMLElement("<subscription></subscription>");
			$subscription->addChild("listId",$newListId);
			$subscription->addChild("status","normal");
			
			$changeResult = $this->callIContactAPI("c/{$this->client_folder_id}/subscriptions/{$oldListId}_{$contact->contactId}","PUT",$subscription->asXML());
			if (($status = $this->getiContactError($changeResponse)) !== false)
			{
				return new MM_Response($status, MM_Response::$ERROR);
			}
			return new MM_Response();	
		}
	}
	
	/**
	 * Updates a members information attached to a subscribed list
	 * @see MM_AbstractEmailServiceProvider::updateMember()
	 * @param $email String The email of the member to be updated
	 * @param $listId String The id of the list where the member's subscription info should be updated
	 * @param $newEmail String (optional) - The member's new email in the case where the update is an email address change
	 */
	public function updateMember($email, $listId,$newEmail="") 
	{
		if (empty($listId))
		{
			return new MM_Response(); //no list was passed in, so success
		}

		$this->addRequiredCustomFields($this->getClientFolderId());
		$cf_response = $this->getMemberDataToMerge(empty($newEmail)?$email:$newEmail);
		if ($cf_response->type == MM_Response::$ERROR)
		{
			return $cf_response;
		}

		$customFields = $cf_response->message;
		if (!empty($newEmail))
		{
			$customFields['email'] = $newEmail;
		}

		$retval = $this->syncContact($email, $customFields);
		if ($retval->type == MM_Response::$ERROR)
		{
			$listFriendlyNames = $this->getLists();
			$listName = (($listFriendlyNames->type != MM_Response::$ERROR) && isset($listFriendlyNames->message[$listId]))?"{$listFriendlyNames->message[$listId]} ({$listId})":$listId;
			new MM_Response("Error updating information for {$email} on list {$listName}",MM_Response::$ERROR);
		}
		else
		{
			return new MM_Response();
		}
	}
	
	/**
	 * 
	 * Gets the member data to merge. Currently this is first_name, last_name, email, and any access tags
	 * @param String $email The email address of the member
	 * @return MM_Response containing an array of merge data as key-value pairs on success, MM_Response containing the error state otherwise
	 */
	private function getMemberDataToMerge($email, $includeBundleInfo=true)
	{
		$user = MM_User::findByEmail($email);
		
		if (!$user->isValid())
		{
			return new MM_Response("Error retrieving user information for {$email}",MM_Response::$ERROR);
		}
		
		//get first and last names
		$userData = array("firstName"=>$user->getFirstName(), "lastName"=>$user->getLastName());

		$customFields = array();
		
		if($includeBundleInfo)
		{
			//set all bundles false to start
			foreach (MM_Bundle::getBundleShortNames() as $reqTag=>$reqName)
			{
				$reqTag = strtolower($reqTag);
				$customFields[$reqTag] = "FALSE";
			}
			
			//now set the ones the user has equal to true
			$appliedBundles = $user->getAppliedBundles();
			
			foreach ($appliedBundles as $appliedBundle)
			{
				$bundle = $appliedBundle->getBundle();
					
				if($bundle->isValid())
				{
					$shortName = strtoupper($bundle->getShortName());
					$customFields[$shortName] = "TRUE";
				}
			}
		}
		
		return new MM_Response($userData + $customFields); //note: assumes no overlap in tag shortnames and user data keys!
	}
	
	private function getClientFolders()
	{
		$response = $this->callIContactAPI("c/");
		if ($response->type != MM_Response::$SUCCESS)
		{
			return $response;
		}
		
		$response_obj = $response->message;
		if (!@isset($response_obj->clientfolders->clientfolder))
		{
			return new MM_Response("Error finding iContact client folder",MM_Response::$ERROR);
		}
		$folder_list = array();
		foreach ($response_obj->clientfolders->clientfolder as $clientfolder)
		{
			$folder_id = (String)$clientfolder->clientFolderId;
			$folder_list[$folder_id] = $folder_id;
		}
		return new MM_Response($folder_list);
	}
	
	private function getAccountId()
	{
		$url = "{$this->host}/icp/a";
		$response = $this->doIContactAPICall($url);
		$response_obj = simplexml_load_string($response);
		if (isset($response_obj->accounts->account->accountId))
		{
			return new MM_Response($response_obj->accounts->account->accountId);
		}
		else 
		{
			$error = (@isset($response_obj->errors->error))?": {$response_obj->errors->error}":"";
			return new MM_Response("Error retrieving iContact account id{$error}",MM_Response::$ERROR);	
		}
	}
	
	/**
	 * calls the iContact api , returns an object representation of the xml response. Resource is relative to "/icp/a/<account id>/"
	 */
	protected function callIContactAPI($resource,$verb="GET",$data="")
	{
		//make sure we have an account id
		if (empty($this->account_id))
		{
			$response = $this->getAccountId();
			if ($response->type != MM_Response::$SUCCESS)
			{
				return $response;
			}
			else 
			{
				$this->account_id = $response->message;
			}
		}
		
		$url = "{$this->host}/icp/a/{$this->account_id}/{$resource}";
		$xml = simplexml_load_string($this->doIContactAPICall($url,$verb,$data));
		return new MM_Response($xml);	
	}
	
	protected function doIContactAPICall($url,$verb="GET",$data="")
	{
		$headers = array(
				'Accept: text/xml',
				'Content-Type: text/xml',
				'Api-Version: 2.2',
				'Api-AppId: ' . MM_IContactEmailServiceProvider::$API_KEY,
				'Api-Username: ' . $this->username,
				'Api-Password: ' . $this->password
				);
		$ch=curl_init($url);
		curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, false);
		curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, false);
		
		$cleanup_put = false;
		
		switch ($verb) 
		{
			case "POST":
				//do post stuff
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
				if (!ini_get('safe_mode') && !ini_get('open_basedir'))
				{
					curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
				}
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
				//TODO: PHP 5.2 workaround - remove once support is dropped
				if (version_compare(PHP_VERSION, '5.3.2') >= 0)
				{
					curl_setopt($ch, CURLOPT_POSTREDIR, 7);
				}
				break;
			case "PUT":
				//do put stuff
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
				break;
			case "DELETE":
				//do delete stuff
				curl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');
				curl_setopt($ch, CURLOPT_POSTFIELDS, $data);
			case "GET":
			default:
				//default is "GET", which is default curl action
				break;
		}
		
		$buf = curl_exec($ch);
		if ($cleanup_put) 
		{
			fclose($putData);
		}
		curl_close($ch);
		return $buf;		
	}
	
	public function setClientFolderId ($clientFolderID)
	{
		$this->client_folder_id = $clientFolderID;
	}
	
	public function getClientFolderId() 
	{
		return $this->client_folder_id;
	}
	
	/**
	 * locates a contact on iContact, creates if necessary, and returns the contact object
	 */
	protected function syncContact($email,$syncData) 
	{
		$search_url = "c/{$this->client_folder_id}/contacts?email={$email}";
		$iResponse = $this->callIContactAPI($search_url);
		if (($status = $this->getiContactError($iResponse)) !== false)
		{
			return new MM_Response($status,MM_Response::$ERROR);
		}
		
		$iResults = $iResponse->message;
		$num_results = intval((string)$iResults->total);
		$contactId = "";
		if ($num_results > 0)
		{
			//existing contact
			$thisContact = $iResults->contacts->contact[0];
			unset($thisContact->createDate);
			unset($thisContact->bounceCount);
			$contactId = (string)$thisContact->contactId;
		}
		else 
		{
			//xml is slightly different when creating a contact
			$allContacts = new SimpleXMLElement("<contacts></contacts>");
			$thisContact = $allContacts->addChild("contact");
			$thisContact->addChild("email",$email);
		}
		
		//add any tags that are missing
		foreach ($syncData as $requiredProperty=>$requiredPropertyValue)
		{
			if (isset($thisContact->$requiredProperty))
			{
				$thisContact->$requiredProperty = $requiredPropertyValue;
			}
			else 
			{
				$thisContact->addChild($requiredProperty,$requiredPropertyValue);	
			}
		}
		
		//push to server
		if ($contactId == "")
		{
			//create
			$syncResponse = $this->callIContactAPI("c/{$this->client_folder_id}/contacts/","POST",$allContacts->asXml());
		}
		else 
		{
			//update
			$syncResponse = $this->callIContactAPI("c/{$this->client_folder_id}/contacts/{$contactId}","PUT",$thisContact->asXml());				
		}
		
		if (($status = $this->getiContactError($syncResponse)) !== false)
		{
			return new MM_Response($status,MM_Response::$ERROR);
		}
		
		return new MM_Response(($contactId=="")?$syncResponse->message->contacts->contact:$syncResponse->message->contact);	
	}
	
	private function getiContactError($response_obj)
	{
		//in the context of a call to callIContact(), an error MM_Response means a transmission error
		if (($response_obj->type == MM_Response::$ERROR) || !($response_obj instanceof MM_Response))
		{
			return "Error connecting to iContact";
		}
		
		if (isset($response_obj->message->errors) && isset($response_obj->message->errors->error))
		{
			return ((string)$response_obj->message->errors->error);
		}
		else 
		{
			return false;
		}
	}

}

