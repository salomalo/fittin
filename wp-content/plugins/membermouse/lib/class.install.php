<?php
/**
 * 
 * MemberMouse(TM) (http://www.membermouse.com)
 * (c) MemberMouse, LLC. All rights reserved.
 * 
 * MM_Install handles all install/update related tasks. The master schema is located in data/install_sql.php. 
 * Key things to remember when working with the master schema: 
 * 1. The wordpress dbdelta function is used to keep the schema in sync across versions. 
 *    Formatting is very important, please reference the initial schema when adding new tables
 * 2. PRIMARY KEYs need to be declared on a separate line (vs inline with the column definition. Two spaces need to
 *    follow the words PRIMARY KEY and the definition of that key, otherwise the dbdelta will fail
 * 3. FOREIGN KEYs are not currently supported and can potentially cause dbdeltas to fail.
 * 4. Each column or key definition needs to be on its own line. Lines are delimited by \n (unix-style newline)
 * 5. dbdelta() currently doesn't properly deal with backticks surrounding the column name in KEY definitions
 * 6. dbdelta() will add columns to existing tables, but will not drop removed columns. Those operations will need to be done manually 
 * 
 * With a properly formatted schema, the database structure will be synced to the schema on both install and update, eliminating the need for
 * version-specific update code and different code for installs vs updates. Default data with specified keys (either primary keys or unique column values) 
 * is inserted using INSERT IGNORE sql statements. This handles both insert and update scenarios because duplicate key errors are ignored if the data already exists.
 * 
 */
require_once(ABSPATH.'wp-admin/includes/upgrade.php');

 class MM_Install
 {
 	function __construct()
 	{
 		//default constructor
 	}
 	
 	public function activate()
 	{
 		global $wpdb;
 		ob_start();
 		
 		$error = "";
 		
	 	if($this->createDBCache())
	 	{
	 		if($this->updateMemberMouseClass())
	 		{
	 			// reset minor version if this is a major version upgrade
	 			$crntMajorVersion = MemberMouse::getPluginVersion();
	 			$lastMajorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION);
	 			if (!empty($lastMajorVersion) && (version_compare($lastMajorVersion, $crntMajorVersion) < 0))
	 			{	
	 				MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION, MM_MemberMouseService::$DEFAULT_MINOR_VERSION); 
	 			}
	 			
		 		if($this->authenticateWithMM() !== false)
		 		{
		 			if($this->alterMMTables())
		 			{
		 				//628 patch
		 				if (method_exists('MM_MemberMouseService','regulateSchedulingEntries'))
						{
							MM_MemberMouseService::regulateSchedulingEntries();
						}
		 				
		 				if($this->insertMMDefaultData())
		 				{	 							
		 					// set new major version
		 					$crntMajorVersion = MemberMouse::getPluginVersion();
		 					MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION, $crntMajorVersion);
		 					
		 					//update version history
		 					$versionDescription = $crntMajorVersion;
		 					$minorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MINOR_VERSION);
		 					
		 					if($minorVersion !== false && intval($minorVersion) > 0)
		 					{
		 						$versionDescription .= "-".$minorVersion;
		 					}
		 					else
		 					{
		 						$versionDescription .= "-".MM_MemberMouseService::$DEFAULT_MINOR_VERSION;
		 					}
		 					
 							$versionRelease = MM_VersionRelease::findByVersion($versionDescription);
 							$versionRelease->setVersion($versionDescription);
 							$versionRelease->commitData();
 							
 							MM_MemberMouseService::activatePlugin();
 							
 							// clear major version notice
 							$crntMajorVersion = MemberMouse::getPluginVersion();
 							$upgradeVersion = MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_UPGRADE_NOTICE);
 							if(!empty($upgradeVersion) && (version_compare($crntMajorVersion, $upgradeVersion, ">=")))
 							{
 								MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_UPGRADE_NOTICE, "");
 							}
 							
 							ob_end_clean();
	 						return true;	
		 				}
				 		else 
				 		{
	 						$error = "The MemberMouse installer could not install default data into the database. Verify that the permissions of the database user defined in wp-config.php has all privileges.";
				 		}
		 			}
			 		else 
			 		{
	 					$error = "The MemberMouse installer was unable to alter MemberMouse tables. Verify that the permissions of the database user defined in wp-config.php has all privileges.";
			 		}
		 		}
		 		else 
		 		{
		 			$error = "<div style='font-family: sans-serif; font-size: 13px;'>";
		 			
		 			$error .= "<h3 style='color:#BC0B0B; margin-top:0px; margin-bottom:5px; font-size: 14px;'>This site is not authorized to use the MemberMouse plugin</h3>";
		 			
		 			$error .= "<p style='margin-top:0px; margin-bottom:5px;'>In order to use the MemberMouse plugin you need to <a href=\"http://support.membermouse.com/support/solutions/articles/9000020222-installing-membermouse\" target=\_blank\">register your site with membermouse.com</a>.</p>";
		 			
		 			$error .= "</div>";
		 		}
	 		}
	 		else 
	 		{
	 			$error = "Unable to insert MM_MemberMouseService into mm_container table. Verify that the permissions of the database user defined in wp-config.php has all privileges.";
	 		}
	 		
		}
		else 
		{
			$error = "Unable to install the mm_container table. Verify that the permissions of the database user defined in wp-config.php has all privileges.";
		}
 		
	 	ob_end_clean();
	 	
 		// an error occurred so deactivate the plugin
		$this->showError($error);
		exit;
 	}
 	
 	
 	private function showError($error)
 	{
		echo $error; 
		@deactivate_plugins(MM_PLUGIN_ABSPATH."/index.php", false);
 	}
 	
 	
 	private function createDBCache()
 	{
 		global $wpdb;
 		
 		require_once(MM_PLUGIN_ABSPATH."/data/db_cache_sql.php");
 	
		if(isset($sql) && count($sql) > 0)
		{
			foreach($sql as $query)
			{
				try
				{
					$result = $wpdb->query($query);
					if(!$result) 
					{
						return false;
					}
				}
				catch(Exception $e)
				{
					return false;
				}
			}
			
			$countSql = "select count(*) as total from ".MM_TABLE_CONTAINER." where name='membermouseservice'";
			$row = $wpdb->get_row($countSql);
			
			if($row===false)
			{
				return false;
			}	
		}
		
		return true;
 	}
 	
 	public function updateMemberMouseClass()
 	{
 		global $wpdb;
 		
 		$removeSql = "DELETE FROM ".MM_TABLE_CONTAINER." WHERE name='membermouseservice'";
		$row = $wpdb->get_row($removeSql);
		$wpdb->query($removeSql);
		
		$addSql = "INSERT INTO ".MM_TABLE_CONTAINER." (name, obj, is_system, date_added) values ('membermouseservice', '', '1', NOW());";
		if($wpdb->query($addSql) === false)
		{	
			return false;
		}
		return true;
 	}
 	
 	public function authenticateWithMM()
 	{
 		if(class_exists("MM_MemberMouseService"))
 		{
	 		return MM_MemberMouseService::authorize();
 		}
 		return false;
 	}
 	
 	private function alterMMTables()
 	{
 		global $wpdb;
 		
 		$filename = "install_sql";
 		require_once(MM_PLUGIN_ABSPATH."/data/{$filename}.php");	

		if (isset($sql) && count($sql)>0)
		{
			dbdelta($sql);
		}
		
		// Since DBDelta doesn't handle dropping column, here's where we can do it manually & safely. We first 
		// check to see if the column even exists. This could happen if a client has deactivated the 
		// plugin for some reason and then decides to reactivate.
		$droppedColumns = array();
		$droppedColumns[MM_TABLE_USER_DATA][] = "password";
		
		foreach($droppedColumns as $table => $columns)
		{
			foreach($columns as $column)
			{
				if($this->hasColumn($table, $column))
				{
					$wpdb->query("ALTER TABLE {$table} DROP COLUMN {$column}");
				}
			}
		}
		
 		return true;
 	} 	
 	
	private function hasColumn($table, $column)
	{
		global $wpdb;
		
 		$sql = "SELECT COUNT(*) as total FROM information_schema.columns WHERE table_name = '{$table}' AND column_name = '{$column}'"; 
 		$row = $wpdb->get_row($sql);
 		return ($row->total>0);
	}
	
 	private function hasRecords($table, $column, $where)
 	{
 		global $wpdb;
 		
 		$sql = "select count(*) as total from {$table} where {$column}='".addslashes($where)."'"; 
 		$row = $wpdb->get_row($sql);
 		return ($row->total>0);
 	}
 	
 	
 	private function insertMMDefaultData()
 	{
 		global $wpdb, $current_user;
		
 		// insert default option values
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACCT_SECURITY_ENABLED, MM_OptionUtils::$DEFAULT_ACCT_SECURITY_ENABLED);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACCT_SECURITY_MAX_IPS, MM_OptionUtils::$DEFAULT_ACCT_SECURITY_MAX_IPS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ON_LOGIN_USE_WP_FRONTPAGE, MM_OptionUtils::$DEFAULT_ON_LOGIN_USE_WP_FRONTPAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFTER_LOGIN_USE_WP_FRONTPAGE, MM_OptionUtils::$DEFAULT_AFTER_LOGIN_USE_WP_FRONTPAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SHOW_LOGIN_LOGOUT_LINK, MM_OptionUtils::$DEFAULT_SHOW_LOGIN_LOGOUT_LINK);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_HIDE_PROTECTED_MENU_ITEMS, MM_OptionUtils::$DEFAULT_HIDE_PROTECTED_MENU_ITEMS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_LOGIN_PAGE, MM_OptionUtils::$DEFAULT_USE_MM_LOGIN_PAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_RESET_PASSWORD_PAGE, MM_OptionUtils::$DEFAULT_USE_MM_RESET_PASSWORD_PAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_COUNTRY_SELECTIONS, MM_OptionUtils::$DEFAULT_COUNTRY_SELECTIONS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_SUBJECT, MM_OptionUtils::$DEFAULT_FORGOT_PASSWORD_SUBJECT);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_BODY, MM_OptionUtils::$DEFAULT_FORGOT_PASSWORD_BODY);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE, MM_OptionUtils::$DEFAULT_AFFILIATE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE, MM_OptionUtils::$DEFAULT_SUB_AFFILIATE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE_LIFESPAN, MM_OptionUtils::$DEFAULT_AFFILIATE_LIFESPAN);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_LOGIN_TOKEN_LIFESPAN, MM_OptionUtils::$DEFAULT_LOGIN_TOKEN_LIFESPAN);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_CHECKOUT_FORM_TEST_DATA, MM_OptionUtils::$DEFAULT_USE_CHECKOUT_FORM_TEST_DATA);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_WIDTH, MM_OptionUtils::$DEFAULT_PURCHASE_CONFIRMATION_DIALOG_WIDTH);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_CONFIRMATION_DIALOG_HEIGHT, MM_OptionUtils::$DEFAULT_PURCHASE_CONFIRMATION_DIALOG_HEIGHT);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DEFAULT_CHECKOUT_ITEM_TYPE, MM_OptionUtils::$DEFAULT_CHECKOUT_ITEM_TYPE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DEFAULT_CHECKOUT_ITEM_ID, MM_OptionUtils::$DEFAULT_CHECKOUT_ITEM_ID);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SHOW_PREVIEW_BAR, MM_OptionUtils::$DEFAULT_SHOW_PREVIEW_BAR);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_HIDE_ADMIN_BAR, MM_OptionUtils::$DEFAULT_HIDE_ADMIN_BAR);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ENABLE_WP_AUTOP, MM_OptionUtils::$DEFAULT_ENABLE_WP_AUTOP);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ENABLE_USERNAME_CHANGE, MM_OptionUtils::$DEFAULT_ENABLE_USERNAME_CHANGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ALLOW_LOGGED_OUT_PURCHASES, MM_OptionUtils::$DEFAULT_ALLOW_LOGGED_OUT_PURCHASES);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ALLOW_DUPLICATE_SUBSCRIPTIONS, MM_OptionUtils::$DEFAULT_ALLOW_DUPLICATE_SUBSCRIPTIONS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_PAID_MESSAGE, MM_OptionUtils::$DEFAULT_CHECKOUT_PAID_MESSAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_FREE_MESSAGE, MM_OptionUtils::$DEFAULT_CHECKOUT_FREE_MESSAGE);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CHECKOUT_MESSAGE_CSS, MM_OptionUtils::$DEFAULT_CHECKOUT_MESSAGE_CSS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CURRENCY, MM_OptionUtils::$DEFAULT_CURRENCY);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_JQUERY_UI, MM_OptionUtils::$DEFAULT_USE_JQUERY_UI);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ALLOW_OVERDUE_ACCESS, MM_OptionUtils::$DEFAULT_ALLOW_OVERDUE_ACCESS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CAPTCHA_ENABLED, MM_OptionUtils::$DEFAULT_CAPTCHA_ENABLED);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_RESET_PASSWORD, MM_OptionUtils::$DEFAULT_USE_MM_CSS);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DIAGNOSTIC_MODE, MM_DiagnosticLog::$MODE_OFF);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_FORCE_USE_DB_CACHE, 0);
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CURRENCY_FORMAT_POSTFIX_ISO, 'false');
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE_ALIAS, "");
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SUB_AFFILIATE_ALIAS, "");
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_AFFILIATE_LIFESPAN, "");
		
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SITE_IN_TEST_MODE, "0"); //0 for false, 1 for true
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CAPTCHA_KEY, "");
		MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_CAPTCHA_PRIVATE_KEY, "");
		
		//this can be safely removed in 2.2.7
		MM_OptionUtils::setDefaultValue("mm-authnet-cim-cert-update-2017", "UPDATED");
				
		// options that vary based on if this is an upgrade versus a new install
		$lastMajorVersion = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_MAJOR_VERSION);
		
		if(empty($lastMajorVersion))
		{
			// set options for new installs
			// for 2.0.7 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DISABLE_EXPLICIT_LINKS, MM_OptionUtils::$DEFAULT_DISABLE_EXPLICIT_LINKS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_LINK_STYLE, MM_OptionUtils::$DEFAULT_PURCHASE_LINK_STYLE);
			
			// for 2.0.8 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SMARTTAG_VERSION, MM_OptionUtils::$DEFAULT_SMARTTAG_VERSION);
			
			// for 2.0.9 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACTIVITY_LOG_CLEANUP_ENABLED, MM_OptionUtils::$DEFAULT_ACTIVITY_LOG_CLEANUP_ENABLED);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACTIVITY_LOG_CLEANUP_INTERVAL, MM_OptionUtils::$DEFAULT_ACTIVITY_LOG_CLEANUP_INTERVAL);
			
			// for 2.1.2 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_CHECKOUT, MM_OptionUtils::$DEFAULT_USE_MM_CSS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_MY_ACCOUNT, MM_OptionUtils::$DEFAULT_USE_MM_CSS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_LOGIN, MM_OptionUtils::$DEFAULT_USE_MM_CSS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_FORGOT_PASSWORD, MM_OptionUtils::$DEFAULT_USE_MM_CSS);
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ENABLE_MEMBERSHIP_PRORATION, MM_OptionUtils::$DEFAULT_ENABLE_MEMBERSHIP_PRORATION);
			
			// for 2.2.5 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DRIP_CONTENT_TIME_SETTING, MM_OptionUtils::$DEFAULT_DRIP_CONTENT_TIME_SETTING);
		}
		else
		{
			// set options for existing installs
			// for 2.0.7 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DISABLE_EXPLICIT_LINKS, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_PURCHASE_LINK_STYLE, MM_LINK_STYLE_EXPLICIT);
			
			// for 2.0.8 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_SMARTTAG_VERSION, "2.0");
			
			// for 2.0.9 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACTIVITY_LOG_CLEANUP_ENABLED, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ACTIVITY_LOG_CLEANUP_INTERVAL, "");

			// for 2.1.2 release
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_CHECKOUT, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_MY_ACCOUNT, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_LOGIN, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_USE_MM_CSS_FORGOT_PASSWORD, "0");
			MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_ENABLE_MEMBERSHIP_PRORATION, "0");
			
			// for 2.2.5 release
			if(class_exists('MM_ProtectedContentEngine'))
			{
				MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DRIP_CONTENT_TIME_SETTING, MM_ProtectedContentEngine::$TIME_SETTING_SERVER);
			}
			else
			{
				MM_OptionUtils::setDefaultValue(MM_OptionUtils::$OPTION_KEY_DRIP_CONTENT_TIME_SETTING, MM_OptionUtils::$DEFAULT_DRIP_CONTENT_TIME_SETTING);
			}
			
			// when upgrading from releases < 2.2.5
			if (version_compare($lastMajorVersion,'2.2.4','<='))
			{
				$wpdb->query("ALTER TABLE ".MM_TABLE_TRANSACTION_LOG." MODIFY COLUMN order_id BIGINT(20) UNSIGNED NOT NULL");
				$wpdb->query("ALTER TABLE ".MM_TABLE_TRANSACTION_LOG." MODIFY COLUMN order_item_id BIGINT(20) UNSIGNED");
			}
		}
 		
 		MM_Role::addRoles();
 		
	 	// create default employee account if one doesn't exist, using the current user
	 	$install_sql = "select * from ".MM_TABLE_EMPLOYEE_ACCOUNTS." where is_default='1' LIMIT 1;";
	 	$row = $wpdb->get_row($install_sql);
	 	if($row == null)
	 	{
	 		//the current user isn't an employee
	 		$install_sql = "insert into ".MM_TABLE_EMPLOYEE_ACCOUNTS." set display_name='%s', email='%s', is_default='%d', role_id='%s', user_id='%d'";
	 		$displayName = (!empty($current_user->display_name)) ? $current_user->display_name : "Support";
	 		$wpdb->query($wpdb->prepare($install_sql, $displayName, $current_user->user_email, 1, MM_Role::$ROLE_ADMINISTRATOR, $current_user->ID));
	 		$emailId = $wpdb->insert_id;
	 	}
	 	else 
	 	{
	 		$emailId = $row->id;
	 	}
	 	
	 	// install default overdue payment notification email
	 	$crntValue = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_OVERDUE_PAYMENT_NOTIFICATION_INSTALLED);
	 	if(class_exists('MM_Action') && ($crntValue === false || $crntValue === ""))
	 	{
	 		$action = new MM_Action();
	 		$action->setEventType(MM_Event::$MEMBER_STATUS_CHANGE);
	 		$action->setActionType(MM_Action::$MM_ACTION_SEND_EMAIL);
	 			
	 		$emailToId = MM_Action::$CURRENT_MEMBER_PLACEHOLDER;
	 		$emailFromId = $emailId;
	 		$emailCC = "";
	 		$emailSubject = MM_OptionUtils::$DEFAULT_OVERDUE_PAYMENT_SUBJECT;
	 		$emailBody = MM_OptionUtils::$DEFAULT_OVERDUE_PAYMENT_BODY;
	 		$action->setActionValue(MM_Action::prepareSendEmailValue($emailToId, $emailFromId, $emailCC, $emailSubject, $emailBody));
	 			
	 		// set attributes
	 		$attributes = array();
	 		$attributes["status_id"] = MM_Status::$OVERDUE;
	 		$action->setEventAttributes($attributes);
	 		
	 		$result = $action->commitData();
	 		
	 		if(MM_Response::isSuccess($result))
	 		{
	 			MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_OVERDUE_PAYMENT_NOTIFICATION_INSTALLED, "1");
	 		}
	 	}
	 	
 		// create default membership level
	 	if(!$this->hasRecords(MM_TABLE_MEMBERSHIP_LEVELS, 'is_default', '1'))
	 	{
		 	$install_sql = "INSERT INTO ".MM_TABLE_MEMBERSHIP_LEVELS." SET " .
			 			"	name = 'Free Membership'," .
			 			"	is_free='1'," .
			 			"	is_default='1'," .
			 			"	status='1'," .
			 			"	description='Default Free Membership'," .
			 			"	email_subject='%s'," .
			 			"	email_body='%s'," .
			 			"	email_from_id='%d'" .
			 			"";
		 	
		 	$wpdb->query($wpdb->prepare($install_sql, MM_MembershipLevel::$DFLT_EMAIL_SUBJECT, MM_MembershipLevel::$DFLT_EMAIL_BODY, $emailId));
	 	}
	 	
	 	// create default commission profile
	 	if(!$this->hasRecords(MM_TABLE_COMMISSION_PROFILES, 'is_default', '1'))
	 	{
	 		$install_sql = "INSERT INTO ".MM_TABLE_COMMISSION_PROFILES." SET " .
	 				"	name = 'Standard Commission Profile'," .
		 			"	is_default='1'," .
		 			"	description='This is the default commission profile'," .
		 			"	initial_commission_enabled='1'," .
		 			"	rebill_commissions_enabled='0'," .
		 			"	rebill_commission_type='default'," .
		 			"	rebill_commission_value='0'," .
		 			"	do_limit_rebill_commissions='0'," .
		 			"	rebill_commission_limit='0', " .
		 			"	do_reverse_commissions='1'" .
	 				"";
	 	
	 		$wpdb->query($install_sql);
	 	}
 		
 		// make sure active payment services are updated
 		if(class_exists('MM_PaymentServiceFactory') && class_exists('MM_PaymentService'))
 		{
	 		$services = MM_PaymentServiceFactory::getAvailablePaymentServices();
	 			
	 		foreach ($services as $service)
	 		{
	 			if ($service instanceof MM_PaymentService)
	 			{
	 				$service->install();
	 			}
	 		}
 		}
 		
 		//add smart tags
	 	$this->addSmartTags();
	 	
	 	$sql = "select count(*) as total from ".MM_TABLE_API_KEYS;
	 	$row = $wpdb->get_row($sql);
	 	
	 	if($row->total<=0)
	 	{
	 		$sql = "insert into ".MM_TABLE_API_KEYS." set ".
		 		   "name='Default Access', ".
		 		   "api_key='".MM_Utils::createRandomString(10)."',	".
		 		   "api_secret='".MM_Utils::createRandomString(10)."', ".
		 		   "status='1'";
	 		
		 	$wpdb->query($sql);
	 	}
	 	
	 	$sql = array();
	 	require_once(MM_PLUGIN_ABSPATH."/data/countries.sql.php");
	 	$numCountries = count($sql);
	 	$countryCheckSql = "select count(*) as total from ".MM_TABLE_COUNTRIES;
	 	$row = $wpdb->get_row($countryCheckSql);
	 	if ($row->total < $numCountries)
	 	{
	 		foreach ($sql as $query)
	 		{
	 			if($wpdb->query($query) === false)
	 			{
	 				return false;
	 			}
	 		}
	 	}
	 	unset($sql);
	 	
	 	$sql = array();
	 	require_once(MM_PLUGIN_ABSPATH."/data/country_subdivisions.sql.php");
	 	$numCountrySubdivisions = count($sql);
	 	$countrySubdivisionCheckSql = "select count(*) as total from ".MM_TABLE_COUNTRY_SUBDIVISIONS;
	 	$row = $wpdb->get_row($countrySubdivisionCheckSql);
	 	if ($row->total < $numCountrySubdivisions)
	 	{
	 		foreach ($sql as $query)
	 		{
	 			if($wpdb->query($query) === false)
	 			{
	 				return false;
	 			}
	 		}
	 	}
	 	unset($sql);
		
	 	$result = $this->setupCorePages();
	 	
	 	if(!$result)
	 	{
	 		return false;
	 	}
	 	
	 	$cacheWriteable = @MM_Utils::cacheIsWriteable();
	 		
	 	$sql = array();
	 		
	 	//TODO TRANSIENT: in version 2.0.1 renamed WordPress Mail to None. Once all customers have been upgraded to None then this 
	 	// if statement can be removed
	 	if($this->hasRecords(MM_TABLE_EMAIL_SERVICE_PROVIDERS, 'provider_token', 'default'))
	 	{
	 		$sql[] = "UPDATE ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='None' WHERE provider_token='default';";
	 	}
	 	else 
	 	{
	 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='None', provider_token='default', active='1';";
	 	}
	 
	 	//email service providers
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='ActiveCampaign', provider_token='activecampaign', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='MailChimp', provider_token='mailchimp', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='iContact', provider_token='icontact', api_key='".MM_IContactEmailServiceProvider::$API_KEY."'";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='AWeber', provider_token='aweber', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_EMAIL_SERVICE_PROVIDERS." SET provider_name='GetResponse', provider_token='getresponse', active='0';";
	 	
	 	//affiliate providers
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_AFFILIATE_PROVIDERS." SET provider_name='None', provider_token='default', active='1';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_AFFILIATE_PROVIDERS." SET provider_name='iDevAffiliate', provider_token='idevaffiliate';";
	 		
	 	//payment services
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='PAYPAL', name='PayPal', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='AUTHORIZENET', name='Authorize.net', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='AUTHORIZENETCIM', name='Authorize.net CIM', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='BRAINTREE', name='Braintree', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='CHARGIFY', name='Chargify', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='LIMELIGHT', name='Lime Light', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='STRIPE', name='Stripe', settings='', active='0';";
		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='TWOCHECKOUT', name='2Checkout', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='CLICKBANK', name='ClickBank', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='LITLE', name='Litle', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='COINBASE', name='Coinbase (Wallet Required)', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='COINBASEMINIMAL', name='Coinbase (Wallet Ignored)', settings='', active='0';";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_PAYMENT_SERVICES." SET token='TEST', name='Test Payment Service', settings='', active='0';";
	 	
	 	//shipping methods
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_SHIPPING_METHODS." SET token='FLATRATE', name='Flat Rate', settings='', active='1';"; //active by default
	 	
	 	foreach ($sql as $query)
	 	{
	 		$wpdb->query($query);
	 	}
	 	unset($sql);
	 	
	 	//apply any updates that may have been made to the schemas of the active payment services
	 	$activePaymentServices = MM_PaymentServiceFactory::getAvailablePaymentServices();
	 	foreach ($activePaymentServices as $ps)
	 	{
	 		$ps->install();
	 	}
	 	
		// Need to search and replace and remnance of [MM_Member_Data name='password'] in 
		// Forgot Password email with the new Reset Password Core Page Link Smart Tag
		$pattern 			  = "\[mm_member_data name=(['|\"]{1})password(['|\"]{1})\]";
		$forgotPasswordBody = MM_OptionUtils::getOption(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_BODY);
		$forgotPasswordBody = preg_replace("/{$pattern}/i", "<a href=\"[MM_CorePage_Link type='resetpassword']\">click here to reset your password</a>", $forgotPasswordBody);
		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_FORGOT_PASSWORD_BODY, $forgotPasswordBody);
		
	 	return true;
 	}
 	
 	
 	public function setupCorePages()
 	{
 		global $wpdb, $current_user;
 		
 		// Core Page Types
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$MEMBER_HOME_PAGE."','Member Home','1');";
	 	$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$SAVETHESALE."','Save the Sale','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$ERROR."','Error','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$LOGIN_PAGE."','Login','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$FORGOT_PASSWORD."','Forgot Password','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$RESET_PASSWORD."','Reset Password','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$CHECKOUT."','Checkout','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$REDEEM_GIFT."','Redeem Gift','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$PAID_CONFIRMATION."','Confirmation','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$FREE_CONFIRMATION."','Free Confirmation','0');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$MY_ACCOUNT."','My Account','1');";
 		$sql[] = "INSERT IGNORE INTO ".MM_TABLE_CORE_PAGE_TYPES." (id, name, visible) VALUES ('".MM_CorePageType::$LOGOUT_PAGE."','Logout','1');";
 			
	 	// Default Core Pages
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('1', '".MM_CorePageType::$MEMBER_HOME_PAGE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('2', '".MM_CorePageType::$SAVETHESALE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('3', '".MM_CorePageType::$ERROR."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('4', '".MM_CorePageType::$LOGIN_PAGE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('5', '".MM_CorePageType::$FORGOT_PASSWORD."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('6', '".MM_CorePageType::$CHECKOUT."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('7', '".MM_CorePageType::$PAID_CONFIRMATION."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('9', '".MM_CorePageType::$FREE_CONFIRMATION."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('10', '".MM_CorePageType::$MY_ACCOUNT."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('11', '".MM_CorePageType::$LOGOUT_PAGE."');";
 		$sql[] ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (id, core_page_type_id) VALUES ('12', '".MM_CorePageType::$REDEEM_GIFT."');";
	 	
	 	foreach($sql as $query)
	 	{
	 		if($wpdb->query($query) === false)
	 		{
	 			echo $query;
	 			return false;
	 		}
	 	}
	 	unset($sql);
 		
	 	// Install Default Core Pages
	 	$templateParams = new stdClass();
	 	$templateParams->resourceDirectory = MM_RESOURCES_URL;
	 	$mm_template_base = MM_PLUGIN_ABSPATH."/templates";
	 	
		// Member Homepage
 		$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$MEMBER_HOME_PAGE."' and ref_type IS NULL and page_id IS NULL";
 		$row = $wpdb->get_row($corePageSql);
	 	
	 	if($row->total > 0)
	 	{	
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 				"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/homepage.html.php", $templateParams))."', '[MM_Member_Data name=\"membershipName\"] Home Page', '".$this->getPostName('home')."');";
	 		
 			if(!$wpdb->query($sql))
 			{
 				echo $query;
 				return false;
 			}
 			
 			$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$MEMBER_HOME_PAGE);
	 	}
	 	
	 	// Save-the-Sale Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$SAVETHESALE."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	 
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/cancel.html.php", $templateParams))."', 'Cancel Membership', '".$this->getPostName('cancel')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$SAVETHESALE);
	 	}
	 	
	 	// Error Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$ERROR."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	
	 	if($row->total > 0)
		{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/error.html.php", $templateParams))."', 'Error', '".$this->getPostName('mm-error')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$ERROR);
	 	}
	 	
	 	// Login Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$LOGIN_PAGE."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	 
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/login.html.php", $templateParams))."', 'Login', '".$this->getPostName('login')."');";
		 		
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$LOGIN_PAGE);
	 	}

	 	// Logout Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$LOGOUT_PAGE."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/logout.html.php", $templateParams))."', 'Logout', '".$this->getPostName('logout')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$LOGOUT_PAGE);
	 	}
	 	
	 	// Forgot Password Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$FORGOT_PASSWORD."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	 
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/forgotpassword.html.php", $templateParams))."', 'Forgot Password', '".$this->getPostName('forgot-password')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$FORGOT_PASSWORD);
	 	}
	 	
	 	// Reset Password Page
	 	// remove corrupt reset password core pages
	 	$removeCorruptResetPasswordSql = "DELETE FROM ".MM_TABLE_CORE_PAGES." WHERE core_page_type_id = '".MM_CorePageType::$RESET_PASSWORD."' AND (page_id IS NULL || page_id = '');";
	 	$wpdb->query($removeCorruptResetPasswordSql);
	 	
	 	$corePageSql = "select id, page_id, count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$RESET_PASSWORD."'";
	 	$row = $wpdb->get_row($corePageSql);
	 	
	 	// it's possible that the reset password core page isn't being installed as a result of some corrupt 
	 	// core pages that we only partially installed (the page_id == NULL checks for that). We want to detect 
	 	// these so that their presense doesn't keep the fully functional page from being installed.
	 	if($row->total == 0 || $row->page_id == NULL)
	 	{	
	 		// create row in mm_core_pages table
	 		$resetPasswordSql ="INSERT IGNORE INTO ".MM_TABLE_CORE_PAGES." (core_page_type_id) VALUES ('".MM_CorePageType::$RESET_PASSWORD."');";
	 		
	 		if(!$wpdb->query($resetPasswordSql))
	 		{
	 			echo $resetPasswordSql;
	 			return false;
	 		}
	 		
	 		$resetCorePageId = $wpdb->insert_id;
	 		
	 		// create reset password page
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 		"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/resetpassword.html.php", $templateParams))."', 'Reset Password', '".$this->getPostName('reset-password')."');";
	 		
	 		if(!$wpdb->query($sql))
	 		{
	 			echo $sql;
	 			return false;
	 		}
	 		
	 		// link row in mm_core_pages table to reset password page
 			$this->linkCorePage($wpdb->insert_id, $resetCorePageId);
	 	}
	 	
	 	// Checkout Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$CHECKOUT."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/checkout.html.php", $templateParams))."', 'Checkout', '".$this->getPostName('checkout')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$CHECKOUT);
	 	}
	 	
	 	// Redeem Gift Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$REDEEM_GIFT."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	 
	 	if($row->total > 0)
	 	{
	 		$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
	 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/redeemgift.html.php", $templateParams))."', 'Redeem Gift', '".$this->getPostName('redeem-gift')."');";
	 				
	 		if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$REDEEM_GIFT);
	 	}
	 	
	 	// My Account Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$MY_ACCOUNT."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/myaccount.html.php", $templateParams))."', 'My Account', '".$this->getPostName('myaccount')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$MY_ACCOUNT);
	 	}
	 	
	 	// Paid Confirmation Page
	 	$corePageSql = "select count(*) as total from ".MM_TABLE_CORE_PAGES." where core_page_type_id = '".MM_CorePageType::$PAID_CONFIRMATION."' and ref_type IS NULL and page_id IS NULL";
	 	$row = $wpdb->get_row($corePageSql);
	 	 
	 	if($row->total > 0)
	 	{
		 	$sql = "insert into {$wpdb->posts} (post_type, post_author, post_date, post_status,post_content, post_title, post_name) " .
		 			"		values ('page',$current_user->ID, NOW(), 'publish','".addslashes(MM_TEMPLATE::generate($mm_template_base."/default_templates/confirmation.html.php", $templateParams))."', 'Thank You', '".$this->getPostName('confirmation')."');";
		 			
		 	if(!$wpdb->query($sql))
	 		{
	 			echo $query;
	 			return false;
	 		}
	 			
	 		$this->linkCorePage($wpdb->insert_id, MM_CorePageType::$PAID_CONFIRMATION);
	 	}
	 	
 		return true;
 	}
 	
 	private function addSmartTags()
 	{
 		global $wpdb;
 		
 		$wpdb->query("DELETE FROM ".MM_TABLE_SMARTTAGS);
 		require_once(MM_PLUGIN_ABSPATH."/data/smarttags.sql.php");
 		if(isset($sql) && is_array($sql))
 		{
 			foreach($sql as $query)
 			{
 				if($wpdb->query($query)===false){ 
 					return false;	
 				}
 			}
 		}
 		
 		//clear global SmartTag cache
 		MM_OptionUtils::setOption(MM_OptionUtils::$OPTION_KEY_SMARTTAGS);
 		
 		return true;
 	}
 	
 	private function getPostName($suggestedName=""){
 		global $wpdb;
 		$sql = "select count(*) as total from {$wpdb->posts} where post_name='".$suggestedName."'";
 		$row = $wpdb->get_row($sql);
 		if($row->total>0){
	 		$sql = "select post_name from {$wpdb->posts} where post_name like '".$suggestedName."-%'";
	 		$rows = $wpdb->get_results($sql);
	 		
	 		$index=1;
	 		while(true){
	 			$newName = $suggestedName."-".$index;
	 			$hasName = false;
	 			foreach($rows as $row){
	 				if($row->post_name == $newName){
	 					$hasName = true;		
	 				}
	 			}
	 			if(!$hasName){
	 				return $newName;
	 			}
	 			$index++;
	 		}
 		}
 		return $suggestedName;
 	}
 	
 	private function linkCorePage($page_id, $id)
 	{
		global $wpdb;
		$sql = "update ".MM_TABLE_CORE_PAGES." set page_id='{$page_id}' where id='{$id}'";
		
		if(!$wpdb->query($sql))
		{
			echo $sql;
			return false;
		}
 	}
 	
	private function field_exists($column, $table)
	{
		global $wpdb;
		$sql = "describe {$table}";
		$rows = $wpdb->get_results($sql);
	
		for($i=0; $i<count($rows); $i++)
		{
			if($column == $rows[$i]->Field)
			{
				return true;
			}
		}
		
		return false;
	}
	
	private function getFieldType($column, $table)
	{
		global $wpdb;
		$sql = "describe {$table}";
		$rows = $wpdb->get_results($sql);
		
		$numRows = count($rows);
		for($i=0; $i<$numRows; $i++)
		{
			if($column == $rows[$i]->Field)
			{
				return $rows[$i]->Type;
			}
		}
		
		return false;
	}
 }